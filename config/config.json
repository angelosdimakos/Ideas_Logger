{
  "//": "==== GENERAL SETTINGS ====",
  "mode": "full",
  "use_gui": true,
  "interface_theme": "dark",
  "batch_size": 5,
  "autosave_interval": 5,
  "log_level": "ERROR",

  "_comment_ai": "==== AI & LLM SETTINGS ====",
  "summarization": true,
  "llm_provider": "ollama",
  "llm_model": "mistral",
  "openai_model": "gpt-4",
  "api_keys": {
    "openai": "sk-xxxxxxxxxxxxxxxx"
  },

  "_comment_faiss": "==== EMBEDDING & FAISS ====",
  "embedding_model": "all-MiniLM-L6-v2",
  "faiss_top_k": 5,
  "force_summary_tracker_rebuild": true,
  "vector_store_dir": "./vector_store",
  "faiss_index_path": "./vector_store/summary_index.faiss",
  "faiss_metadata_path": "./vector_store/summary_metadata.pkl",

  "/_comment_exporting_json": "==== LOGGING & EXPORT ====",
  "logs_dir": "./logs",
  "export_dir": "./exports",
  "correction_summaries_path": "./logs/correction_summaries.json",
  "raw_log_path": "./logs/zephyrus_log.json",
  "raw_log_index_path": "./vector_store/raw_index.faiss",
  "raw_log_metadata_path": "./vector_store/raw_metadata.pkl",
  "log_format": "json",
  "markdown_export": true,

  "_comment_settings": "==== STRUCTURE SETTINGS ====",
  "default_tags": ["zephyrus"],
  "use_templates": true,
  "persona": "default",

  "_comment_category_structure": "==== CATEGORY STRUCTURE ====",
  "category_structure": {
    "Narrative": ["Narrative Concept", "Romantic Development", "Emotional Impact"],
    "World": ["Worldbuilding Detail", "Faction Dynamics", "Loop Mechanics"],
    "AI / Meta": ["AI System Design", "Tooling & Automation", "Execution Strategy", "Meta Reflection"],
    "Creative": ["Visual or Audio Prompt", "Gameplay Design Insight", "Creative Ops / Org Flow"]
  },

  "_comment_prompt_subcategory": "==== PROMPTS BY SUBCATEGORY ====",
  "prompts_by_subcategory": {
    "Narrative Concept": "Summarize the core narrative idea with a focus on its thematic significance or plot role.",
    "Romantic Development": "Summarize this relationship insight while preserving emotional nuance and character dynamics.",
    "Emotional Impact": "Summarize the emotional tone or psychological effect this idea is meant to deliver.",
    "Worldbuilding Detail": "Summarize this worldbuilding element to highlight its uniqueness or relevance to lore.",
    "Faction Dynamics": "Summarize the factional strategy, alliance, or betrayal logic described.",
    "Loop Mechanics": "Summarize this idea about time loops or memory mechanics in a structured way.",
    "AI System Design": "Summarize the AI system concept clearly, focusing on architecture or interaction design.",
    "Tooling & Automation": "Summarize the workflow, tool, or automation concept in a concise technical format.",
    "Execution Strategy": "Summarize the execution plan, decision, or optimization insight.",
    "Meta Reflection": "Summarize the philosophical or reflective insight being conveyed.",
    "Visual or Audio Prompt": "Summarize this creative prompt into a single vivid visual/audio description.",
    "Gameplay Design Insight": "Summarize this as a gameplay mechanic or player-interaction concept.",
    "Creative Ops / Org Flow": "Summarize the creative workflow or team process insight described.",
    "Refactor Advisor": "You're a senior Python developer. Given a module's code with a list of its functions and their metrics (MyPy errors, lint issues, complexity score, and test coverage), prioritize which functions to refactor first and explain why. For each function, reference its name and metrics and provide a concise, practical refactoring step.",
    "Module Functionality": "Given a list of documented functions with their purposes, summarize what this Python module does overall. Focus on its role in the system, key responsibilities, and how its parts contribute to that role. Be concise but informative.",
    "Strategic Recommendations": "You are an expert software architect specializing in technical debt reduction and large-scale codebase improvements. Given detailed project metrics (test coverage, code complexity, documentation coverage, and known high-risk files), provide a prioritized, highly actionable plan tailored specifically to the provided data. For each recommendation, reference exact metrics or thresholds observed in the data (e.g., \"Increase coverage from 42% to 60% in utils/file_utils.py\"). Avoid generic practices‚Äîsuggest precise architectural changes, target specific files or modules for refactoring, and recommend measurable next steps (e.g., \"Reduce function complexity >10 in llm_refactor_advisor.py to below 5 by modularization\"). Frame the output as a bullet-point action plan, starting with high-impact, low-effort improvements. Include estimated difficulty levels (Low, Medium, High) and the expected impact on maintainability for each action. Do not suggest adopting methodologies (e.g., TDD) unless tied directly to the metrics provided.",    "Audit Summary": "You are a technical manager. Provide an executive summary of the following code audit metrics. Highlight key strengths, critical risks, and immediate action points. Be concise, insightful, and use a professional tone suitable for presentation to stakeholders.",
    "Code Analysis": "You are an expert code reviewer and static analysis tool combined. Given detailed metrics for a specific module (MyPy errors, linting issues, function complexity, and test coverage), provide a highly technical and actionable analysis.\n\nFor each identified issue:\n- Recommend specific code improvements directly tied to the provided metrics.\n- Reference function or class names when suggesting changes.\n- For high complexity functions (e.g., complexity > 10), suggest clear strategies to reduce complexity.\n- For low coverage areas (coverage < 50%), recommend what types of tests should be written (unit, integration, mocks).\n- If MyPy errors are present, suggest exact type annotations or corrections.\n- If linting issues exist, reference the linting rule and provide a corrected code snippet if possible.\n\nFor each recommendation, provide:\n- **Estimated Difficulty**: Low / Medium / High\n- **Expected Effort**: Estimate the time or effort needed to resolve (e.g., 'Low - 30 minutes', 'High - multi-day refactor').\n\nConclude with a prioritized, bullet-point list of actions based on highest impact and lowest effort. Avoid generic advice; focus on precise, code-level improvements.",
    "Module Prototype": "You are a senior software engineer tasked with bootstrapping new modules for an existing codebase. Given module specifications, generate Python code stubs that reflect clean architecture principles. Guidelines: Provide realistic module, class, and function names matching the naming conventions of the project. Include accurate and descriptive docstrings for each class and function, specifying their intended purpose and parameters. Use structural scaffolding only‚Äîavoid full implementations. Clearly indicate filenames using \"# Filename: <path/module.py>\". Include \"# Suggested Integrations: <comma-separated modules>\" to specify integration points for automatic import generation. Ensure code blocks are wrapped in proper Markdown syntax for automated parsing.",
    "Test Generation": "You are a senior test engineer specializing in TDD and CI pipelines. Using the following module prototypes, generate corresponding pytest-compatible unit test stubs. Guidelines: Create one or more test functions for each public function or method in the prototypes. Use descriptive test names like `test_function_behavior` and include parameterized cases where applicable. Insert assert statements with realistic placeholders and clearly indicate what is being tested. Output clearly using Markdown code blocks and filenames prefixed with `test_`. Indicate filenames using \"# Filename: test_<module_name>.py\". Do not implement full tests‚Äîfocus on structurally correct stubs that enforce test coverage expectations.",
    "Missing Tests": "You are an experienced software engineer specializing in test-driven development (TDD). Analyze the provided production code and identify any public classes and methods that currently lack unit tests. For each, generate pytest-compatible test stubs with descriptive function names, realistic input scenarios, and placeholder assertions. Ensure filenames follow the 'test_<module_name>.py' convention. Focus on critical logic paths, edge cases, and potential failure scenarios. Output only valid Python code blocks ready for execution.",
    "Architecture Planning": "You are a senior software architect. Analyze the provided modules and propose new components to improve scalability, maintainability, and modularity. For each, specify üìÅ Module/Package Name (snake_case), üéØ Purpose, üõ† Suggested Integrations (explicit module references), and üìù Justification. Focus on high-impact, low-coupling solutions adhering to SOLID principles. Avoid trivial or superficial suggestions.",

    "_default": "Summarize the following idea into concise, meaningful bullet points:"
  },

  "_comment_testing": "==== TESTING SETTINGS ====",
  "test_mode": false,
  "test_logs_dir": "tests/mock_data/logs",
  "test_vector_store_dir": "tests/mock_data/vector_store",
  "test_export_dir": "tests/mock_data/exports",
  "test_correction_summaries_path": "tests/mock_data/logs/test_correction_summaries.json",
  "test_raw_log_path": "tests/mock_data/logs/test_zephyrus_log.json",
  "test_summary_tracker_path": "tests/mock_data/logs/test_summary_tracker.json",

  "_comment_future": "==== ADVANCED / FUTURE ====",
  "remote_sync": false,
  "plugin_dir": "plugins",
  "enable_debug_logging": true,
  "strict_offline_mode": false
}
