name: Optimized CI

on:
  push:
    branches: [main, master, "feature/**", "fix/**", "dev/**"]
  pull_request:
    branches: [main, master]

permissions:
  contents: read
  actions: read
  checks: write
  pull-requests: write
  statuses: write

# -----------------------------------------------
# 1) Diff analysis â€“ decide if we need audits
# -----------------------------------------------
jobs:
  diff-check:
    runs-on: ubuntu-latest
    outputs:
      run-refactor: ${{ steps.diff.outputs.run-refactor }}
      run-full-audit: ${{ steps.diff.outputs.run-full-audit }}
      changed-lines: ${{ steps.diff.outputs.changed-lines }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 2         # we diff against HEAD^

      - id: diff
        name: Analyse git diff
        shell: bash
        run: |
          CHANGED_FILES=$(git diff --name-only HEAD^ HEAD)
          echo "Changed files:" && echo "$CHANGED_FILES"

          # If any file in scripts/refactor changed we trigger refactor jobs
          if echo "$CHANGED_FILES" | grep -q '^scripts/refactor/'; then
            echo "run-refactor=true"  >>"$GITHUB_OUTPUT"
          else
            echo "run-refactor=false" >>"$GITHUB_OUTPUT"
          fi

          # Total added+deleted python LOC
          CHANGED_LINES=$(git diff --numstat HEAD^ HEAD \
                             | grep '\.py$' \
                             | awk '{sum+=$1+$2} END{print sum}')
          CHANGED_LINES=${CHANGED_LINES:-0}
          echo "changed-lines=$CHANGED_LINES" >>"$GITHUB_OUTPUT"

          # If >50 lines changed, run full audit
          if [ "$CHANGED_LINES" -gt 50 ]; then
            echo "run-full-audit=true"  >>"$GITHUB_OUTPUT"
          else
            echo "run-full-audit=false" >>"$GITHUB_OUTPUT"
          fi

# -----------------------------------------------
# 2) Set-up & cache virtualenv (only once)
# -----------------------------------------------
  setup:
    needs: diff-check
    runs-on: ubuntu-latest
    outputs:
      venv-path: ${{ steps.cache-venv.outputs.cache-hit }}
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
          cache: pip
          cache-dependency-path: requirements.txt

      - name: Cache / restore .venv
        id: cache-venv
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            venv-${{ runner.os }}-

      - name: Create & populate venv (if cache miss)
        if: steps.cache-venv.outputs.cache-hit != 'true'
        run: |
          python -m venv .venv
          source .venv/bin/activate
          python -m pip install --upgrade pip wheel setuptools
          pip install -r requirements.txt
          pip install faiss-cpu pytest-xdist xvfbwrapper  # heavy deps cached

      - name: Install xvfb system package once
        run: sudo apt-get update && sudo apt-get install -y xvfb

# -----------------------------------------------
# 3) Tests (only fast suite) + coverage
# -----------------------------------------------
  tests:
    needs: setup
    runs-on: ubuntu-latest
    env:
      ZEPHYRUS_HEADLESS: "1"
    steps:
      - uses: actions/checkout@v3
      - uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('requirements.txt') }}

      - name: Run pytest (fast set, 2 workers)
        run: |
          source .venv/bin/activate
          xvfb-run -a pytest -m "not slow" -n 2 \
              --cov=scripts --cov-config=.coveragerc \
              --cov-report=xml --cov-report=html

      - name: Upload coverage HTML
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: htmlcov
          path: htmlcov/

      - name: Upload to Codecov
        uses: codecov/codecov-action@v5
        continue-on-error: true
        with:
          files: ./coverage.xml
          verbose: true
          token: ${{ secrets.CODECOV_TOKEN }}
          slug: angelosdimakos/Ideas_Logger

# -----------------------------------------------
# 4) Lint (runs in parallel with tests)
# -----------------------------------------------
  lint:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('requirements.txt') }}

      - name: Run Black / Flake8 / MyPy / Pydocstyle
        run: |
          source .venv/bin/activate
          mkdir -p lint-reports
          black  --check scripts                     > lint-reports/black.txt       2>&1 || true
          flake8 scripts                            > lint-reports/flake8.txt      2>&1 || true
          MYPYPATH=. mypy --explicit-package-bases scripts \
                                                    > lint-reports/mypy.txt        2>&1 || true
          pip install pydocstyle interrogate
          pydocstyle scripts                        > lint-reports/pydocstyle.txt  2>&1 || true
          interrogate -v scripts                   > lint-reports/interrogate.txt 2>&1 || true

      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: lint-reports
          path: lint-reports/

# -----------------------------------------------
# 5) Optional RefactorGuard audits (only on big change)
# -----------------------------------------------
  refactor-audit:
    needs: [setup, diff-check]
    if: needs.diff-check.outputs.run-refactor == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('requirements.txt') }}

      - name: Run RefactorGuard diff audit
        run: |
          source .venv/bin/activate
          python scripts/refactor/refactor_guard_cli.py \
                 --refactored scripts --all --git-diff \
                 --missing-tests --json --output refactor_diff_audit.json

      - name: (Optional) Full audit if threshold exceeded
        if: needs.diff-check.outputs.run-full-audit == 'true'
        run: |
          source .venv/bin/activate
          python scripts/refactor/refactor_guard_cli.py \
                 --refactored scripts --all --missing-tests \
                 --json --output refactor_full_audit.json

      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: refactor-audits
          path: |
            refactor_diff_audit.json
            refactor_full_audit.json

# -----------------------------------------------
# 6) CI-Trends & PR summary (only if audits ran)
# -----------------------------------------------
  ci-trends:
    needs: [refactor-audit]
    if: needs.diff-check.outputs.run-refactor == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('requirements.txt') }}
      - uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Generate CI summary
        run: |
          source .venv/bin/activate
          python scripts/ci_analyzer/cli.py \
            --audit artifacts/refactor-audits/refactor_diff_audit.json \
            --output ci_diff_summary.md
      - uses: actions/upload-artifact@v4
        with:
          name: ci-summary
          path: ci_diff_summary.md

  pr-summary:
    needs: ci-trends
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: ci-summary
          path: .
      - name: Post summary comment
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          path: ci_diff_summary.md
