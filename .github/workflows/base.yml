name: Run Tests & CI Audit with Documentation

on:
  push:
    branches: [main, master, "features/**","feature/**", "fix/**", "dev/**"]
  pull_request:
    branches: [main, master,"features/**"]

permissions:
  contents: write
  actions: read
  checks: write
  pull-requests: write
  statuses: write
  packages: read

jobs:
  lint:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    container:
      image: ghcr.io/angelosdimakos/ideas_logger:latest
    steps:
      - uses: actions/checkout@v3

      - name: 🧼 Run Linter Report CLI
        run: |
          echo "🔎 Running Linter Report CLI..."
          python scripts/refactor/lint_report_pkg/lint_report_cli.py --audit linting_report.json  

      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: lint-report
          path: linting_report.json

  test:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    container:
      image: ghcr.io/angelosdimakos/ideas_logger:latest
    env:
      ZEPHYRUS_HEADLESS: "1"
    steps:
      - uses: actions/checkout@v3

      - name: "🛠 Install Runtime Dependency: rapidfuzz"
        run: |
          python -m pip install --no-cache-dir rapidfuzz

      - name: ✅ Run Tests
        run: |
          echo "🧪 Running tests with coverage..."
          xvfb-run -a pytest -n auto -c pytest.ini \
            --cov=scripts --cov-config=.coveragerc \
            --cov-report=term --cov-report=html --cov-report=json
          echo "✅ Coverage reports generated (.coverage, HTML, JSON)"

      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-reports
          path: |
            .coverage
            coverage.json
            coverage.xml
            htmlcov/

      - name: ☁️ Upload to Codecov
        uses: codecov/codecov-action@v5
        continue-on-error: true
        with:
          files: ./coverage.xml
          token: ${{ secrets.CODECOV_TOKEN }}
          slug: angelosdimakos/Ideas_Logger

      - name: 🧠 Run RefactorGuard
        run: |
          echo "📊 Running RefactorGuard..."
          python scripts/refactor/refactor_guard_cli.py \
            --refactored scripts --all \
            --json --output refactor_audit.json \
            --coverage-path coverage.json # Important: Pass coverage data

      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: refactor-audit
          path: refactor_audit.json

  docstring:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    container:
      image: ghcr.io/angelosdimakos/ideas_logger:latest
    steps:
      - uses: actions/checkout@v3

      - name: 📋 Generate Docstring Summary
        run: |
          echo "📚 Generating docstring summary..."
          python scripts/refactor/parsers/docstring_parser.py --json 

      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: docstring-summary
          path: docstring_summary.json

  strictness-analysis:
    needs: [ test ]
    runs-on: ubuntu-latest
    timeout-minutes: 5
    container:
      image: ghcr.io/angelosdimakos/ideas_logger:latest
    steps:
      - uses: actions/checkout@v3

      - name: "🛠 Install Runtime Dependency: rapidfuzz"
        run: |
          python -m pip install --no-cache-dir rapidfuzz

      - name: 📥 Download Refactor Audit Artifact
        uses: actions/download-artifact@v4
        with:
          name: refactor-audit
          path: ./artifacts/refactor-audit
          merge-multiple: true  # Flatten directory structure to avoid nested folders

      - name: 📚 Run Test Discovery
        run: |
          echo "🔎 Running Test Discovery..."
          mkdir -p ./artifacts
          python scripts/refactor/test_discovery.py \
            --tests tests\
            --output ./artifacts/test_report.json

      - name: 📐 Run Strictness Analyzer
        run: |
          echo "📐 Running Strictness Analyzer with Precomputed Report..."
          python scripts/refactor/strictness_analyzer.py \
            --test-report ./artifacts/test_report.json \
            --audit ./artifacts/refactor-audit/refactor_audit.json \
            --output ./artifacts/final_strictness_report.json

      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: final-strictness-report
          path: ./artifacts/final_strictness_report.json

      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-report
          path: ./artifacts/test_report.json

  report:
    needs: [lint, test, docstring]
    timeout-minutes: 5
    runs-on: ubuntu-latest
    if: ${{ success() }}
    container:
      image: ghcr.io/angelosdimakos/ideas_logger:latest
    env:
      ZEPHYRUS_HEADLESS: "1"
    steps:
      - uses: actions/checkout@v3

      - name: 📥 Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: ✨ Generate Combined Report
        run: |
          echo "⚗️ Merging Reports..."
          python scripts/refactor/merge_audit_reports.py \
            --docstrings artifacts/docstring-summary/docstring_summary.json \
            --coverage artifacts/refactor-audit/refactor_audit.json \
            --linting artifacts/lint-report/linting_report.json \
            -o artifacts/merged_report.json

      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: combined-report
          path: artifacts/merged_report.json

      - name: 📊 Generate Severity Audit Report
        run: |
          echo "📈 Running CI Severity Audit..."
          python scripts/ci_analyzer/severity_audit.py \
            --audit artifacts/merged_report.json \
            --output artifacts/ci_severity_report.md

      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: ci-severity-report
          path: artifacts/ci_severity_report.md

      - name: 💬 Post PR Summary (Optional)
        if: github.event_name == 'pull_request'
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          path: artifacts/ci_severity_report.md

  documentation:
    needs: [report]
    runs-on: ubuntu-latest
    timeout-minutes: 5
    if: ${{ github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' }}
    container:
      image: ghcr.io/angelosdimakos/ideas_logger:latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: 📥 Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: 📦 Install MkDocs Dependencies
        run: |
          pip install --no-cache-dir mkdocs-material mkdocstrings mkdocstrings-python

      - name: 🔍 Generate API Documentation
        run: |
          echo "🔎 Running unified docstring doc generator..."
          python scripts/doc_generation/docstring_doc_generation.py \
            --docstrings artifacts/docstring-summary/docstring_summary.json \
            --output docs/api
      

      - name: 📊 Generate Coverage Page
        run: |
          echo "📊 Generating coverage documentation..."
          mkdir -p docs
          python scripts/doc_generation/coverage_doc_generation.py \
            --coverage artifacts/coverage-reports/coverage.json \
            --output docs/coverage

      - name: 📈 Generate Quality Page
        run: |
          echo "📈 Generating code quality documentation..."
          mkdir -p docs
          python scripts/doc_generation/quality_doc_generation.py \
            --report artifacts/combined-report/merged_report.json \
            --output docs/quality

      - name: 🏗️ Build Documentation
        run: |
          echo "🏗️ Building MkDocs site..."
          mkdocs build

      - name: 🚀 Deploy Documentation
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./site