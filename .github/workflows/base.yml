name: Run Tests & CI Audit  (optimized)

on:
  push:
    branches: [main, master, "feature/**", "fix/**", "dev/**"]
  pull_request:
    branches: [main, master]

permissions:
  contents: read
  actions: read
  checks: write
  pull-requests: write
  statuses: write

# -------------------------------------------------------------------
# 1)  Setup job ‚Äì create / restore one cached .venv for all jobs
# -------------------------------------------------------------------
jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      venv-restored: ${{ steps.cache-venv.outputs.cache-hit }}
    steps:
      - uses: actions/checkout@v3

      - name: üêç  Set up CPython 3.11
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"        # no pip cache ‚Äì venv is faster

      - name: üì¶  Restore or create .venv
        id: cache-venv
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            venv-${{ runner.os }}-

      - name: üöÄ  Build venv (cache miss only)
        if: steps.cache-venv.outputs.cache-hit != 'true'
        run: |
          python -m venv .venv
          source .venv/bin/activate
          python -m pip install --upgrade pip wheel setuptools
          pip install -r requirements.txt
          # heavy wheels cached once
          pip install faiss-cpu pytest-xdist xvfbwrapper interrogate

      - name: üñ•Ô∏è  Install xvfb system package once
        run: sudo apt-get update && sudo apt-get install -y xvfb

# -------------------------------------------------------------------
# 2)  Lint   (runs in parallel with tests)
# -------------------------------------------------------------------
  lint:
    needs: setup
    runs-on: ubuntu-latest
    env: { ZEPHYRUS_HEADLESS: "1" }
    steps:
      - uses: actions/checkout@v3
      - uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('requirements.txt') }}

      - name: ‚úÖ Run linters
        run: |
          source .venv/bin/activate
          mkdir -p lint-reports
          black  --check scripts                       > lint-reports/black.txt        2>&1 || true
          flake8 scripts                              > lint-reports/flake8.txt       2>&1 || true
          MYPYPATH=. mypy --explicit-package-bases scripts \
                                                      > lint-reports/mypy.txt         2>&1 || true
          pydocstyle scripts                          > lint-reports/pydocstyle.txt   2>&1 || true
          interrogate -v scripts                      > lint-reports/interrogate.txt  2>&1 || true

      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: lint-reports
          path: lint-reports/

# -------------------------------------------------------------------
# 3)  Tests  (fast suite only)  + coverage + audits + docstrings
# -------------------------------------------------------------------
  test:
    needs: setup
    runs-on: ubuntu-latest
    env: { ZEPHYRUS_HEADLESS: "1" }
    steps:
      - uses: actions/checkout@v3
      - uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('requirements.txt') }}

      - name: üß™ Run fast tests  (-m "not slow", 2 workers)
        run: |
          source .venv/bin/activate
          xvfb-run -a pytest -m "not slow" -n 2 -c pytest.ini \
            --cov=scripts --cov-config=.coveragerc \
            --cov-report=xml --cov-report=html

      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: htmlcov
          path: htmlcov/

      - name: ‚òÅÔ∏è Upload to Codecov
        uses: codecov/codecov-action@v5
        continue-on-error: true
        with:
          files: ./coverage.xml
          token: ${{ secrets.CODECOV_TOKEN }}
          slug: angelosdimakos/Ideas_Logger

      # ---------- RefactorGuard audits ----------
      - name: üß† Run *full* RefactorGuard audit
        run: |
          source .venv/bin/activate
          python scripts/refactor/refactor_guard_cli.py \
            --refactored scripts --all --missing-tests \
            --json --output refactor_full_audit.json

      - name: üß† Run *diff* RefactorGuard audit
        run: |
          source .venv/bin/activate
          python scripts/refactor/refactor_guard_cli.py \
            --refactored scripts --all --git-diff --missing-tests \
            --json --output refactor_diff_audit.json

      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: refactor-audits
          path: |
            refactor_full_audit.json
            refactor_diff_audit.json

      # ---------- Doc-string summary ----------
      - name: üìã Generate doc-string summary
        run: |
          source .venv/bin/activate
          export PYTHONPATH="$PYTHONPATH:$(pwd)"
          python scripts/refactor/parsers/docstring_parser.py --json

      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: docstring-summary
          path: docstring_summary.json

# -------------------------------------------------------------------
# 4)  Report / enrichment / CI-trends
# -------------------------------------------------------------------
  report:
    needs: [lint, test]
    runs-on: ubuntu-latest
    if: always()          # still runs if prior job failed
    env: { ZEPHYRUS_HEADLESS: "1" }
    steps:
      - uses: actions/checkout@v3
      - uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('requirements.txt') }}

      - name: üì•  Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      # ---------- Enrich audits ----------
      - name: üß† Enrich audits with lint & doc-strings
        run: |
          source .venv/bin/activate
          python scripts/refactor/enrich_refactor_pkg/enrich_refactor_ci.py \
            --audit artifacts/refactor-audits/refactor_full_audit.json \
            --reports artifacts/lint-reports \
            --docstrings artifacts/docstring-summary/docstring_summary.json
          python scripts/refactor/enrich_refactor_pkg/enrich_refactor_ci.py \
            --audit artifacts/refactor-audits/refactor_diff_audit.json \
            --reports artifacts/lint-reports \
            --docstrings artifacts/docstring-summary/docstring_summary.json

      # ---------- Generate markdown summaries ----------
      - name: üìù Generate CI summaries
        run: |
          source .venv/bin/activate
          python scripts/ci_analyzer/cli.py \
            --audit artifacts/refactor-audits/refactor_full_audit.json \
            --output ci_full_summary.md
          python scripts/ci_analyzer/cli.py \
            --audit artifacts/refactor-audits/refactor_diff_audit.json \
            --output ci_diff_summary.md

      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: ci-summaries
          path: |
            ci_full_summary.md
            ci_diff_summary.md

      # ---------- Trend deltas ----------
      - name: üìä Compare trends
        run: |
          source .venv/bin/activate
          mkdir -p .ci-history
          python scripts/ci_analyzer/ci_trends.py \
            --audit artifacts/refactor-audits/refactor_full_audit.json
          python scripts/ci_analyzer/ci_trends.py \
            --audit artifacts/refactor-audits/refactor_diff_audit.json

      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: ci-trends-history
          path: .ci-history/

      # ---------- Pretty console recap ----------
      - name: üóÇÔ∏è  Audit recap
        run: |
          source .venv/bin/activate
          python - <<'PY'
          import json, pathlib, sys, textwrap
          data = json.load(open('artifacts/refactor-audits/refactor_full_audit.json', encoding='utf-8'))
          files, methods = len(data), sum(len(v.get("complexity",{})) for v in data.values())
          print(textwrap.dedent(f"""
            üìä  Full-audit recap
            ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
            üóÇ  Files analysed   : {files}
            üß†  Methods analysed : {methods}
          """).strip())
          PY

      # ---------- PR comment ----------
      - name: üí¨ Post diff summary on PR
        if: github.event_name == 'pull_request'
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          path: ci_diff_summary.md
