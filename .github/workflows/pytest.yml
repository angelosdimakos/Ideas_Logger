name: Run Tests & CI Audit

on:
  push:
    branches: [main, master, feature/**, fix/**, dev/**]
  pull_request:
    branches: [main, master]

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      venv-path: ${{ steps.out.outputs.venv-path }}
    steps:
      - uses: actions/checkout@v3

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11.8"

      - name: 💾 Cache virtualenv
        uses: actions/cache@v3
        with:
          path: .venv
          key: ${{ runner.os }}-venv-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-venv-

      - name: ⚙️ Install dependencies in venv
        id: out
        run: |
          python -m venv .venv
          .venv/bin/pip install --upgrade pip wheel setuptools
          .venv/bin/pip install -r requirements.txt
          .venv/bin/pip install faiss-cpu --only-binary=faiss-cpu
          echo "venv-path=${GITHUB_WORKSPACE}/.venv" >> "$GITHUB_OUTPUT"

  lint:
    needs: setup
    runs-on: ubuntu-latest
    env:
      ZEPHYRUS_HEADLESS: "1"
    steps:
      - uses: actions/checkout@v3

      - name: ✅ Run Linters
        run: |
          source ${{ needs.setup.outputs.venv-path }}/bin/activate
          mkdir -p lint-reports
          black --check scripts > lint-reports/black.txt 2>&1 || true
          flake8 scripts > lint-reports/flake8.txt 2>&1 || true
          MYPYPATH=. mypy --explicit-package-bases scripts > lint-reports/mypy.txt 2>&1 || true
          pydocstyle scripts > lint-reports/pydocstyle.txt 2>&1 || true
          .venv/bin/pip install interrogate
          interrogate -v scripts > lint-reports/interrogate.txt 2>&1 || true

      - name: 📄 Upload Lint Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: lint-reports
          path: lint-reports/

  test:
    needs: setup
    runs-on: ubuntu-latest
    env:
      ZEPHYRUS_HEADLESS: "1"
    steps:
      - uses: actions/checkout@v3

      - name: ✅ Run Tests
        run: |
          source ${{ needs.setup.outputs.venv-path }}/bin/activate
          .venv/bin/pip install pytest-xdist
          python -m pytest -n auto -c pytest.ini \
            --cov=scripts --cov-config=.coveragerc \
            --cov-report=xml --cov-report=html

      - name: 📈 Upload Coverage Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: htmlcov
          path: htmlcov/

      - name: ☁️ Upload to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage.xml
          fail_ci_if_error: true
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

      - name: 🧠 Run RefactorGuard Audit
        if: github.event_name == 'push'
        run: |
          source ${{ needs.setup.outputs.venv-path }}/bin/activate
          python scripts/refactor/refactor_guard_cli.py --refactored scripts --all --missing-tests --json

      - name: 🔍 Git Diff Audit (PRs only)
        if: github.event_name == 'pull_request'
        run: |
          source ${{ needs.setup.outputs.venv-path }}/bin/activate
          python scripts/refactor/refactor_guard_cli.py --refactored scripts --all --git-diff --missing-tests --json

      - name: 📄 Upload Refactor Audit
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: refactor-audit
          path: refactor_audit.json

  report:
    needs: [lint, test]
    runs-on: ubuntu-latest
    env:
      ZEPHYRUS_HEADLESS: "1"
    steps:
      - uses: actions/checkout@v3

      - name: 📥 Download Lint Reports
        uses: actions/download-artifact@v4
        with:
          name: lint-reports
          path: ./lint-reports

      - name: 📥 Download Refactor Audit
        uses: actions/download-artifact@v4
        with:
          name: refactor-audit
          path: .

      - name: 📝 Generate CI Insight Report
        run: |
          python scripts/ci_analyzer/cli.py

      - name: 📄 Upload CI Summary Markdown
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ci-summary
          path: ci_summary.md

      - name: 📊 Compare CI Trends
        run: |
          python scripts/ci_analyzer/ci_trends.py

      - name: 🗞 Audit Summary Recap
        run: |
          python -c "import json; f=open('refactor_audit.json', encoding='utf-8-sig'); data=json.load(f); method_count = sum(len(file.get('complexity', {})) for file in data.values()); file_count = len(data); print(f'\\n📊 Summary:\\n🧠 Methods analyzed: {method_count}\\n🔧 Files analyzed: {file_count}')"
