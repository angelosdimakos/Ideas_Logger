name: Run Tests & CI Audit

on:
  push:
    branches:
      - main
      - master
      - feature/**
      - fix/**
      - dev/**
  pull_request:
    branches:
      - main
      - master

jobs:
  lint:
    runs-on: ubuntu-latest
    env:
      ZEPHYRUS_HEADLESS: "1"
    steps:
      - name: 📎 Checkout full history
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11.8"

      - name: 💾 Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: 📆 Install Dependencies
        run: |
          pip install -r requirements.txt
          python -m pip install --upgrade pip wheel setuptools
          pip install faiss-cpu --only-binary=faiss-cpu
          

      - name: 🧹 Lint and Static Analysis
        run: |
          mkdir -p lint-reports
          black --check scripts > lint-reports/black.txt 2>&1 || true
          flake8 scripts > lint-reports/flake8.txt  2>&1 || true
          MYPYPATH=. mypy --explicit-package-bases scripts > lint-reports/mypy.txt  2>&1 || true

      - name: 📚 Docstring Linting
        run: |
          pydocstyle scripts > lint-reports/pydocstyle.txt 2>&1 || true

      - name: 🧠 Doc Coverage Analysis
        run: |
          pip install interrogate
          interrogate -v scripts > lint-reports/interrogate.txt 2>&1 || true

      - name: 📄 Upload Lint Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: lint-reports
          path: lint-reports/

  test:
    needs: lint
    runs-on: ubuntu-latest
    env:
      ZEPHYRUS_HEADLESS: "1"
    steps:
      - name: 📎 Checkout full history
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11.8"

      - name: 💾 Cache dependencies & pytest cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pip
            .pytest_cache
          key: ${{ runner.os }}-deps-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-deps-

      - name: 📆 Install Dependencies
        run: |
          pip install -r requirements.txt
          python -m pip install --upgrade pip wheel setuptools
          pip install faiss-cpu --only-binary=faiss-cpu
          pip install pytest-xdist

      - name: ✅ Run Unit + Integration Tests
        run: |
          python -m pytest -n auto -c pytest.ini \
            --cov=scripts --cov-config=.coveragerc \
            --cov-report=xml --cov-report=html

      - name: 📄 Check for Coverage Report
        run: |
          if [ ! -f coverage.xml ]; then
            echo "❌ coverage.xml not found!"
            exit 1
          else
            echo "✅ Found coverage.xml"
          fi

      - name: 📈 Upload HTML Coverage Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: htmlcov
          path: htmlcov/

      - name: ☁️ Upload to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage.xml
          fail_ci_if_error: true
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

      - name: 🧠 Run RefactorGuard Audit
        if: github.event_name == 'push'
        run: |
          python scripts/refactor/refactor_guard_cli.py \
            --refactored scripts \
            --all \
            --missing-tests \
            --json

      - name: 🔍 Git Diff Audit (PRs only)
        if: github.event_name == 'pull_request'
        run: |
          python scripts/refactor/refactor_guard_cli.py \
            --refactored scripts \
            --all \
            --git-diff \
            --missing-tests \
            --json
          
      - name: 📥 Download Lint Reports
        uses: actions/download-artifact@v4
        with:
          name: lint-reports
          path: .


      - name: 📋 Enrich Refactor Audit with Quality Data
        run: |
          python - <<'PYCODE'
          from scripts.refactor.quality_checker import merge_into_refactor_guard
          merge_into_refactor_guard("refactor_audit.json")
          PYCODE

      - name: 🚨 Show Complexity Summary
        run: |
          python scripts/utils/complexity_summary.py refactor_audit.json

      - name: 📄 Upload Refactor Audit
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: refactor-audit
          path: refactor_audit.json

      - name: 📝 Generate CI Insight Report
        run: |
          python scripts/ci_analyzer/cli.py

      - name: 📄 Upload CI Summary Markdown
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ci-summary
          path: ci_summary.md

      - name: 📊 Compare CI Trends
        run: |
          python scripts/ci_analyzer/ci_trends.py


      - name: 🗞 Audit Summary Recap
        run: |
          python -c "import json; f=open('refactor_audit.json', encoding='utf-8-sig'); data=json.load(f); method_count = sum(len(file.get('complexity', {})) for file in data.values()); file_count = len(data); print(f'\n📊 Summary:\n🧠 Methods analyzed: {method_count}\n🔧 Files analyzed: {file_count}')"
