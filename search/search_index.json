{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Ideas Logger Documentation","text":"<p>Welcome to the Ideas Logger project documentation. This site contains automatically generated documentation from the project's source code, along with information about code quality, test coverage, and more.</p>"},{"location":"#project-overview","title":"Project Overview","text":"<p>Ideas Logger is a tool for capturing, organizing, and tracking ideas and thoughts in a structured way. The project includes various utilities for code quality management, linting, and refactoring.</p>"},{"location":"#documentation-structure","title":"Documentation Structure","text":"<ul> <li>API Documentation: Automatically generated from docstrings in the source code</li> <li>Test Coverage: Information about test coverage across the codebase</li> <li>Code Quality: Linting reports and code quality metrics</li> </ul>"},{"location":"#automatic-documentation","title":"Automatic Documentation","text":"<p>This documentation is automatically generated by the CI pipeline using:</p> <ol> <li>DocstringParser: Extracts docstrings from Python files</li> <li>MkDocs: Generates this documentation website</li> <li>GitHub Actions: Builds and deploys the documentation</li> </ol>"},{"location":"#quick-links","title":"Quick Links","text":"<ul> <li>GitHub Repository</li> <li>API Documentation</li> <li>Code Quality</li> </ul>"},{"location":"api/","title":"Docstring Report Index","text":"<ul> <li>./</li> <li>dashboard/</li> <li>scripts/</li> <li>scripts/ai/</li> <li>scripts/ci/analyzer/</li> <li>scripts/config/</li> <li>scripts/core/</li> <li>scripts/doc/generation/</li> <li>scripts/gui/</li> <li>scripts/gui/base/</li> <li>scripts/gui/panels/</li> <li>scripts/gui/tabs/</li> <li>scripts/indexers/</li> <li>scripts/kg/</li> <li>scripts/kg/modules/</li> <li>scripts/refactor/</li> <li>scripts/refactor/complexity/</li> <li>scripts/refactor/compressor/</li> <li>scripts/refactor/lint/report/pkg/</li> <li>scripts/refactor/lint/report/pkg/plugins/</li> <li>scripts/refactor/parsers/</li> <li>scripts/unified/code/assistant/</li> <li>scripts/utils/</li> </ul>"},{"location":"api/dashboard/","title":"<code>dashboard</code>","text":""},{"location":"api/dashboard/#dashboard__init__","title":"<code>dashboard.__init__</code>","text":"<p>\ud83e\udde0 Docstring Summary</p> Section Content Description No module description available. Args \u2014 Returns \u2014"},{"location":"api/dashboard/#dashboardai_integration","title":"<code>dashboard.ai_integration</code>","text":"<p>\ud83e\udde0 Docstring Summary</p> Section Content Description No module description available. Args \u2014 Returns \u2014"},{"location":"api/dashboard/#classes","title":"\ud83d\udce6 Classes","text":""},{"location":"api/dashboard/#aiintegration","title":"<code>AIIntegration</code>","text":"<p>No description available. Parameters: ['self: Any', 'config: Any', 'summarizer: Any'] Returns: None</p>"},{"location":"api/dashboard/#functions","title":"\ud83d\udee0\ufe0f Functions","text":""},{"location":"api/dashboard/#__init__","title":"<code>__init__</code>","text":"<p>Initializes the AIIntegration instance with configuration and summarizer components. Parameters: ['self: Any', 'config: Any', 'summarizer: Any'] Returns: Any</p>"},{"location":"api/dashboard/#generate_audit_summary","title":"<code>generate_audit_summary</code>","text":"<p>Generates an AI-driven audit summary based on provided metrics context. Combines a persona-enriched audit summary prompt with the given metrics context and returns a summarized audit report as a string. Parameters: ['self: Any', 'metrics_context: str'] Returns: str</p>"},{"location":"api/dashboard/#generate_refactor_advice","title":"<code>generate_refactor_advice</code>","text":"<p>Generates AI-driven refactoring advice based on analysis of merged code data. Analyzes the provided merged data to identify the top offenders for refactoring, constructs a contextual prompt, and returns a summary suggestion along with the list of top offenders. Parameters: ['self: Any', 'merged_data: Any', 'limit: int'] Returns: Any</p>"},{"location":"api/dashboard/#generate_strategic_recommendations","title":"<code>generate_strategic_recommendations</code>","text":"<p>Generates strategic recommendations based on merged code analysis data. Writes the merged data to a temporary JSON file and invokes a CLI assistant in strategic mode with the specified limit and persona. Returns the output generated by the CLI assistant. Parameters: ['self: Any', 'merged_data: Any', 'limit: int'] Returns: Any</p>"},{"location":"api/dashboard/#chat_general","title":"<code>chat_general</code>","text":"<p>Generates an AI-driven summary response to a user query based on analyzed code report data. Parameters: ['self: Any', 'user_query: Any', 'merged_data: Any'] Returns: Any</p>"},{"location":"api/dashboard/#chat_code","title":"<code>chat_code</code>","text":"<p>Generates an AI-driven code analysis summary for a specific file based on user input. Builds a detailed context using the file's complexity and linting information, issue locations, placeholder module summaries, and AI-generated refactor recommendations. Incorporates the user's query and persona to produce a comprehensive code analysis summary for the file. Parameters: ['self: Any', 'file_path: Any', 'complexity_info: Any', 'lint_info: Any', 'user_query: Any'] Returns: Any</p>"},{"location":"api/dashboard/#chat_doc","title":"<code>chat_doc</code>","text":"<p>Generates a summary of a module's documentation using the provided functions list. Parameters: ['self: Any', 'module_path: Any', 'funcs: Any'] Returns: Any</p>"},{"location":"api/dashboard/#dashboardapp","title":"<code>dashboard.app</code>","text":"<p>\ud83e\udde0 Docstring Summary</p> Section Content Description No module description available. Args \u2014 Returns \u2014"},{"location":"api/dashboard/#functions_1","title":"\ud83d\udee0\ufe0f Functions","text":""},{"location":"api/dashboard/#init_artifacts_dir","title":"<code>init_artifacts_dir</code>","text":"<p>Returns the directory to use for artifacts, preferring the given default if it exists. If the specified default directory does not exist, returns the current directory instead. Parameters: ['default_dir: str'] Returns: str</p>"},{"location":"api/dashboard/#dashboarddata_loader","title":"<code>dashboard.data_loader</code>","text":"<p>\ud83e\udde0 Docstring Summary</p> Section Content Description No module description available. Args \u2014 Returns \u2014"},{"location":"api/dashboard/#functions_2","title":"\ud83d\udee0\ufe0f Functions","text":""},{"location":"api/dashboard/#is_excluded","title":"<code>is_excluded</code>","text":"<p>Determines whether a file path should be excluded based on predefined patterns. Parameters: ['path: str'] Returns: bool</p>"},{"location":"api/dashboard/#load_artifact","title":"<code>load_artifact</code>","text":"<p>Loads a JSON artifact from the specified path, supporting compressed and specialized formats. Attempts to load a coverage-related JSON artifact from the given path, handling <code>.comp.json.gz</code>, <code>.comp.json</code>, and plain <code>.json</code> variants. Applies specialized decompression for known report formats and filters out top-level keys matching exclusion criteria. Parameters: ['path: str'] Returns: Dict[str, Any]</p>"},{"location":"api/dashboard/#weighted_coverage","title":"<code>weighted_coverage</code>","text":"<p>Calculates the lines-of-code weighted average coverage from function coverage data. Parameters: ['func_dict: Dict[str, Any]'] Returns: float</p>"},{"location":"api/dashboard/#dashboardmetrics","title":"<code>dashboard.metrics</code>","text":"<p>\ud83e\udde0 Docstring Summary</p> Section Content Description Module: scripts/dashboard/metrics.py Extracts all data-transformation and metrics logic from the Streamlit app. Args \u2014 Returns \u2014"},{"location":"api/dashboard/#functions_3","title":"\ud83d\udee0\ufe0f Functions","text":""},{"location":"api/dashboard/#compute_executive_summary","title":"<code>compute_executive_summary</code>","text":"<p>Generates high-level summary metrics for the dashboard's Executive Summary. Aggregates unique test counts, average strictness and severity scores, number of production files, overall coverage percentage, and percentage of missing documentation from the provided data sources. Parameters: ['merged_data: Dict[str, Any]', 'strictness_data: Dict[str, Any]'] Returns: Dict[str, Any]</p>"},{"location":"api/dashboard/#get_low_coverage_modules","title":"<code>get_low_coverage_modules</code>","text":"<p>Returns the modules with the lowest coverage percentages. Iterates over modules in the strictness data, excluding filtered files, and collects their coverage values. Returns a list of (module name, coverage) tuples for the modules with the lowest coverage, sorted in ascending order. Parameters: ['strictness_data: Dict[str, Any]', 'top_n: int'] Returns: List[Tuple[str, float]]</p>"},{"location":"api/dashboard/#coverage_by_module","title":"<code>coverage_by_module</code>","text":"<p>Calculates line-of-code weighted coverage for each module and returns the modules with the lowest coverage. Parameters: ['merged_data: Dict[str, Any]', 'top_n: int'] Returns: List[Tuple[str, float]]</p>"},{"location":"api/dashboard/#compute_severity","title":"<code>compute_severity</code>","text":"<p>Calculates a severity score for a file based on linting errors, code complexity, and coverage. The severity score combines the number of mypy errors, pydocstyle lint issues, average function complexity, and coverage ratio using weighted factors. Returns a dictionary summarizing the file's name, path, error counts, average complexity, average coverage percentage, and computed severity score. Parameters: ['file_path: str', 'content: Dict[str, Any]'] Returns: Dict[str, Any]</p>"},{"location":"api/dashboard/#compute_severity_df","title":"<code>compute_severity_df</code>","text":"<p>Builds a DataFrame summarizing severity metrics for all files. Applies the provided severity computation function to each file in the merged data and constructs a DataFrame from the results, sorted by severity score in descending order with the index reset. Parameters: ['merged_data: Dict[str, Any]', 'compute_severity_fn: Any'] Returns: pd.DataFrame</p>"},{"location":"api/dashboard/#build_prod_to_tests_df","title":"<code>build_prod_to_tests_df</code>","text":"<p>Creates a DataFrame mapping each production module to its unique covering tests and related metrics. Deduplicates tests by name within each module, retaining the highest severity and corresponding strictness for each test. Calculates the average strictness and severity across unique tests per module, and lists the names of all covering tests. The resulting DataFrame includes the production module name, test count, average strictness, average severity, and a comma-separated list of test names, sorted by test count in descending order. Parameters: ['strictness_data: Dict[str, Any]'] Returns: pd.DataFrame</p>"},{"location":"api/dashboard/#severity_distribution","title":"<code>severity_distribution</code>","text":"<p>Categorizes tests into Low, Medium, and High severity buckets based on their highest observed severity. Deduplicates tests globally by test name, retaining only the highest severity for each test, and returns a count of tests in each severity category. Parameters: ['strictness_data: Dict[str, Any]'] Returns: Dict[str, int]</p>"},{"location":"api/scripts/","title":"<code>scripts</code>","text":""},{"location":"api/scripts/#scripts__init__","title":"<code>scripts.__init__</code>","text":"<p>\ud83e\udde0 Docstring Summary</p> Section Content Description No module description available. Args \u2014 Returns \u2014"},{"location":"api/scripts/#scriptsdev_commit","title":"<code>scripts.dev_commit</code>","text":"<p>\ud83e\udde0 Docstring Summary</p> Section Content Description No module description available. Args \u2014 Returns \u2014"},{"location":"api/scripts/#functions","title":"\ud83d\udee0\ufe0f Functions","text":""},{"location":"api/scripts/#get_current_branch","title":"<code>get_current_branch</code>","text":"<p>Returns the name of the current Git branch. Returns: str</p>"},{"location":"api/scripts/#get_modified_files","title":"<code>get_modified_files</code>","text":"<p>Returns a list of files modified (but not yet committed) in the current Git working directory. Returns: list[str]</p>"},{"location":"api/scripts/#is_valid_branch_name","title":"<code>is_valid_branch_name</code>","text":"<p>Checks if the provided branch name is valid according to Git naming conventions. Parameters: ['name: str'] Returns: bool</p>"},{"location":"api/scripts/#generate_suggested_branch_name","title":"<code>generate_suggested_branch_name</code>","text":"<p>Generates a suggested branch name based on modified files and the current date. Returns: str</p>"},{"location":"api/scripts/#switch_to_new_branch","title":"<code>switch_to_new_branch</code>","text":"<p>Prompts the user to create and switch to a new Git branch. Suggests a branch name based on modified files and validates user input. Exits the script if the branch name is invalid or if Git fails to create or push the branch. Returns: None</p>"},{"location":"api/scripts/#scriptsmain","title":"<code>scripts.main</code>","text":"<p>\ud83e\udde0 Docstring Summary</p> Section Content Description main.py This module provides the entrypoint for the Zephyrus Logger application. It initializes the logging system, loads the application configuration, and sets up the GUI or CLI depending on the mode specified in the configuration. Key features include: - Logging setup - Config loading - GUI or CLI setup - Controller and GUI instance initialization This is the main entrypoint for the Zephyrus Logger application. Args \u2014 Returns \u2014"},{"location":"api/scripts/#functions_1","title":"\ud83d\udee0\ufe0f Functions","text":""},{"location":"api/scripts/#bootstrap","title":"<code>bootstrap</code>","text":"<p>Bootstraps the Zephyrus Logger application. Parameters: ['start_gui: bool'] Returns: tuple[GUIController, ZephyrusLoggerGUI | None]</p>"},{"location":"api/scripts/#scriptspaths","title":"<code>scripts.paths</code>","text":"<p>\ud83e\udde0 Docstring Summary</p> Section Content Description No module description available. Args \u2014 Returns \u2014"},{"location":"api/scripts/#classes","title":"\ud83d\udce6 Classes","text":""},{"location":"api/scripts/#zephyruspaths","title":"<code>ZephyrusPaths</code>","text":"<p>Dataclass for managing and resolving all Zephyrus project file and directory paths. Provides methods to construct absolute paths for logs, exports, configuration, and vector store files, with support for test mode path overrides based on the loaded configuration. Returns: None</p>"},{"location":"api/scripts/#functions_2","title":"\ud83d\udee0\ufe0f Functions","text":""},{"location":"api/scripts/#_resolve_path","title":"<code>_resolve_path</code>","text":"<p>Resolve an absolute Path for a given config key, falling back to the provided default if the key is missing. Parameters: ['config: Any', 'key: Any', 'default: Any'] Returns: Path</p>"},{"location":"api/scripts/#from_config","title":"<code>from_config</code>","text":"<p>Constructs a ZephyrusPaths instance by resolving all required file and directory paths from the loaded configuration. Automatically applies test mode path overrides if enabled. Parameters: ['script_dir: Path'] Returns: 'ZephyrusPaths'</p>"},{"location":"api/scripts_ai/","title":"<code>scripts/ai</code>","text":""},{"location":"api/scripts_ai/#scriptsai__init__","title":"<code>scripts.ai.__init__</code>","text":"<p>\ud83e\udde0 Docstring Summary</p> Section Content Description The <code>ai</code> module provides AI-powered summarization utilities for text entries using large language models (LLMs). Core features include: - Generating concise summaries for individual or multiple text entries. - Supporting subcategory-specific prompts for context-aware summarization. - Configurable model selection and prompt templates, loaded at initialization. - Fallback to the Ollama chat API for summarization if the primary LLM fails. - Designed for seamless integration into workflows requiring automated, high-quality text summarization. This module enables flexible and robust summarization capabilities for downstream applications such as log analysis, reporting, and intelligent querying. Args \u2014 Returns \u2014"},{"location":"api/scripts_ai/#scriptsaiai_summarizer","title":"<code>scripts.ai.ai_summarizer</code>","text":"<p>\ud83e\udde0 Docstring Summary</p> Section Content Description This module provides the AISummarizer class for generating summaries of text entries using a configurable large language model (LLM). It supports both single-entry and bulk summarization, with the ability to use subcategory-specific prompts loaded from configuration. If the primary summarization method fails, the module falls back to the Ollama chat API to attempt summarization. Logging is integrated throughout for monitoring and debugging, and configuration is loaded at initialization for flexible model and prompt management. Typical use cases include automated summarization of logs, notes, or other textual data in workflows requiring concise, context-aware summaries. Args \u2014 Returns \u2014"},{"location":"api/scripts_ai/#classes","title":"\ud83d\udce6 Classes","text":""},{"location":"api/scripts_ai/#aisummarizer","title":"<code>AISummarizer</code>","text":"<p>AISummarizer provides methods to generate summaries for single or multiple text entries using a configurable LLM model and subcategory-specific prompts. It supports fallback to the Ollama chat API if primary summarization fails and loads configuration settings at initialization. Parameters: ['self: Any'] Returns: None</p>"},{"location":"api/scripts_ai/#functions","title":"\ud83d\udee0\ufe0f Functions","text":""},{"location":"api/scripts_ai/#__init__","title":"<code>__init__</code>","text":"<p>Initializes the AISummarizer with configuration settings, LLM model selection, and subcategory-specific prompts. Parameters: ['self: Any'] Returns: None</p>"},{"location":"api/scripts_ai/#_fallback_summary","title":"<code>_fallback_summary</code>","text":"<p>Attempts to generate a summary using the Ollama chat API as a fallback. Sends the provided prompt to the chat model and returns the generated summary, or an error message if the fallback fails. Parameters: ['self: Any', 'full_prompt: str'] Returns: str</p>"},{"location":"api/scripts_ai/#summarize_entry","title":"<code>summarize_entry</code>","text":"<p>Generates a summary for a single text entry using the configured LLM model and an optional subcategory-specific prompt. Parameters: ['self: Any', 'entry_text: str', 'subcategory: Optional[str]'] Returns: str</p>"},{"location":"api/scripts_ai/#summarize_entries_bulk","title":"<code>summarize_entries_bulk</code>","text":"<p>Generates a summary for multiple text entries using the configured LLM model and subcategory-specific prompts. If the input list is empty, returns a warning message. Falls back to an alternative summarization method if the primary LLM call fails or returns an invalid response. Parameters: ['self: Any', 'entries: List[str]', 'subcategory: Optional[str]'] Returns: str</p>"},{"location":"api/scripts_ai/#scriptsaillm_optimization","title":"<code>scripts.ai.llm_optimization</code>","text":"<p>\ud83e\udde0 Docstring Summary</p> Section Content Description Utility helpers for summarising code\u2011quality artefacts and building LLM prompts. \ud83d\udd27 Patch v2 \u2013 restores backwards\u2011compat fields and fixes helper signature regressions that broke the existing unit\u2011test suite. *   <code>summarize_file_data_for_llm</code> again returns the exact keys <code>{\"complexity\", \"coverage\"}</code> expected by old tests. *   Added thin wrapper <code>_categorise_issues</code> that accepts the legacy <code>(entries, condition, message, cap)</code> signature and is used by <code>build_strategic_recommendations_prompt</code>. *   Internal refactor helpers renamed with leading underscores but public function signatures stay unchanged. *   Added type\u2011hints + docstrings for the new helper. Args \u2014 Returns \u2014"},{"location":"api/scripts_ai/#functions_1","title":"\ud83d\udee0\ufe0f Functions","text":""},{"location":"api/scripts_ai/#_mean","title":"<code>_mean</code>","text":"<p>Calculates the mean of a list of floats. Returns 0.0 if the list is empty. Parameters: ['values: List[float]'] Returns: float</p>"},{"location":"api/scripts_ai/#_categorise_issues","title":"<code>_categorise_issues</code>","text":"<p>Returns a summary of how many files fall into each major code quality issue category. The summary includes counts of files with more than 5 type errors, average complexity greater than 7, and average coverage below 60%. Parameters: ['offenders: List[Dict]'] Returns: str</p>"},{"location":"api/scripts_ai/#summarize_file_data_for_llm","title":"<code>summarize_file_data_for_llm</code>","text":"<p>Generates a summary dictionary of code quality metrics for a single file. Extracts and computes average complexity, coverage percentage, MyPy error count, and docstring completeness from nested file data. Returns a dictionary with legacy-compatible keys, including the file name, full path, rounded metrics, docstring ratio, and a list of up to three top issues. Parameters: ['file_data: dict', 'file_path: str'] Returns: dict[str, Any]</p>"},{"location":"api/scripts_ai/#extract_top_issues","title":"<code>extract_top_issues</code>","text":"<p>Extracts up to a specified number of top code quality issues from file data. The function prioritizes the first MyPy error, the first function with high complexity (complexity &gt; 10), and the first function with low coverage (coverage &lt; 50%), returning formatted issue descriptions. Parameters: ['file_data: dict', 'max_issues: int'] Returns: List[str]</p>"},{"location":"api/scripts_ai/#build_refactor_prompt","title":"<code>build_refactor_prompt</code>","text":"<p>Builds an LLM prompt requesting strategic refactoring suggestions for a list of offender files. The prompt summarizes up to <code>limit</code> files with significant code quality issues, applies a persona and template from the configuration, and includes both a summary and detailed offender information. The resulting prompt instructs the LLM to focus on identifying refactoring patterns rather than file-specific advice. Parameters: ['offenders: List[Tuple[str, float, list, int, float, float]]', 'config: Any', 'verbose: bool', 'limit: int'] Returns: str</p>"},{"location":"api/scripts_ai/#build_strategic_recommendations_prompt","title":"<code>build_strategic_recommendations_prompt</code>","text":"<p>Constructs a detailed prompt for an LLM to generate strategic, actionable recommendations for improving code quality and test coverage based on severity data and summary metrics. The prompt summarizes the distribution of key issues (high complexity, low coverage, type errors), highlights problematic modules with multiple severe files, and lists the top offenders. It instructs the LLM to provide specific, non-generic recommendations tied directly to the identified files and modules, prioritizing complexity, coverage, type errors, and documentation. Parameters: ['severity_data: List[Dict[str, Any]]', 'summary_metrics: Union[Dict[str, Any], str]', 'limit: int'] Returns: str</p>"},{"location":"api/scripts_ai/#compute_severity","title":"<code>compute_severity</code>","text":"<p>Calculates a weighted severity score and summary metrics for a single module. The severity score combines counts of MyPy errors, pydocstyle lint issues, average function complexity, and lack of test coverage using fixed weights. Returns a dictionary with the file name, full path, error and issue counts, average complexity, average coverage percentage, and the computed severity score. Parameters: ['file_path: str', 'content: Dict[str, Any]'] Returns: Dict[str, Any]</p>"},{"location":"api/scripts_ai/#_summarise_offenders","title":"<code>_summarise_offenders</code>","text":"<p>Aggregates a list of offender files into a summary of key code quality issues. Counts and lists up to five example files for each of the following categories: high complexity (complexity &gt; 8), low coverage (coverage &lt; 50%), and many type errors (more than 5 type errors). Returns a formatted multiline string summarizing the counts and sample file names per category. Parameters: ['offenders: List[Tuple[str, float, list, int, float, float]]'] Returns: str</p>"},{"location":"api/scripts_ai/#_fmt","title":"<code>_fmt</code>","text":"<p>Formats a list of strings as a comma-separated string, truncating with '...' if more than five items. Parameters: ['lst: List[str]'] Returns: str</p>"},{"location":"api/scripts_ai/#_format_offender_block","title":"<code>_format_offender_block</code>","text":"<p>Formats offender file details into a summary block for inclusion in LLM prompts. If verbose is True, returns a detailed multiline summary for each file including severity score, error counts, complexity, coverage, and sample errors. Otherwise, returns a concise single-line summary per file. Parameters: ['offenders: List[Tuple[str, float, list, int, float, float]]', 'verbose: bool'] Returns: str</p>"},{"location":"api/scripts_ai/#scriptsaillm_refactor_advisor","title":"<code>scripts.ai.llm_refactor_advisor</code>","text":"<p>\ud83e\udde0 Docstring Summary</p> Section Content Description This module provides functionality to load audit reports and build refactor prompts for an AI assistant. It includes functions to load JSON audit data, extract top offenders based on various metrics, and generate prompts for AI assistance. Args \u2014 Returns \u2014"},{"location":"api/scripts_ai/#functions_2","title":"\ud83d\udee0\ufe0f Functions","text":""},{"location":"api/scripts_ai/#load_audit","title":"<code>load_audit</code>","text":"<p>Loads and returns audit data from a JSON file at the given path. Parameters: ['path: str'] Returns: dict</p>"},{"location":"api/scripts_ai/#extract_top_offenders","title":"<code>extract_top_offenders</code>","text":"<p>Identifies and ranks the top offending files in an audit report based on code quality metrics. Processes the report data to compute a composite score for each file using MyPy errors, linting issues, average code complexity, and average test coverage. Applies special weighting for \"app/views.py\" to prioritize its score. Returns a list of the top N files sorted by descending score, with each entry containing the file path, score, error and lint counts, average complexity, and average coverage. Parameters: ['report_data: dict', 'top_n: int'] Returns: list</p>"},{"location":"api/scripts_ai/#build_refactor_prompt_1","title":"<code>build_refactor_prompt</code>","text":"<p>Constructs a prompt for an AI assistant summarizing top risky files for refactoring. Generates a ranked list of offender files with their associated metrics and formats it into a prompt using a template and persona from the configuration. Optionally limits the number of offenders included and adds detailed file paths if verbose is True. Parameters: ['offenders: list', 'config: Any', 'subcategory: str', 'verbose: bool', 'limit: int'] Returns: str</p>"},{"location":"api/scripts_ai/#scriptsaillm_router","title":"<code>scripts.ai.llm_router</code>","text":"<p>\ud83e\udde0 Docstring Summary</p> Section Content Description This module provides functionality to retrieve prompt templates and apply personas to prompts for an AI assistant. It includes functions to get prompt templates based on subcategories and modify prompts according to specified personas. Args \u2014 Returns \u2014"},{"location":"api/scripts_ai/#functions_3","title":"\ud83d\udee0\ufe0f Functions","text":""},{"location":"api/scripts_ai/#get_prompt_template","title":"<code>get_prompt_template</code>","text":"<p>Retrieves the prompt template for a specified subcategory from the configuration. If the subcategory is not found, returns the default prompt template. Parameters: ['subcategory: str', 'config: Any'] Returns: str</p>"},{"location":"api/scripts_ai/#apply_persona","title":"<code>apply_persona</code>","text":"<p>Appends persona-specific instructions to a prompt to tailor the AI's response style. If the persona is \"reviewer\", \"mentor\", or \"planner\", a corresponding instruction is added to the prompt. If the persona is \"default\" or unrecognized, the prompt is returned unchanged. Parameters: ['prompt: str', 'persona: str'] Returns: str</p>"},{"location":"api/scripts_ai/#scriptsaimodule_docstring_summarizer","title":"<code>scripts.ai.module_docstring_summarizer</code>","text":"<p>\ud83e\udde0 Docstring Summary</p> Section Content Description This module provides functionality to load audit reports and build refactor prompts for an AI assistant. It includes functions to load JSON audit data, extract top offenders based on various metrics, and generate prompts for AI assistance. Args \u2014 Returns \u2014"},{"location":"api/scripts_ai/#functions_4","title":"\ud83d\udee0\ufe0f Functions","text":""},{"location":"api/scripts_ai/#summarize_module","title":"<code>summarize_module</code>","text":"<p>Generates a concise summary of a Python module's functionality based on its docstrings. Formats the provided docstring entries into a structured prompt, applies persona adjustments, and uses the given AI summarizer to produce a human-readable summary. Returns a fixed message if no docstrings are available. Parameters: ['file_path: str', 'doc_entries: list', 'summarizer: AISummarizer', 'config: ConfigManager'] Returns: str</p>"},{"location":"api/scripts_ai/#run","title":"<code>run</code>","text":"<p>Executes the module docstring summarization workflow for a given JSON audit report. Processes each file in the report, optionally filtering by file path substring, and generates a summary of its documented functions using an AI summarizer. Outputs the results either to a Markdown file or to standard output. Parameters: ['input_path: str', 'output_path: str | None', 'path_filter: str | None'] Returns: None</p>"},{"location":"api/scripts_ai/#scriptsaimodule_idea_generator","title":"<code>scripts.ai.module_idea_generator</code>","text":"<p>\ud83e\udde0 Docstring Summary</p> Section Content Description No module description available. Args \u2014 Returns \u2014"},{"location":"api/scripts_ai/#functions_5","title":"\ud83d\udee0\ufe0f Functions","text":""},{"location":"api/scripts_ai/#suggest_new_modules","title":"<code>suggest_new_modules</code>","text":"<p>Generates new module or package suggestions and corresponding Python prototype code based on an architecture report. Reads a JSON report of documented functions, filters them by an optional path substring, and summarizes their docstrings. Uses an AI summarizer to propose new modules/packages with justifications and then generates Python code stubs for the suggested modules, adhering to strict naming conventions. Parameters: ['artifact_path: str', 'config: ConfigManager', 'subcategory: str', 'path_filter: str | None'] Returns: tuple[str, str]</p>"},{"location":"api/scripts_ai/#generate_test_stubs","title":"<code>generate_test_stubs</code>","text":"<p>Generates pytest unit test stubs for the provided module prototype code. Parameters: ['prototype_code: str', 'config: ConfigManager'] Returns: str</p>"},{"location":"api/scripts_ai/#extract_filenames_from_code","title":"<code>extract_filenames_from_code</code>","text":"<p>Extracts Python filenames from code by searching for '# Filename: ' comments. Parameters: ['code: str'] Returns: list[str]"},{"location":"api/scripts_ai/#export_prototypes_to_files","title":"<code>export_prototypes_to_files</code>","text":"<p>Writes generated code or test stubs to files based on embedded '# Filename' comments. Scans code blocks for filename annotations, adjusts names for test files if needed, adds required imports, and writes each code block to the appropriate file within the specified output directory. Parameters: ['prototype_code: str', 'output_dir: str', 'suggestions: str', 'is_test: bool'] Returns: Any</p>"},{"location":"api/scripts_ai/#validate_test_coverage","title":"<code>validate_test_coverage</code>","text":"<p>Checks that all public functions and methods in the given module directory have corresponding pytest tests in the specified test directory. Parameters: ['module_dir: str', 'test_dir: str'] Returns: list[str]</p>"},{"location":"api/scripts_ci_analyzer/","title":"<code>scripts/ci_analyzer</code>","text":""},{"location":"api/scripts_ci_analyzer/#scriptsci_analyzer__init__","title":"<code>scripts.ci_analyzer.__init__</code>","text":"<p>\ud83e\udde0 Docstring Summary</p> Section Content Description No module description available. Args \u2014 Returns \u2014"},{"location":"api/scripts_ci_analyzer/#scriptsci_analyzerdrilldown","title":"<code>scripts.ci_analyzer.drilldown</code>","text":"<p>\ud83e\udde0 Docstring Summary</p> Section Content Description This module provides functionality to generate detailed Markdown reports for top offenders in code quality analysis. It includes functions to create drilldowns that summarize linting errors, complexity, coverage, and function descriptions for the top offenders. Args \u2014 Returns \u2014"},{"location":"api/scripts_ci_analyzer/#functions","title":"\ud83d\udee0\ufe0f Functions","text":""},{"location":"api/scripts_ci_analyzer/#generate_top_offender_drilldowns","title":"<code>generate_top_offender_drilldowns</code>","text":"<p>Generates a Markdown report with expandable drilldowns for the top N files with the most severe code quality issues. For each top offender file, includes sections for MyPy errors, Pydocstyle issues, functions with high complexity or low coverage, and function docstring summaries if available. Parameters: ['severity_df: Any', 'report_data: dict', 'top_n: int'] Returns: str</p>"},{"location":"api/scripts_ci_analyzer/#scriptsci_analyzermetrics_summary","title":"<code>scripts.ci_analyzer.metrics_summary</code>","text":"<p>\ud83e\udde0 Docstring Summary</p> Section Content Description This module provides functionality to generate summary metrics from code quality reports. It includes functions to analyze report data and summarize key metrics related to methods, tests, complexity, docstrings, and linter issues. Args \u2014 Returns \u2014"},{"location":"api/scripts_ci_analyzer/#functions_1","title":"\ud83d\udee0\ufe0f Functions","text":""},{"location":"api/scripts_ci_analyzer/#generate_metrics_summary","title":"<code>generate_metrics_summary</code>","text":"<p>Generates a Markdown summary of key code quality metrics from report data. Aggregates counts of total methods audited, methods missing tests, high-complexity methods (complexity \u2265 10), methods missing docstrings, and linter issues from a nested report data dictionary. Returns a Markdown-formatted string summarizing these metrics. Parameters: ['report_data: dict'] Returns: str</p>"},{"location":"api/scripts_ci_analyzer/#scriptsci_analyzerseverity_audit","title":"<code>scripts.ci_analyzer.severity_audit</code>","text":"<p>\ud83e\udde0 Docstring Summary</p> Section Content Description This module provides functionality to generate a CI code quality audit report. It includes functions to format priority levels and generate summary header blocks based on severity metrics. Args \u2014 Returns \u2014"},{"location":"api/scripts_ci_analyzer/#functions_2","title":"\ud83d\udee0\ufe0f Functions","text":""},{"location":"api/scripts_ci_analyzer/#format_priority","title":"<code>format_priority</code>","text":"<p>Returns a formatted priority label based on the given severity score. A high priority (\"\ud83d\udd25 High\") is assigned for scores above 30, medium (\"\u26a0\ufe0f Medium\") for scores above 15, and low (\"\u2705 Low\") otherwise. Parameters: ['score: float'] Returns: str</p>"},{"location":"api/scripts_ci_analyzer/#generate_header_block","title":"<code>generate_header_block</code>","text":"<p>Generates a Markdown header block summarizing key metrics from the CI code quality audit. Calculates totals and percentages for files analyzed, files with issues, top risk file, methods audited, missing tests, missing docstrings, and linter issues. Includes visual indicators for documentation, testing, and linting coverage. Parameters: ['severity_df: Any', 'report_data: Dict[str, Dict]'] Returns: str</p>"},{"location":"api/scripts_ci_analyzer/#generate_severity_table","title":"<code>generate_severity_table</code>","text":"<p>Generates a Markdown table ranking the top 10 files by severity for the CI audit report. If the severity DataFrame is empty, returns a placeholder row indicating no files found. Each row displays file name, Mypy errors, lint issues, average complexity with risk emoji, average coverage with a visual bar, severity score, and formatted priority level. Parameters: ['severity_df: Any'] Returns: str</p>"},{"location":"api/scripts_ci_analyzer/#main","title":"<code>main</code>","text":"<p>Generates a CI code quality audit report in Markdown format. Parses command-line arguments for input and output paths, loads audit data, computes severity metrics, and writes a formatted Markdown report summarizing code quality findings. Returns: None</p>"},{"location":"api/scripts_ci_analyzer/#scriptsci_analyzerseverity_index","title":"<code>scripts.ci_analyzer.severity_index</code>","text":"<p>\ud83e\udde0 Docstring Summary</p> Section Content Description This module provides functionality to compute severity scores for code quality analysis. It includes functions to compute individual severity scores for files and to create a severity index DataFrame from report data. Args \u2014 Returns \u2014"},{"location":"api/scripts_ci_analyzer/#functions_3","title":"\ud83d\udee0\ufe0f Functions","text":""},{"location":"api/scripts_ci_analyzer/#compute_severity","title":"<code>compute_severity</code>","text":"<p>Calculates a severity score for a file using its coverage and linting report data. The severity score is a weighted sum of MyPy errors, Pydocstyle lint issues, average function complexity, and coverage deficit. Returns a dictionary summarizing these metrics and the computed severity score. Parameters: ['file_path: str', 'content: dict'] Returns: dict</p>"},{"location":"api/scripts_ci_analyzer/#compute_severity_index","title":"<code>compute_severity_index</code>","text":"<p>Aggregates severity scores for multiple files into a sorted DataFrame. Processes report data for each file, computes severity metrics, and returns a DataFrame sorted by severity score in descending order. If no data is provided, returns an empty DataFrame with predefined columns. Parameters: ['report_data: dict'] Returns: pd.DataFrame</p>"},{"location":"api/scripts_ci_analyzer/#scriptsci_analyzervisuals","title":"<code>scripts.ci_analyzer.visuals</code>","text":"<p>\ud83e\udde0 Docstring Summary</p> Section Content Description This module provides functionality to render visual representations of risk and scores for code quality analysis. It includes functions to generate risk emojis and bar representations based on severity scores. Args \u2014 Returns \u2014"},{"location":"api/scripts_ci_analyzer/#functions_4","title":"\ud83d\udee0\ufe0f Functions","text":""},{"location":"api/scripts_ci_analyzer/#risk_emoji","title":"<code>risk_emoji</code>","text":"<p>Returns an emoji indicating risk level based on the given severity score. A green emoji (\"\ud83d\udfe2\") represents low risk for scores 90 and above, yellow (\"\ud83d\udfe1\") indicates moderate risk for scores between 70 and 89, and red (\"\ud83d\udd34\") signifies high risk for scores below 70. Parameters: ['score: float'] Returns: str</p>"},{"location":"api/scripts_ci_analyzer/#render_bar","title":"<code>render_bar</code>","text":"<p>Generates a horizontal bar visualizing a score as filled and unfilled segments. Parameters: ['score: float', 'width: int'] Returns: str</p>"},{"location":"api/scripts_config/","title":"<code>scripts/config</code>","text":""},{"location":"api/scripts_config/#scriptsconfig__init__","title":"<code>scripts.config.__init__</code>","text":"<p>\ud83e\udde0 Docstring Summary</p> Section Content Description The <code>config</code> module centralizes application configuration management and logging setup. Core features include: - Loading, validating, and caching application settings from JSON configuration files. - Providing a Pydantic-based configuration model for type-safe access to settings. - Managing environment-specific and test-mode configurations. - Utilities for safe file reading and error handling during configuration loading. - Centralized logging setup for consistent application-wide logging behavior. This module ensures robust, maintainable, and flexible configuration and logging for the entire application. Args \u2014 Returns \u2014"},{"location":"api/scripts_config/#scriptsconfigconfig_loader","title":"<code>scripts.config.config_loader</code>","text":"<p>\ud83e\udde0 Docstring Summary</p> Section Content Description No module description available. Args \u2014 Returns \u2014"},{"location":"api/scripts_config/#functions","title":"\ud83d\udee0\ufe0f Functions","text":""},{"location":"api/scripts_config/#setup_logging","title":"<code>setup_logging</code>","text":"<p>Configures centralized logging for the application. Sets the logging level to INFO, applies a standard log message format, and directs output to the console. Returns: None</p>"},{"location":"api/scripts_config/#load_config","title":"<code>load_config</code>","text":"<p>Loads a JSON configuration file from the specified path, returning its contents as a dictionary. If the file does not exist, cannot be read, or contains invalid JSON, returns an empty dictionary. Adjusts the logger level to DEBUG if \"test_mode\" is enabled in the configuration; otherwise, sets it to INFO. Parameters: ['config_path: Path'] Returns: Dict[str, Any]</p>"},{"location":"api/scripts_config/#get_config_value","title":"<code>get_config_value</code>","text":"<p>Retrieves a value from the configuration dictionary by key, returning a default if missing. Logs a warning if the key is not present in the configuration. Parameters: ['config: Dict[str, Any]', 'key: str', 'default: Any'] Returns: Any</p>"},{"location":"api/scripts_config/#get_absolute_path","title":"<code>get_absolute_path</code>","text":"<p>Resolves an absolute path by joining the project base directory with a relative path. Parameters: ['relative_path: str'] Returns: Path</p>"},{"location":"api/scripts_config/#is_test_mode","title":"<code>is_test_mode</code>","text":"<p>Determines whether test mode is enabled in the configuration. If no configuration is provided, loads the default configuration. Parameters: ['config: Optional[Dict[str, Any]]'] Returns: bool</p>"},{"location":"api/scripts_config/#get_effective_config","title":"<code>get_effective_config</code>","text":"<p>Loads the configuration and overrides paths with test-safe equivalents if test mode is enabled. If 'test_mode' is set in the configuration, certain directory and file paths are replaced with test-specific values to prevent interference with production data. Parameters: ['config_path: Path'] Returns: Dict[str, Any]</p>"},{"location":"api/scripts_config/#scriptsconfigconfig_manager","title":"<code>scripts.config.config_manager</code>","text":"<p>\ud83e\udde0 Docstring Summary</p> Section Content Description config_manager.py This module provides centralized management of application configuration using a Pydantic-based model. Core features include: - Defining a comprehensive AppConfig model for all configurable application parameters. - Loading, validating, and caching configuration from a JSON file. - Utility methods for retrieving configuration values, resetting the config cache, and validating critical config paths. - Integration with safe file reading utilities for resilience against missing or malformed config files. Intended for use throughout the application to ensure consistent, validated configuration management. Args \u2014 Returns \u2014"},{"location":"api/scripts_config/#classes","title":"\ud83d\udce6 Classes","text":""},{"location":"api/scripts_config/#appconfig","title":"<code>AppConfig</code>","text":"<p>Configuration model for application settings. Defines all configurable parameters for the application, including UI, logging, LLM and embedding model settings, file paths, test mode, and plugin management. Ignores any extra fields not explicitly defined. Returns: None</p>"},{"location":"api/scripts_config/#config","title":"<code>Config</code>","text":"<p>No description available. Returns: None</p>"},{"location":"api/scripts_config/#configmanager","title":"<code>ConfigManager</code>","text":"<p>Manages application configuration loading, caching, and validation. Provides methods to load configuration from a JSON file using the AppConfig model, retrieve configuration values, reset the cached config, and validate critical config paths. Handles missing or invalid config files by returning default settings and logs relevant events. Returns: None</p>"},{"location":"api/scripts_config/#functions_1","title":"\ud83d\udee0\ufe0f Functions","text":""},{"location":"api/scripts_config/#_default_config","title":"<code>_default_config</code>","text":"<p>Return a fresh copy of the pre-instantiated default config. Parameters: ['cls: Any'] Returns: AppConfig</p>"},{"location":"api/scripts_config/#load_config_1","title":"<code>load_config</code>","text":"<p>Loads the application configuration from a JSON file, with optional cache refresh. If the config file is missing or invalid, returns a default AppConfig instance. Caches the loaded config and reloads if the file changes or force_reload is True. Logs relevant events and raises on validation errors. Parameters: ['cls: Any', 'config_path: str', 'force_reload: bool'] Returns: AppConfig</p>"},{"location":"api/scripts_config/#get_value","title":"<code>get_value</code>","text":"<p>Retrieve a configuration value by key from the loaded AppConfig. Parameters: ['cls: Any', 'key: str', 'default: Any', 'force_reload: bool'] Returns: Any</p>"},{"location":"api/scripts_config/#reset","title":"<code>reset</code>","text":"<p>Reset the cached configuration and timestamp. Parameters: ['cls: Any'] Returns: None</p>"},{"location":"api/scripts_config/#validate_config_paths","title":"<code>validate_config_paths</code>","text":"<p>Validate that critical config paths have existing parent directories. Logs a warning for each missing directory. Returns True if all required directories exist, otherwise False. Parameters: ['cls: Any'] Returns: bool</p>"},{"location":"api/scripts_config/#scriptsconfigconstants","title":"<code>scripts.config.constants</code>","text":"<p>\ud83e\udde0 Docstring Summary</p> Section Content Description constants.py This module defines global constants used throughout the Zephyrus Logger application. Core features include: - Timestamp and date formatting strings for consistent time representation. - Standardized JSON keys for batch processing, summaries, and content tracking. - Keys for summary tracking and logging statistics. - Default configuration values for batch size, autosave interval, and log level. - Default file suffixes and extensions for summary and markdown files. - Centralized UI default settings, such as theme. Intended to provide a single source of truth for application-wide constants, improving maintainability and consistency. Args \u2014 Returns \u2014"},{"location":"api/scripts_config/#scriptsconfiglogging_setup","title":"<code>scripts.config.logging_setup</code>","text":"<p>\ud83e\udde0 Docstring Summary</p> Section Content Description logging_setup.py This module provides centralized logging configuration for the application. Core features include: - Defining a <code>setup_logging</code> function to initialize the root logger with a specified log level. - Clearing existing handlers and adding a console handler with a standardized log message format. - Automatically configuring logging upon import for convenience and consistency across the application. Intended for use as the standard logging setup to ensure uniform log formatting and log level management. Args \u2014 Returns \u2014"},{"location":"api/scripts_config/#functions_2","title":"\ud83d\udee0\ufe0f Functions","text":""},{"location":"api/scripts_config/#setup_logging_1","title":"<code>setup_logging</code>","text":"<p>Configures the root logger with a specified log level and standardized console output. Initializes application-wide logging by setting the root logger's level, clearing any existing handlers, and adding a console handler with a consistent log message format. If an invalid log level is provided, defaults to INFO. Parameters: ['log_level: Any'] Returns: Any</p>"},{"location":"api/scripts_core/","title":"<code>scripts/core</code>","text":""},{"location":"api/scripts_core/#scriptscore__init__","title":"<code>scripts.core.__init__</code>","text":"<p>\ud83e\udde0 Docstring Summary</p> Section Content Description No module description available. Args \u2014 Returns \u2014"},{"location":"api/scripts_core/#scriptscorecore","title":"<code>scripts.core.core</code>","text":"<p>\ud83e\udde0 Docstring Summary</p> Section Content Description Core module for Zephyrus Logger ================================ This refactored core.py wires together the new, slimmer helper modules we just introduced (<code>EnvironmentBootstrapper</code>, <code>LogManager</code>, <code>MarkdownLogger</code>, <code>SummaryTracker</code>, <code>SummaryEngine</code>). It restores the public surface that the unit &amp; integration tests expect while keeping the implementation focused and declarative. Key public methods / attributes re-exposed ----------------------------------------- * save_entry          \u2013 add a new idea to JSON + Markdown &amp; update tracker * log_new_entry       \u2013 alias of save_entry (used by integration tests) * generate_global_summary \u2013 force batch summarisation via <code>SummaryEngine</code> * generate_summary    \u2013 backward-compat shim (date arg ignored) * search_summaries / search_raw_logs \u2013 thin wrappers around the FAISS indexers (gracefully degrade to empty list when indices are disabled in tests) * BATCH_SIZE          \u2013 pulled from config with sane default so tests can use it directly. Everything else (bootstrap, validation, etc.) stays untouched aside from swapping our bespoke <code>_initialize_environment</code> with the clearer <code>EnvironmentBootstrapper</code>. Args \u2014 Returns \u2014"},{"location":"api/scripts_core/#classes","title":"\ud83d\udce6 Classes","text":""},{"location":"api/scripts_core/#zephyrusloggercore","title":"<code>ZephyrusLoggerCore</code>","text":"<p>High-level fa\u00e7ade that ties together logging, summarizing, and search functionalities. This class serves as the main interface for managing logs, generating summaries, and searching through entries within the Zephyrus Logger application. It initializes various components necessary for logging and summarization, ensuring the environment is properly set up. Attributes: TIMESTAMP_FORMAT (str): Format for timestamps in logs. DATE_FORMAT (str): Format for dates in logs. BATCH_KEY (str): Key for batch processing. ORIGINAL_SUMMARY_KEY (str): Key for original summaries. CORRECTED_SUMMARY_KEY (str): Key for corrected summaries. CORRECTION_TIMESTAMP_KEY (str): Key for correction timestamps. CONTENT_KEY (str): Key for content in logs. TIMESTAMP_KEY (str): Key for timestamps in logs. BATCH_SIZE (int): Number of entries to process in a batch. ai_summarizer (AISummarizer): Instance of the AI summarizer. log_manager (LogManager): Instance of the log manager. md_logger (MarkdownLogger): Instance of the markdown logger. summary_tracker (SummaryTracker): Instance of the summary tracker. summary_engine (SummaryEngine): Instance of the summary engine. Parameters: ['self: Any', 'script_dir: Union[str, Path]'] Returns: None</p>"},{"location":"api/scripts_core/#functions","title":"\ud83d\udee0\ufe0f Functions","text":""},{"location":"api/scripts_core/#__init__","title":"<code>__init__</code>","text":"<p>Initializes ZephyrusLoggerCore with configuration, environment setup, and core components. Loads configuration, resolves file system paths, ensures required directories and files exist, and instantiates collaborators for logging, summarization, and summary tracking. Validates the summary tracker on startup, rebuilding it if necessary or configured to do so. Parameters: ['self: Any', 'script_dir: Union[str, Path]'] Returns: Any</p>"},{"location":"api/scripts_core/#save_entry","title":"<code>save_entry</code>","text":"<p>Saves a new log entry to both the JSON log and Markdown export. Adds the entry under the specified main category and subcategory, updates the summary tracker, and returns whether the Markdown export succeeded. Parameters: ['self: Any', 'main_category: str', 'subcategory: str', 'entry: str'] Returns: bool</p>"},{"location":"api/scripts_core/#generate_global_summary","title":"<code>generate_global_summary</code>","text":"<p>Generates a batch summary for the specified main category and subcategory. Parameters: ['self: Any', 'main_category: str', 'subcategory: str'] Returns: bool</p>"},{"location":"api/scripts_core/#generate_summary","title":"<code>generate_summary</code>","text":"<p>Generates a summary for the specified main category and subcategory. This method ignores the date argument and delegates to generate_global_summary for backward compatibility. Parameters: ['self: Any', '_date_str: str', 'main_category: str', 'subcategory: str'] Returns: bool</p>"},{"location":"api/scripts_core/#_safe_search","title":"<code>_safe_search</code>","text":"<p>Safely performs a search on a specified FAISS indexer attribute of the summary tracker. If the indexer or its search method is unavailable, or if an exception occurs during search, returns an empty list. Parameters: ['self: Any', 'indexer_attr: str', 'query: str', 'top_k: int'] Returns: List[Any]</p>"},{"location":"api/scripts_core/#search_summaries","title":"<code>search_summaries</code>","text":"<p>Searches summary entries for the most relevant matches to a query using vector similarity. Parameters: ['self: Any', 'query: str', 'top_k: int'] Returns: List[Any]</p>"},{"location":"api/scripts_core/#search_raw_logs","title":"<code>search_raw_logs</code>","text":"<p>Searches raw log entries for the most relevant matches to a query using vector similarity. Parameters: ['self: Any', 'query: str', 'top_k: int'] Returns: List[Any]</p>"},{"location":"api/scripts_core/#_safe_read_json","title":"<code>_safe_read_json</code>","text":"<p>Safely reads a JSON file and returns its contents as a dictionary. If the file cannot be read or parsed, returns an empty dictionary instead of raising an exception. Parameters: ['filepath: Path'] Returns: Dict[str, Any]</p>"},{"location":"api/scripts_core/#scriptscorecore_cli","title":"<code>scripts.core.core_cli</code>","text":"<p>\ud83e\udde0 Docstring Summary</p> Section Content Description Command Line Interface for Zephyrus Logger =============================== This module provides a command-line interface for the Zephyrus Logger application, allowing users to log entries, summarize categories, and search through logs. Args \u2014 Returns \u2014"},{"location":"api/scripts_core/#functions_1","title":"\ud83d\udee0\ufe0f Functions","text":""},{"location":"api/scripts_core/#log","title":"<code>log</code>","text":"<p>Logs a new entry under the specified main and subcategory. Parameters: ['main: str', 'sub: str', 'entry: str'] Returns: None</p>"},{"location":"api/scripts_core/#summarize","title":"<code>summarize</code>","text":"<p>Generates a summary for the specified main category and subcategory. Parameters: ['main: str', 'sub: str'] Returns: None</p>"},{"location":"api/scripts_core/#search","title":"<code>search</code>","text":"<p>Searches summaries or raw logs and displays the top results. Parameters: ['query: str', 'top_k: int', 'kind: str'] Returns: None</p>"},{"location":"api/scripts_core/#scriptscoreenvironment_bootstrapper","title":"<code>scripts.core.environment_bootstrapper</code>","text":"<p>\ud83e\udde0 Docstring Summary</p> Section Content Description Environment Bootstrapper Module =============================== This module provides the EnvironmentBootstrapper class, which is responsible for setting up the necessary directories and files for the Zephyrus Logger application. It ensures that all required resources are in place before the application starts. Args \u2014 Returns \u2014"},{"location":"api/scripts_core/#classes_1","title":"\ud83d\udce6 Classes","text":""},{"location":"api/scripts_core/#environmentbootstrapper","title":"<code>EnvironmentBootstrapper</code>","text":"<p>A class to bootstrap the environment for the Zephyrus Logger application. This class handles the creation of necessary directories and files, ensuring that the application has all required resources available. Attributes: paths (ZephyrusPaths): An instance containing paths for logs, exports, and configuration files. default_batch_size (int): The default batch size to use if the configuration file is missing. Parameters: ['self: Any', 'paths: ZephyrusPaths', 'default_batch_size: int'] Returns: None</p>"},{"location":"api/scripts_core/#functions_2","title":"\ud83d\udee0\ufe0f Functions","text":""},{"location":"api/scripts_core/#__init___1","title":"<code>__init__</code>","text":"<p>Initializes the EnvironmentBootstrapper with paths and a default batch size. Parameters: ['self: Any', 'paths: ZephyrusPaths', 'default_batch_size: int'] Returns: None</p>"},{"location":"api/scripts_core/#bootstrap","title":"<code>bootstrap</code>","text":"<p>Prepares the application environment by ensuring required directories and files exist. Calls internal methods to create necessary directories and initialize essential files for the Zephyrus Logger application, guaranteeing all resources are ready before startup. Parameters: ['self: Any'] Returns: None</p>"},{"location":"api/scripts_core/#_make_directories","title":"<code>_make_directories</code>","text":"<p>Creates required directories for logs, exports, and configuration files if they do not exist. Parameters: ['self: Any'] Returns: None</p>"},{"location":"api/scripts_core/#_initialize_files","title":"<code>_initialize_files</code>","text":"<p>Initializes required log and configuration files for the Zephyrus Logger environment. Creates empty or default-initialized files if they do not exist, including the JSON log, text log, correction summaries, and configuration files. If the correction summaries file exists but is empty, it is reinitialized as an empty JSON file. The configuration file is recreated with a default batch size if missing. Parameters: ['self: Any'] Returns: None</p>"},{"location":"api/scripts_core/#scriptscorelog_manager","title":"<code>scripts.core.log_manager</code>","text":"<p>\ud83e\udde0 Docstring Summary</p> Section Content Description log_manager.py This module provides the LogManager class for managing log entries and correction summaries. It includes functionality for reading and writing log data in both JSON and plain text formats, as well as handling timestamps and content keys for structured logging. The LogManager is essential for the Zephyrus Logger application to maintain a reliable logging system. Dependencies: - pathlib - datetime - logging - scripts.utils.file_utils Args \u2014 Returns \u2014"},{"location":"api/scripts_core/#classes_2","title":"\ud83d\udce6 Classes","text":""},{"location":"api/scripts_core/#logmanager","title":"<code>LogManager</code>","text":"<p>No description available. Parameters: ['self: Any', 'json_log_file: Path', 'txt_log_file: Path', 'correction_summaries_file: Path', 'timestamp_format: str', 'content_key: str', 'timestamp_key: str'] Returns: None</p>"},{"location":"api/scripts_core/#functions_3","title":"\ud83d\udee0\ufe0f Functions","text":""},{"location":"api/scripts_core/#__init___2","title":"<code>__init__</code>","text":"<p>Initializes a LogManager instance. Parameters: ['self: Any', 'json_log_file: Path', 'txt_log_file: Path', 'correction_summaries_file: Path', 'timestamp_format: str', 'content_key: str', 'timestamp_key: str'] Returns: Any</p>"},{"location":"api/scripts_core/#_safe_read_or_create_json","title":"<code>_safe_read_or_create_json</code>","text":"<p>Safely reads a JSON file or creates it if it doesn't exist. If the file doesn't exist, it will create an empty JSON object. Parameters: ['self: Any', 'filepath: Path'] Returns: dict</p>"},{"location":"api/scripts_core/#read_logs","title":"<code>read_logs</code>","text":"<p>Reads the JSON log file and returns its contents. If the file doesn't exist, it will create an empty JSON object. Parameters: ['self: Any'] Returns: dict</p>"},{"location":"api/scripts_core/#update_logs","title":"<code>update_logs</code>","text":"<p>Updates the JSON log file with the provided update function. The update function will be provided with the current JSON data as a dictionary. The function should modify the dictionary in-place as needed. Parameters: ['self: Any', 'update_func: Any'] Returns: None</p>"},{"location":"api/scripts_core/#append_entry","title":"<code>append_entry</code>","text":"<p>Appends a new log entry to the JSON log file. Parameters: ['self: Any', 'date_str: str', 'main_category: str', 'subcategory: str', 'entry: str'] Returns: None</p>"},{"location":"api/scripts_core/#updater","title":"<code>updater</code>","text":"<p>Updates the JSON data to append a new log entry. Parameters: ['data: dict'] Returns: None</p>"},{"location":"api/scripts_core/#get_unsummarized_batch","title":"<code>get_unsummarized_batch</code>","text":"<p>Retrieves a batch of unsummarized log entries for the given main category and subcategory. Parameters: ['self: Any', 'main_category: str', 'subcategory: str', 'summarized_total: int', 'batch_size: int'] Returns: list</p>"},{"location":"api/scripts_core/#update_correction_summaries","title":"<code>update_correction_summaries</code>","text":"<p>Updates the correction summaries JSON file with new data. Parameters: ['self: Any', 'main_category: str', 'subcategory: str', 'new_data: dict'] Returns: None</p>"},{"location":"api/scripts_core/#scriptscoremarkdown_logger","title":"<code>scripts.core.markdown_logger</code>","text":"<p>\ud83e\udde0 Docstring Summary</p> Section Content Description Markdown Logger Module =============================== This module provides the MarkdownLogger class, which is responsible for logging entries to Markdown files. It handles the creation and updating of Markdown files in the specified export directory. Args \u2014 Returns \u2014"},{"location":"api/scripts_core/#classes_3","title":"\ud83d\udce6 Classes","text":""},{"location":"api/scripts_core/#markdownlogger","title":"<code>MarkdownLogger</code>","text":"<p>A class to log entries to Markdown files. This class manages the logging of entries into Markdown format, creating new files or updating existing ones as necessary. Attributes: export_dir (Path): The directory where Markdown files will be saved. Parameters: ['self: Any', 'export_dir: Path'] Returns: None</p>"},{"location":"api/scripts_core/#functions_4","title":"\ud83d\udee0\ufe0f Functions","text":""},{"location":"api/scripts_core/#__init___3","title":"<code>__init__</code>","text":"<p>Initializes a MarkdownLogger to write entries to Markdown files in the specified directory. Parameters: ['self: Any', 'export_dir: Path'] Returns: None</p>"},{"location":"api/scripts_core/#log_1","title":"<code>log</code>","text":"<p>Logs an entry under a specific date and category in a Markdown file. Creates or updates a Markdown file named after the main category, adding the entry under the specified date header and subcategory. Returns True if the operation succeeds, or False if an error occurs. Parameters: ['self: Any', 'date_str: str', 'main_category: str', 'subcategory: str', 'entry: str'] Returns: bool</p>"},{"location":"api/scripts_core/#scriptscoresummary_engine","title":"<code>scripts.core.summary_engine</code>","text":"<p>\ud83e\udde0 Docstring Summary</p> Section Content Description Summary Engine Module =============================== This module provides the SummaryEngine class, which is responsible for generating summaries from log entries using AI summarization. It integrates with the log manager and summary tracker to manage the summarization process. Args \u2014 Returns \u2014"},{"location":"api/scripts_core/#classes_4","title":"\ud83d\udce6 Classes","text":""},{"location":"api/scripts_core/#summaryengine","title":"<code>SummaryEngine</code>","text":"<p>A class to manage the summarization of log entries. This class utilizes an AI summarizer to generate summaries from batches of log entries, coordinating with the log manager and summary tracker. Attributes: summarizer (AISummarizer): The AI summarizer instance. log_manager (LogManager): The log manager instance. tracker (SummaryTracker): The summary tracker instance. timestamp_format (str): The format for timestamps. content_key (str): The key for content in log entries. timestamp_key (str): The key for timestamps in log entries. batch_size (int): The number of entries to process in a batch. Parameters: ['self: Any', 'summarizer: AISummarizer', 'log_manager: LogManager', 'summary_tracker: SummaryTracker', 'timestamp_format: str', 'content_key: str', 'timestamp_key: str', 'batch_size: int'] Returns: None</p>"},{"location":"api/scripts_core/#functions_5","title":"\ud83d\udee0\ufe0f Functions","text":""},{"location":"api/scripts_core/#__init___4","title":"<code>__init__</code>","text":"<p>Initialize the SummaryEngine. Parameters: summarizer (AISummarizer): The AI summarizer instance. log_manager (LogManager): The log manager instance. summary_tracker (SummaryTracker): The summary tracker instance. timestamp_format (str): The format for timestamps. content_key (str): The key for content in log entries. timestamp_key (str): The key for timestamps in log entries. batch_size (int): The number of entries to process in a batch. Parameters: ['self: Any', 'summarizer: AISummarizer', 'log_manager: LogManager', 'summary_tracker: SummaryTracker', 'timestamp_format: str', 'content_key: str', 'timestamp_key: str', 'batch_size: int'] Returns: None</p>"},{"location":"api/scripts_core/#_get_summary","title":"<code>_get_summary</code>","text":"<p>Generate a summary from a batch of log entries. Parameters: batch_entries (List[Dict[str, Any]]): The batch of log entries. subcategory (str): The subcategory for the summary. Parameters: ['self: Any', 'batch_entries: List[Dict[str, Any]]', 'subcategory: str'] Returns: Optional[str]</p>"},{"location":"api/scripts_core/#summarize_1","title":"<code>summarize</code>","text":"<p>Summarize log entries for a given main category and subcategory. Parameters: main_category (str): The main category for the summary. subcategory (str): The subcategory for the summary. Parameters: ['self: Any', 'main_category: str', 'subcategory: str'] Returns: bool</p>"},{"location":"api/scripts_core/#scriptscoresummary_tracker","title":"<code>scripts.core.summary_tracker</code>","text":"<p>\ud83e\udde0 Docstring Summary</p> Section Content Description summary_tracker.py This module provides the SummaryTracker class for managing and tracking summaries of logs. It includes functionality for loading tracker data, initializing indexers, and maintaining the state of summaries. This module is essential for the Zephyrus Logger application to manage summaries effectively. Dependencies: - json - logging - pathlib - collections (defaultdict) - scripts.indexers.summary_indexer - scripts.indexers.raw_log_indexer - scripts.utils.file_utils - scripts.paths.ZephyrusPaths Args \u2014 Returns \u2014"},{"location":"api/scripts_core/#classes_5","title":"\ud83d\udce6 Classes","text":""},{"location":"api/scripts_core/#summarytracker","title":"<code>SummaryTracker</code>","text":"<p>SummaryTracker manages the loading, initialization, and tracking of summary data for logs. Attributes: paths (ZephyrusPaths): The paths configuration for the summary tracker. tracker_path (Path): The path to the summary tracker file. tracker (Dict[str, Dict[str, Any]]): The loaded tracker data. summary_indexer (Optional[SummaryIndexer]): The indexer for summaries. raw_indexer (Optional[RawLogIndexer]): The indexer for raw logs. Parameters: ['self: Any', 'paths: ZephyrusPaths'] Returns: None</p>"},{"location":"api/scripts_core/#functions_6","title":"\ud83d\udee0\ufe0f Functions","text":""},{"location":"api/scripts_core/#__init___5","title":"<code>__init__</code>","text":"<p>Initializes the SummaryTracker with the given paths. Parameters: ['self: Any', 'paths: ZephyrusPaths'] Returns: None</p>"},{"location":"api/scripts_core/#_safe_load_tracker","title":"<code>_safe_load_tracker</code>","text":"<p>Safely loads the tracker data from the tracker file. Parameters: ['self: Any'] Returns: Dict[str, Dict[str, Any]]</p>"},{"location":"api/scripts_core/#_safe_init_summary_indexer","title":"<code>_safe_init_summary_indexer</code>","text":"<p>Safely initializes the SummaryIndexer. Parameters: ['self: Any'] Returns: Optional[SummaryIndexer]</p>"},{"location":"api/scripts_core/#_safe_init_raw_indexer","title":"<code>_safe_init_raw_indexer</code>","text":"<p>Safely initializes the RawLogIndexer. Parameters: ['self: Any'] Returns: Optional[RawLogIndexer]</p>"},{"location":"api/scripts_core/#get_summarized_count","title":"<code>get_summarized_count</code>","text":"<p>Retrieves the summarized count for the given main category and subcategory. Parameters: ['self: Any', 'main_category: str', 'subcategory: str'] Returns: int</p>"},{"location":"api/scripts_core/#update","title":"<code>update</code>","text":"<p>Updates the tracker with the given summarized and new entries counts. Parameters: ['self: Any', 'main_category: str', 'subcategory: str', 'summarized: int', 'new_entries: int'] Returns: None</p>"},{"location":"api/scripts_core/#_save","title":"<code>_save</code>","text":"<p>Saves the tracker data to the tracker file. Parameters: ['self: Any'] Returns: None</p>"},{"location":"api/scripts_core/#rebuild","title":"<code>rebuild</code>","text":"<p>Rebuilds the tracker by clearing the current data and re-counting the logged and summarized entries. Parameters: ['self: Any'] Returns: None</p>"},{"location":"api/scripts_core/#validate","title":"<code>validate</code>","text":"<p>Validates the tracker by comparing the summarized counts with the actual counts in the correction summaries. Parameters: ['self: Any', 'verbose: bool'] Returns: bool</p>"},{"location":"api/scripts_core/#get_coverage_data","title":"<code>get_coverage_data</code>","text":"<p>Returns a structured list of coverage data for all tracked (main, sub) categories. Each entry includes: - main_category - subcategory - logged_total - estimated_summarized_entries - coverage_percent (0\u2013100) Parameters: ['self: Any'] Returns: list[dict]</p>"},{"location":"api/scripts_doc_generation/","title":"<code>scripts/doc_generation</code>","text":""},{"location":"api/scripts_doc_generation/#scriptsdoc_generation__init__","title":"<code>scripts.doc_generation.__init__</code>","text":"<p>\ud83e\udde0 Docstring Summary</p> Section Content Description No module description available. Args \u2014 Returns \u2014"},{"location":"api/scripts_doc_generation/#scriptsdoc_generationcoverage_doc_generation","title":"<code>scripts.doc_generation.coverage_doc_generation</code>","text":"<p>\ud83e\udde0 Docstring Summary</p> Section Content Description Split-by-Folder Coverage Documentation Generator =============================================== Creates one Markdown file per folder: - ai.md, core.md, etc. Also generates: - index.md with folder links Args \u2014 Returns \u2014"},{"location":"api/scripts_doc_generation/#functions","title":"\ud83d\udee0\ufe0f Functions","text":""},{"location":"api/scripts_doc_generation/#generate_split_coverage_docs","title":"<code>generate_split_coverage_docs</code>","text":"<p>Generate split coverage documentation files. Parameters: ['coverage_data: dict', 'output_dir: Path'] Returns: Any</p>"},{"location":"api/scripts_doc_generation/#main","title":"<code>main</code>","text":"<p>No description available. Returns: Any</p>"},{"location":"api/scripts_doc_generation/#scriptsdoc_generationdoc_renderers","title":"<code>scripts.doc_generation.doc_renderers</code>","text":"<p>\ud83e\udde0 Docstring Summary</p> Section Content Description Documentation Rendering Module ============================= Contains rendering functions for coverage, code quality, and docstring reports. Separates presentation logic from data processing. Args \u2014 Returns \u2014"},{"location":"api/scripts_doc_generation/#functions_1","title":"\ud83d\udee0\ufe0f Functions","text":""},{"location":"api/scripts_doc_generation/#render_folder_coverage","title":"<code>render_folder_coverage</code>","text":"<p>Renders the markdown content for a single folder's coverage. Parameters: ['folder: str', 'entries: list'] Returns: str</p>"},{"location":"api/scripts_doc_generation/#render_coverage_index","title":"<code>render_coverage_index</code>","text":"<p>Renders the index file for coverage reports. Parameters: ['folders: List[str]', 'totals: Dict[str, Any]'] Returns: List[str]</p>"},{"location":"api/scripts_doc_generation/#render_folder_report","title":"<code>render_folder_report</code>","text":"<p>Renders the markdown content for a single folder's code quality. Parameters: ['folder: str', 'section: dict', 'verbose: bool'] Returns: str</p>"},{"location":"api/scripts_doc_generation/#render_quality_index","title":"<code>render_quality_index</code>","text":"<p>Renders the index file for code quality reports. Parameters: ['folders: List[str]'] Returns: List[str]</p>"},{"location":"api/scripts_doc_generation/#render_module_docs","title":"<code>render_module_docs</code>","text":"<p>Renders the markdown content for a single module's docstrings. Unified format: header + summary table. Parameters: ['file_path: str', 'docstrings: Dict[str, Any]'] Returns: str</p>"},{"location":"api/scripts_doc_generation/#render_docstring_index","title":"<code>render_docstring_index</code>","text":"<p>Renders the index file for docstring documentation. Parameters: ['sections: List[Tuple[str, List[Tuple[str, str]]]]'] Returns: List[str]</p>"},{"location":"api/scripts_doc_generation/#scriptsdoc_generationdocstring_doc_generation","title":"<code>scripts.doc_generation.docstring_doc_generation</code>","text":"<p>\ud83e\udde0 Docstring Summary</p> Section Content Description Split-by-Module Docstring Documentation Generator ================================================ Creates markdown documentation files from docstring analysis: - One file per module/package - Generated MkDocs-compatible output structure - Index files with navigation links Args \u2014 Returns \u2014"},{"location":"api/scripts_doc_generation/#functions_2","title":"\ud83d\udee0\ufe0f Functions","text":""},{"location":"api/scripts_doc_generation/#generate_split_docstring_docs","title":"<code>generate_split_docstring_docs</code>","text":"<p>Generate folder-grouped Markdown documentation from docstring data. Each top-level folder becomes a single .md file. Parameters: ['docstring_data: Dict[str, Dict[str, Any]]', 'output_dir: Path'] Returns: Any</p>"},{"location":"api/scripts_doc_generation/#main_1","title":"<code>main</code>","text":"<p>No description available. Returns: Any</p>"},{"location":"api/scripts_doc_generation/#scriptsdoc_generationquality_doc_generation","title":"<code>scripts.doc_generation.quality_doc_generation</code>","text":"<p>\ud83e\udde0 Docstring Summary</p> Section Content Description Split-by-Folder Code Quality Markdown Generator =============================================== Creates one Markdown file per top-level folder: - ai.md, core.md, etc. Each file includes: - Missing documentation - Linting issues - Optional: MyPy errors (--verbose) Args \u2014 Returns \u2014"},{"location":"api/scripts_doc_generation/#functions_3","title":"\ud83d\udee0\ufe0f Functions","text":""},{"location":"api/scripts_doc_generation/#generate_split_reports","title":"<code>generate_split_reports</code>","text":"<p>Generate split code quality documentation files. Parameters: ['report_data: dict', 'output_dir: Path', 'verbose: bool'] Returns: Any</p>"},{"location":"api/scripts_doc_generation/#main_2","title":"<code>main</code>","text":"<p>No description available. Returns: Any</p>"},{"location":"api/scripts_gui/","title":"<code>scripts/gui</code>","text":""},{"location":"api/scripts_gui/#scriptsgui__init__","title":"<code>scripts.gui.__init__</code>","text":"<p>\ud83e\udde0 Docstring Summary</p> Section Content Description No module description available. Args \u2014 Returns \u2014"},{"location":"api/scripts_gui/#scriptsguigui","title":"<code>scripts.gui.gui</code>","text":"<p>\ud83e\udde0 Docstring Summary</p> Section Content Description gui.py This module provides the ZephyrusLoggerGUI class, which implements a graphical user interface for the Zephyrus Ideas Logger application using the tkinter library. It manages the GUI components, user interactions, and integrates logging functionality. Args \u2014 Returns \u2014"},{"location":"api/scripts_gui/#classes","title":"\ud83d\udce6 Classes","text":""},{"location":"api/scripts_gui/#zephyrusloggergui","title":"<code>ZephyrusLoggerGUI</code>","text":"<p>A class to represent the Zephyrus Ideas Logger GUI. This class initializes the GUI components and handles user interactions. Attributes: controller (GUIController): The controller for managing the application's logic. logger (logging.Logger): Logger for tracking GUI events and actions. config (dict): Configuration settings loaded from the config file. category_structure (dict): Structure of categories for the GUI. root (tk.Tk): The main window of the GUI application. Parameters: ['self: Any', 'controller: GUIController'] Returns: None</p>"},{"location":"api/scripts_gui/#functions","title":"\ud83d\udee0\ufe0f Functions","text":""},{"location":"api/scripts_gui/#__init__","title":"<code>__init__</code>","text":"<p>Initialize the ZephyrusLoggerGUI. Parameters: ['self: Any', 'controller: GUIController'] Returns: None</p>"},{"location":"api/scripts_gui/#_setup_gui_logging","title":"<code>_setup_gui_logging</code>","text":"<p>Set up the logging for the GUI. This method configures the logging handler to display logs in the GUI. Parameters: ['self: Any'] Returns: None</p>"},{"location":"api/scripts_gui/#_build_widgets","title":"<code>_build_widgets</code>","text":"<p>Build the GUI widgets and layout. This method creates and arranges the GUI components, such as frames and buttons. Parameters: ['self: Any'] Returns: None</p>"},{"location":"api/scripts_gui/#_update_coverage_display","title":"<code>_update_coverage_display</code>","text":"<p>Update the coverage display. This method retrieves the coverage data from the controller and updates the coverage display. Parameters: ['self: Any'] Returns: None</p>"},{"location":"api/scripts_gui/#_populate_category_dropdown","title":"<code>_populate_category_dropdown</code>","text":"<p>Populate the category dropdown menu. This method retrieves the categories from the controller and populates the dropdown menu. Parameters: ['self: Any'] Returns: None</p>"},{"location":"api/scripts_gui/#_update_main_category","title":"<code>_update_main_category</code>","text":"<p>Update the main category. This method updates the main category and subcategory dropdown menus. Parameters: ['self: Any', 'new_main: str'] Returns: None</p>"},{"location":"api/scripts_gui/#_log_entry","title":"<code>_log_entry</code>","text":"<p>Log a new entry. This method logs a new entry based on the user's input. Parameters: ['self: Any'] Returns: None</p>"},{"location":"api/scripts_gui/#_manual_summarize","title":"<code>_manual_summarize</code>","text":"<p>Manually summarize the logs. This method generates a summary of the logs based on the user's input. Parameters: ['self: Any'] Returns: None</p>"},{"location":"api/scripts_gui/#_search_summary","title":"<code>_search_summary</code>","text":"<p>Search for summaries. This method searches for summaries based on the user's input. Parameters: ['self: Any'] Returns: None</p>"},{"location":"api/scripts_gui/#_search_raw","title":"<code>_search_raw</code>","text":"<p>Search for raw logs. This method searches for raw logs based on the user's input. Parameters: ['self: Any'] Returns: None</p>"},{"location":"api/scripts_gui/#_rebuild_tracker","title":"<code>_rebuild_tracker</code>","text":"<p>Rebuild the tracker. This method rebuilds the tracker based on the user's input. Parameters: ['self: Any'] Returns: None</p>"},{"location":"api/scripts_gui/#_show_coverage","title":"<code>_show_coverage</code>","text":"<p>Show the coverage. This method displays the coverage data. Parameters: ['self: Any'] Returns: None</p>"},{"location":"api/scripts_gui/#run","title":"<code>run</code>","text":"<p>Run the GUI application. This method starts the GUI event loop. Parameters: ['self: Any'] Returns: None</p>"},{"location":"api/scripts_gui/#scriptsguigui_controller","title":"<code>scripts.gui.gui_controller</code>","text":"<p>\ud83e\udde0 Docstring Summary</p> Section Content Description gui_controller.py This module provides the GUIController class for managing the interaction between the GUI and the logging core of the Zephyrus Logger application. It handles the initialization of the logger core and facilitates logging entries through the GUI. Dependencies: - os - logging - scripts.core.core.ZephyrusLoggerCore Args \u2014 Returns \u2014"},{"location":"api/scripts_gui/#classes_1","title":"\ud83d\udce6 Classes","text":""},{"location":"api/scripts_gui/#guicontroller","title":"<code>GUIController</code>","text":"<p>GUIController manages the interaction between the GUI and the logging core. Attributes: core (ZephyrusLoggerCore): The instance of the ZephyrusLoggerCore used for logging. Parameters: ['self: Any', 'logger_core: Optional[ZephyrusLoggerCore]', 'script_dir: Optional[str]'] Returns: None</p>"},{"location":"api/scripts_gui/#functions_1","title":"\ud83d\udee0\ufe0f Functions","text":""},{"location":"api/scripts_gui/#__init___1","title":"<code>__init__</code>","text":"<p>Initializes the GUIController with the given logger core or initializes a new one. Parameters: ['self: Any', 'logger_core: Optional[ZephyrusLoggerCore]', 'script_dir: Optional[str]'] Returns: None</p>"},{"location":"api/scripts_gui/#log_entry","title":"<code>log_entry</code>","text":"<p>Logs an entry with the specified main category, subcategory, and text. Parameters: ['self: Any', 'main: str', 'sub: str', 'text: str'] Returns: Any</p>"},{"location":"api/scripts_gui/#force_summarize_all","title":"<code>force_summarize_all</code>","text":"<p>Forces the summarization of all logs. Parameters: ['self: Any'] Returns: Any</p>"},{"location":"api/scripts_gui/#search_summaries","title":"<code>search_summaries</code>","text":"<p>Searches for summaries matching the given query. Parameters: ['self: Any', 'query: str'] Returns: Any</p>"},{"location":"api/scripts_gui/#search_raw_logs","title":"<code>search_raw_logs</code>","text":"<p>Searches for raw logs matching the given query. Parameters: ['self: Any', 'query: str'] Returns: Any</p>"},{"location":"api/scripts_gui/#rebuild_tracker","title":"<code>rebuild_tracker</code>","text":"<p>Rebuilds the summary tracker and returns True if successful, False otherwise. Parameters: ['self: Any'] Returns: bool</p>"},{"location":"api/scripts_gui/#get_tracker_status","title":"<code>get_tracker_status</code>","text":"<p>Returns a user-friendly status string of the summary tracker. Parameters: ['self: Any'] Returns: str</p>"},{"location":"api/scripts_gui/#get_coverage_data","title":"<code>get_coverage_data</code>","text":"<p>Retrieves coverage data from the tracker for the UI heatmap. Parameters: ['self: Any'] Returns: Any</p>"},{"location":"api/scripts_gui/#get_logs","title":"<code>get_logs</code>","text":"<p>Retrieves the contents of the plain text log file as a string. Parameters: ['self: Any'] Returns: str</p>"},{"location":"api/scripts_gui/#scriptsguigui_helpers","title":"<code>scripts.gui.gui_helpers</code>","text":"<p>\ud83e\udde0 Docstring Summary</p> Section Content Description gui_helpers.py This module provides utility functions for building and customizing the Zephyrus Logger application's graphical user interface (GUI). Core features include: - Validating user input for logging and searching. - Creating and customizing Tkinter widgets (e.g. scrolled text, buttons). - Displaying alerts and messages using Tkinter's messagebox module. - Utility functions for reading and writing JSON files. Intended to provide a set of reusable functions for the GUI components of the Zephyrus Logger application. Args \u2014 Returns \u2014"},{"location":"api/scripts_gui/#functions_2","title":"\ud83d\udee0\ufe0f Functions","text":""},{"location":"api/scripts_gui/#validate_log_input","title":"<code>validate_log_input</code>","text":"<p>Returns False if the input is empty, None, or just whitespace. Logs a warning if invalid. Parameters: ['content: str'] Returns: bool</p>"},{"location":"api/scripts_gui/#get_current_date","title":"<code>get_current_date</code>","text":"<p>Returns the current date as a string in 'YYYY-MM-DD' format. :return: Current date as a string. :rtype: str Returns: str</p>"},{"location":"api/scripts_gui/#get_current_timestamp","title":"<code>get_current_timestamp</code>","text":"<p>Returns the current date and time as a formatted string (YYYY-MM-DD HH:MM:SS). Returns: str</p>"},{"location":"api/scripts_gui/#clear_text_input","title":"<code>clear_text_input</code>","text":"<p>Clears all text from the given Tkinter text entry widget. Parameters: ['entry_widget: tk.Text'] Returns: None</p>"},{"location":"api/scripts_gui/#update_status_label","title":"<code>update_status_label</code>","text":"<p>Update the text and foreground color of a Tkinter label widget. Parameters: ['label: tk.Label', 'message: str', 'color: str'] Returns: None</p>"},{"location":"api/scripts_gui/#get_selected_option","title":"<code>get_selected_option</code>","text":"<p>Returns the currently selected option from a Tkinter menu variable, or a default value if none is selected. Parameters: ['menu_var: tk.Variable', 'default: str'] Returns: str</p>"},{"location":"api/scripts_gui/#append_log_entry","title":"<code>append_log_entry</code>","text":"<p>Appends a log entry with a timestamp and content to the specified log file, organizing entries by date, category, and subcategory. Parameters: ['log_file: str', 'date: str', 'category: str', 'subcategory: str', 'entry_text: str'] Returns: None</p>"},{"location":"api/scripts_gui/#get_category_options","title":"<code>get_category_options</code>","text":"<p>Retrieves a list of category names from a JSON file at the given path. Parameters: ['categories_json_path: str'] Returns: list</p>"},{"location":"api/scripts_gui/#create_status_label","title":"<code>create_status_label</code>","text":"<p>Create and pack a status label widget in the given root window. Parameters: ['root: tk.Tk', 'status_var: tk.StringVar'] Returns: tk.Label</p>"},{"location":"api/scripts_gui/#create_log_frame","title":"<code>create_log_frame</code>","text":"<p>Creates and returns a disabled scrolled text widget within a frame for logging purposes in a Tkinter GUI. Parameters: ['root: tk.Tk'] Returns: tuple</p>"},{"location":"api/scripts_gui/#log_message","title":"<code>log_message</code>","text":"<p>Appends a timestamped message to the provided Tkinter text widget for logging purposes. Parameters: ['log_text_widget: tk.Text', 'message: str'] Returns: None</p>"},{"location":"api/scripts_gui/#create_dropdown_menu","title":"<code>create_dropdown_menu</code>","text":"<p>Creates a labeled dropdown menu (OptionMenu) in the given Tkinter frame. Parameters: ['frame: tk.Frame', 'label_text: str', 'variable: tk.Variable', 'options: list'] Returns: tk.OptionMenu</p>"},{"location":"api/scripts_gui/#create_button","title":"<code>create_button</code>","text":"<p>Creates and returns a Tkinter Button widget with customizable text, command, size, and colors. Parameters: ['frame: tk.Widget', 'text: str', 'command: callable', 'width: int', 'height: int', 'bg: str', 'fg: str'] Returns: tk.Button</p>"},{"location":"api/scripts_gui/#show_messagebox","title":"<code>show_messagebox</code>","text":"<p>Displays a message box with the specified icon, title, and message using tkinter. Parameters: ['icon: str', 'title: str', 'message: str'] Returns: None</p>"},{"location":"api/scripts_gui/#create_text_entry","title":"<code>create_text_entry</code>","text":"<p>Creates a text entry widget for user input. Parameters: ['root: tk.Widget', 'height: int', 'width: int'] Returns: tk.Text</p>"},{"location":"api/scripts_gui/#format_summary_results","title":"<code>format_summary_results</code>","text":"<p>Formats a list of result items into a readable summary string. Each result can be a dict with 'score' and 'text' keys, a tuple/list with score and text, or any other type, which will be converted to string with a default score of 0.0. Handles exceptions gracefully and includes error information in the output. Parameters: ['results: list'] Returns: str</p>"},{"location":"api/scripts_gui/#format_raw_results","title":"<code>format_raw_results</code>","text":"<p>Formats a list of raw result items into a readable string. Each result is processed based on its type (dict, list/tuple, or other), and formatted with a '[RAW LOG MATCH]' prefix. Handles exceptions by including error details in the output. Parameters: ['results: list'] Returns: str</p>"},{"location":"api/scripts_gui/#display_message","title":"<code>display_message</code>","text":"<p>Displays an informational message box. Parameters: ['title: str', 'message: str'] Returns: None</p>"},{"location":"api/scripts_gui/#display_error","title":"<code>display_error</code>","text":"<p>Displays an error message box. Parameters: ['title: str', 'message: str'] Returns: None</p>"},{"location":"api/scripts_gui/#format_coverage_data","title":"<code>format_coverage_data</code>","text":"<p>Formats the structured coverage data into a readable string grouped by main category. Parameters: ['data: list[dict]'] Returns: str</p>"},{"location":"api/scripts_gui/#scriptsguigui_logging","title":"<code>scripts.gui.gui_logging</code>","text":"<p>\ud83e\udde0 Docstring Summary</p> Section Content Description gui_logging.py This module provides a logging handler that appends log messages to a Tkinter Text widget. Args \u2014 Returns \u2014"},{"location":"api/scripts_gui/#classes_2","title":"\ud83d\udce6 Classes","text":""},{"location":"api/scripts_gui/#guiloghandler","title":"<code>GUILogHandler</code>","text":"<p>A logging handler that appends log messages to a Tkinter Text widget. Parameters: ['self: Any', 'text_widget: tk.Text'] Returns: None</p>"},{"location":"api/scripts_gui/#functions_3","title":"\ud83d\udee0\ufe0f Functions","text":""},{"location":"api/scripts_gui/#__init___2","title":"<code>__init__</code>","text":"<p>:param text_widget: The Text widget where log messages should be appended. Parameters: ['self: Any', 'text_widget: tk.Text'] Returns: None</p>"},{"location":"api/scripts_gui/#emit","title":"<code>emit</code>","text":"<p>Emits a log message to the associated Text widget. :param record: logging.LogRecord Parameters: ['self: Any', 'record: logging.LogRecord'] Returns: None</p>"},{"location":"api/scripts_gui/#append_message","title":"<code>append_message</code>","text":"<p>Appends a log message to the associated Text widget. This method is designed to be called from the main thread, and will block until the message is appended. Parameters: ['self: Any', 'msg: str'] Returns: None</p>"},{"location":"api/scripts_gui/#scriptsguistyle_manager","title":"<code>scripts.gui.style_manager</code>","text":"<p>\ud83e\udde0 Docstring Summary</p> Section Content Description style_manager.py This module defines the StyleManager class for managing application-wide styles for tkinter and ttk. Core features include: - Managing application-wide styles for tkinter and ttk. - Defining default colors and fonts. - Configuring ttk styles. - Updating specific styles with new options. Args \u2014 Returns \u2014"},{"location":"api/scripts_gui/#classes_3","title":"\ud83d\udce6 Classes","text":""},{"location":"api/scripts_gui/#stylemanager","title":"<code>StyleManager</code>","text":"<p>Manages application-wide styles for tkinter and ttk. This class can be extended to handle dynamic theme changes. Attributes: root (Tk): The root Tkinter window. style (ttk.Style): The ttk style manager instance. Parameters: ['self: Any', 'root: Tk.Tk'] Returns: None</p>"},{"location":"api/scripts_gui/#functions_4","title":"\ud83d\udee0\ufe0f Functions","text":""},{"location":"api/scripts_gui/#__init___3","title":"<code>__init__</code>","text":"<p>Initializes the StyleManager with the specified root window. Parameters: ['self: Any', 'root: Tk.Tk'] Returns: None</p>"},{"location":"api/scripts_gui/#initialize_styles","title":"<code>initialize_styles</code>","text":"<p>Defines default colors and fonts and configures ttk styles. Parameters: ['self: Any'] Returns: None</p>"},{"location":"api/scripts_gui/#update_style","title":"<code>update_style</code>","text":"<p>Update a specific style with new options. Parameters: ['self: Any', 'style_name: str', 'options: Dict[str, Any]'] Returns: None</p>"},{"location":"api/scripts_gui/#scriptsguiwidget_factory","title":"<code>scripts.gui.widget_factory</code>","text":"<p>\ud83e\udde0 Docstring Summary</p> Section Content Description widget_factory.py This module defines the WidgetFactory class for creating common widgets with standardized styling. Core features include: - Creating styled buttons, labels, entries, frames, and notebooks for Tkinter applications. - Providing a consistent look and feel across the application. Args \u2014 Returns \u2014"},{"location":"api/scripts_gui/#classes_4","title":"\ud83d\udce6 Classes","text":""},{"location":"api/scripts_gui/#widgetfactory","title":"<code>WidgetFactory</code>","text":"<p>Factory for creating common widgets with standardized styling. This class provides static methods to create buttons, labels, entries, frames, and notebooks with consistent styles. Returns: None</p>"},{"location":"api/scripts_gui/#functions_5","title":"\ud83d\udee0\ufe0f Functions","text":""},{"location":"api/scripts_gui/#create_button_1","title":"<code>create_button</code>","text":"<p>Create and return a styled ttk Button. Parameters: ['parent: tk.Widget', 'text: str', 'command: callable', 'style: str', 'options'] Returns:** ttk.Button</p>"},{"location":"api/scripts_gui/#create_label","title":"<code>create_label</code>","text":"<p>Create and return a styled ttk Label. Parameters: ['parent: tk.Widget', 'text: str', 'style: str', 'options'] Returns:** ttk.Label</p>"},{"location":"api/scripts_gui/#create_entry","title":"<code>create_entry</code>","text":"<p>Create and return a ttk Entry widget. Parameters: ['parent: tk.Widget', 'textvariable: Any', 'options'] Returns:** ttk.Entry</p>"},{"location":"api/scripts_gui/#create_frame","title":"<code>create_frame</code>","text":"<p>Create and return a ttk Frame widget. Parameters: ['parent: tk.Widget', 'style: str', 'options'] Returns:** ttk.Frame</p>"},{"location":"api/scripts_gui/#create_notebook","title":"<code>create_notebook</code>","text":"<p>Create and return a ttk Notebook widget. Parameters: ['parent: tk.Widget', 'options'] Returns:** ttk.Notebook</p>"},{"location":"api/scripts_gui_base/","title":"<code>scripts/gui/base</code>","text":""},{"location":"api/scripts_gui_base/#scriptsguibase__init__","title":"<code>scripts.gui.base.__init__</code>","text":"<p>\ud83e\udde0 Docstring Summary</p> Section Content Description No module description available. Args \u2014 Returns \u2014"},{"location":"api/scripts_gui_base/#scriptsguibasebase_panel","title":"<code>scripts.gui.base.base_panel</code>","text":"<p>\ud83e\udde0 Docstring Summary</p> Section Content Description base_panel.py This module defines the BasePanel class, which provides common functionality for all UI panels. Core features include: - Providing a base class for panels with consistent styling. - Allowing subclasses to implement specific UI components and refresh logic. Args \u2014 Returns \u2014"},{"location":"api/scripts_gui_base/#classes","title":"\ud83d\udce6 Classes","text":""},{"location":"api/scripts_gui_base/#basepanel","title":"<code>BasePanel</code>","text":"<p>BasePanel provides common functionality for all UI panels. Inherits from ttk.Frame to leverage consistent styling. Attributes: controller (Optional[object]): The controller for handling panel actions. Parameters: ['self: Any', 'parent: tk.Widget', 'controller: Optional[object]', 'kwargs'] Returns:** None</p>"},{"location":"api/scripts_gui_base/#functions","title":"\ud83d\udee0\ufe0f Functions","text":""},{"location":"api/scripts_gui_base/#__init__","title":"<code>__init__</code>","text":"<p>Initializes the BasePanel with the specified parent and controller. Parameters: ['self: Any', 'parent: tk.Widget', 'controller: Optional[object]', 'kwargs'] Returns:** None</p>"},{"location":"api/scripts_gui_base/#initialize_ui","title":"<code>initialize_ui</code>","text":"<p>Set up UI components for the panel. Override this method in subclasses to build specific panel content. Parameters: ['self: Any'] Returns: None</p>"},{"location":"api/scripts_gui_base/#refresh","title":"<code>refresh</code>","text":"<p>Refresh the panel content. Override this method in subclasses if needed. Parameters: ['self: Any'] Returns: None</p>"},{"location":"api/scripts_gui_base/#scriptsguibasebase_tab","title":"<code>scripts.gui.base.base_tab</code>","text":"<p>\ud83e\udde0 Docstring Summary</p> Section Content Description base_tab.py This module defines the BaseTab class, which provides a common structure for major tabs in the application. Core features include: - Providing a base class for tabs with consistent styling. - Allowing subclasses to implement specific tab components and behavior. Args \u2014 Returns \u2014"},{"location":"api/scripts_gui_base/#classes_1","title":"\ud83d\udce6 Classes","text":""},{"location":"api/scripts_gui_base/#basetab","title":"<code>BaseTab</code>","text":"<p>BaseTab provides a common structure for major tabs in the application. Inherits from ttk.Frame for consistent styling. Attributes: controller (Optional[object]): The controller for handling tab actions. Parameters: ['self: Any', 'parent: tk.Widget', 'controller: Optional[object]', 'kwargs'] Returns:** None</p>"},{"location":"api/scripts_gui_base/#functions_1","title":"\ud83d\udee0\ufe0f Functions","text":""},{"location":"api/scripts_gui_base/#__init___1","title":"<code>__init__</code>","text":"<p>Initializes the BaseTab with the specified parent and controller. Parameters: ['self: Any', 'parent: tk.Widget', 'controller: Optional[object]', 'kwargs'] Returns:** None</p>"},{"location":"api/scripts_gui_base/#setup_tab","title":"<code>setup_tab</code>","text":"<p>Set up the tab contents. Override this method in subclasses to build tab-specific components. Parameters: ['self: Any'] Returns: None</p>"},{"location":"api/scripts_gui_base/#on_show","title":"<code>on_show</code>","text":"<p>Called when the tab becomes active. Override to update or refresh content when the tab is shown. Parameters: ['self: Any'] Returns: None</p>"},{"location":"api/scripts_gui_panels/","title":"<code>scripts/gui/panels</code>","text":""},{"location":"api/scripts_gui_panels/#scriptsguipanels__init__","title":"<code>scripts.gui.panels.__init__</code>","text":"<p>\ud83e\udde0 Docstring Summary</p> Section Content Description No module description available. Args \u2014 Returns \u2014"},{"location":"api/scripts_gui_panels/#scriptsguipanelsaction_panel","title":"<code>scripts.gui.panels.action_panel</code>","text":"<p>\ud83e\udde0 Docstring Summary</p> Section Content Description action_panel.py This module defines the ActionPanel class, which hosts buttons for actions such as summarizing or rebuilding. Core features include: - Creating buttons for summarizing and rebuilding functionality. - Integrating with the application controller to trigger actions. Args \u2014 Returns \u2014"},{"location":"api/scripts_gui_panels/#classes","title":"\ud83d\udce6 Classes","text":""},{"location":"api/scripts_gui_panels/#actionpanel","title":"<code>ActionPanel</code>","text":"<p>ActionPanel hosts buttons for actions such as summarizing or rebuilding. Attributes: frame (Optional[ttk.Frame]): The frame containing the action buttons. summarize_button (Optional[ttk.Button]): The button for summarizing logs. rebuild_button (Optional[ttk.Button]): The button for rebuilding the tracker. Parameters: ['self: Any', 'parent: tk.Widget', 'controller: Optional[object]', 'kwargs'] Returns:** None</p>"},{"location":"api/scripts_gui_panels/#functions","title":"\ud83d\udee0\ufe0f Functions","text":""},{"location":"api/scripts_gui_panels/#__init__","title":"<code>__init__</code>","text":"<p>Initializes the ActionPanel with the specified parent and controller. Parameters: ['self: Any', 'parent: tk.Widget', 'controller: Optional[object]', 'kwargs'] Returns:** None</p>"},{"location":"api/scripts_gui_panels/#initialize_ui","title":"<code>initialize_ui</code>","text":"<p>Creates and packs the action buttons into the panel. Parameters: ['self: Any'] Returns: None</p>"},{"location":"api/scripts_gui_panels/#on_summarize","title":"<code>on_summarize</code>","text":"<p>Trigger the controller's summarize function if available. Parameters: ['self: Any'] Returns: None</p>"},{"location":"api/scripts_gui_panels/#on_rebuild","title":"<code>on_rebuild</code>","text":"<p>Trigger the controller's rebuild_tracker function if available. Parameters: ['self: Any'] Returns: None</p>"},{"location":"api/scripts_gui_panels/#refresh","title":"<code>refresh</code>","text":"<p>Action panel may not need refreshing, but this hook is here if needed. Parameters: ['self: Any'] Returns: None</p>"},{"location":"api/scripts_gui_panels/#scriptsguipanelscoverage_panel","title":"<code>scripts.gui.panels.coverage_panel</code>","text":"<p>\ud83e\udde0 Docstring Summary</p> Section Content Description coverage_panel.py This module defines the CoveragePanel class, which displays coverage metrics in a tree view. Core features include: - Displaying coverage metrics for various categories. - Integrating with the application controller to fetch coverage data. Args \u2014 Returns \u2014"},{"location":"api/scripts_gui_panels/#classes_1","title":"\ud83d\udce6 Classes","text":""},{"location":"api/scripts_gui_panels/#coveragepanel","title":"<code>CoveragePanel</code>","text":"<p>CoveragePanel displays coverage metrics in a tree view. Attributes: frame (Optional[ttk.LabelFrame]): The frame containing the coverage metrics. tree (Optional[ttk.Treeview]): The tree view for displaying coverage data. Parameters: ['self: Any', 'parent: tk.Widget', 'controller: Optional[object]', 'kwargs'] Returns:** None</p>"},{"location":"api/scripts_gui_panels/#functions_1","title":"\ud83d\udee0\ufe0f Functions","text":""},{"location":"api/scripts_gui_panels/#__init___1","title":"<code>__init__</code>","text":"<p>Initializes the CoveragePanel with the specified parent and controller. Parameters: ['self: Any', 'parent: tk.Widget', 'controller: Optional[object]', 'kwargs'] Returns:** None</p>"},{"location":"api/scripts_gui_panels/#initialize_ui_1","title":"<code>initialize_ui</code>","text":"<p>Creates and packs the user interface components for the coverage panel. Parameters: ['self: Any'] Returns: None</p>"},{"location":"api/scripts_gui_panels/#refresh_1","title":"<code>refresh</code>","text":"<p>Refreshes the coverage data displayed in the tree view. Parameters: ['self: Any'] Returns: None</p>"},{"location":"api/scripts_gui_panels/#scriptsguipanelsentry_panel","title":"<code>scripts.gui.panels.entry_panel</code>","text":"<p>\ud83e\udde0 Docstring Summary</p> Section Content Description entry_panel.py This module defines the EntryPanel class, which provides the interface for creating new log entries. Core features include: - Allowing users to enter and submit new log entries. - Integrating with the application controller to handle log submission. Args \u2014 Returns \u2014"},{"location":"api/scripts_gui_panels/#classes_2","title":"\ud83d\udce6 Classes","text":""},{"location":"api/scripts_gui_panels/#entrypanel","title":"<code>EntryPanel</code>","text":"<p>EntryPanel provides the interface for creating new log entries. Attributes: frame (Optional[ttk.LabelFrame]): The frame containing the entry interface. entry_text (Optional[tk.Text]): The text widget for entering log content. submit_button (Optional[ttk.Button]): The button for submitting the log entry. Parameters: ['self: Any', 'parent: tk.Widget', 'controller: Optional[object]', 'kwargs'] Returns:** None</p>"},{"location":"api/scripts_gui_panels/#functions_2","title":"\ud83d\udee0\ufe0f Functions","text":""},{"location":"api/scripts_gui_panels/#__init___2","title":"<code>__init__</code>","text":"<p>Initializes the EntryPanel with the specified parent and controller. Parameters: ['self: Any', 'parent: tk.Widget', 'controller: Optional[object]', 'kwargs'] Returns:** None</p>"},{"location":"api/scripts_gui_panels/#initialize_ui_2","title":"<code>initialize_ui</code>","text":"<p>Creates and packs the user interface components for the entry panel. Parameters: ['self: Any'] Returns: None</p>"},{"location":"api/scripts_gui_panels/#on_submit","title":"<code>on_submit</code>","text":"<p>Handles the submission of a new log entry. Retrieves text from the text widget and submits it to the controller if available. Parameters: ['self: Any'] Returns: None</p>"},{"location":"api/scripts_gui_panels/#refresh_2","title":"<code>refresh</code>","text":"<p>Clears the text area when refreshing, if needed. Parameters: ['self: Any'] Returns: None</p>"},{"location":"api/scripts_gui_panels/#scriptsguipanelslog_panel","title":"<code>scripts.gui.panels.log_panel</code>","text":"<p>\ud83e\udde0 Docstring Summary</p> Section Content Description log_panel.py This module defines the LogPanel class, which manages the display area for logs. Core features include: - Displaying log entries in a scrollable text area. - Integrating with the application controller to fetch log data. Args \u2014 Returns \u2014"},{"location":"api/scripts_gui_panels/#classes_3","title":"\ud83d\udce6 Classes","text":""},{"location":"api/scripts_gui_panels/#logpanel","title":"<code>LogPanel</code>","text":"<p>LogPanel manages the display area for logs. Attributes: frame (ttk.LabelFrame): The frame containing the log display. log_display (scrolledtext.ScrolledText): The text area for displaying log entries. Parameters: ['self: Any', 'parent: tk.Widget', 'controller: Optional[object]', 'kwargs'] Returns:** None</p>"},{"location":"api/scripts_gui_panels/#functions_3","title":"\ud83d\udee0\ufe0f Functions","text":""},{"location":"api/scripts_gui_panels/#__init___3","title":"<code>__init__</code>","text":"<p>Initializes the LogPanel with the specified parent and controller. Parameters: ['self: Any', 'parent: tk.Widget', 'controller: Optional[object]', 'kwargs'] Returns:** None</p>"},{"location":"api/scripts_gui_panels/#initialize_ui_3","title":"<code>initialize_ui</code>","text":"<p>Creates and packs the user interface components for the log panel. Parameters: ['self: Any'] Returns: None</p>"},{"location":"api/scripts_gui_panels/#refresh_3","title":"<code>refresh</code>","text":"<p>Refreshes the log display area by fetching logs from the controller. Parameters: ['self: Any'] Returns: None</p>"},{"location":"api/scripts_gui_tabs/","title":"<code>scripts/gui/tabs</code>","text":""},{"location":"api/scripts_gui_tabs/#scriptsguitabs__init__","title":"<code>scripts.gui.tabs.__init__</code>","text":"<p>\ud83e\udde0 Docstring Summary</p> Section Content Description No module description available. Args \u2014 Returns \u2014"},{"location":"api/scripts_gui_tabs/#scriptsguitabsmain_tab","title":"<code>scripts.gui.tabs.main_tab</code>","text":"<p>\ud83e\udde0 Docstring Summary</p> Section Content Description main_tab.py This module defines the MainTab class, which is the primary tab for logging functionality in the application. Core features include: - Organizing child panels for logging, coverage, entry, and actions. - Refreshing child panels when the tab becomes active. Args \u2014 Returns \u2014"},{"location":"api/scripts_gui_tabs/#classes","title":"\ud83d\udce6 Classes","text":""},{"location":"api/scripts_gui_tabs/#maintab","title":"<code>MainTab</code>","text":"<p>MainTab is the primary tab for logging functionality. It organizes child panels: LogPanel, CoveragePanel, EntryPanel, and ActionPanel. Attributes: log_panel (LogPanel): The panel for displaying logs. coverage_panel (CoveragePanel): The panel for displaying coverage information. entry_panel (EntryPanel): The panel for entering new log entries. action_panel (ActionPanel): The panel for action buttons. Returns: None</p>"},{"location":"api/scripts_gui_tabs/#functions","title":"\ud83d\udee0\ufe0f Functions","text":""},{"location":"api/scripts_gui_tabs/#setup_tab","title":"<code>setup_tab</code>","text":"<p>Create a container frame to hold the child panels and pack them into the tab. Parameters: ['self: Any'] Returns: None</p>"},{"location":"api/scripts_gui_tabs/#on_show","title":"<code>on_show</code>","text":"<p>Called when the MainTab becomes active. This refreshes all child panels. Parameters: ['self: Any'] Returns: None</p>"},{"location":"api/scripts_indexers/","title":"<code>scripts/indexers</code>","text":""},{"location":"api/scripts_indexers/#scriptsindexers__init__","title":"<code>scripts.indexers.__init__</code>","text":"<p>\ud83e\udde0 Docstring Summary</p> Section Content Description The <code>indexers</code> module provides classes and utilities for building, managing, and searching vector indexes over log and summary data. Core features include: - Construction of FAISS indexes for both raw log entries and summarized corrections. - Support for semantic search using SentenceTransformer embeddings. - Management of index and metadata persistence for efficient retrieval. - Utilities for rebuilding, updating, and searching indexes across different data granularities. This module enables fast and flexible semantic search over structured and unstructured idea logs, supporting downstream applications such as idea retrieval, analytics, and intelligent querying. Args \u2014 Returns \u2014"},{"location":"api/scripts_indexers/#scriptsindexersbase_indexer","title":"<code>scripts.indexers.base_indexer</code>","text":"<p>\ud83e\udde0 Docstring Summary</p> Section Content Description base_indexer.py This module defines the BaseIndexer class, which provides core functionality for building, saving, loading, and searching FAISS vector indexes over log and summary data. Core features include: - Initializing index and metadata paths based on project configuration and index type (summary or raw). - Building a FAISS index from text data using SentenceTransformer embeddings. - Saving and loading both the FAISS index and associated metadata. - Performing semantic search over indexed data, returning the most relevant results with similarity scores. - Supporting flexible configuration and robust error handling for index operations. Intended for use as a base class for specialized indexers in the Zephyrus project, enabling fast and flexible semantic search over structured logs and summaries. Args \u2014 Returns \u2014"},{"location":"api/scripts_indexers/#classes","title":"\ud83d\udce6 Classes","text":""},{"location":"api/scripts_indexers/#baseindexer","title":"<code>BaseIndexer</code>","text":"<p>No description available. Parameters: ['self: Any', 'paths: ZephyrusPaths', 'index_name: str'] Returns: None</p>"},{"location":"api/scripts_indexers/#functions","title":"\ud83d\udee0\ufe0f Functions","text":""},{"location":"api/scripts_indexers/#__init__","title":"<code>__init__</code>","text":"<p>Initializes the BaseIndexer object. Sets the paths to the summaries file, FAISS index file, and metadata file based on the provided <code>index_name</code> and the <code>ZephyrusPaths</code> object.  If <code>index_name</code> is \"summary\", the paths are set to the correction summaries file, FAISS index file, and metadata file. If <code>index_name</code> is \"raw\", the paths are set to the JSON log file, raw log index file, and raw log metadata file.  In all other cases, a ValueError is raised. Also, loads the SentenceTransformer model specified by the \"embedding_model\" configuration key, or defaults to \"all-MiniLM-L6-v2\" if the key is missing. Parameters: ['self: Any', 'paths: ZephyrusPaths', 'index_name: str'] Returns: None</p>"},{"location":"api/scripts_indexers/#_load_model","title":"<code>_load_model</code>","text":"<p>No description available. Parameters: ['self: Any'] Returns: Any</p>"},{"location":"api/scripts_indexers/#load_index","title":"<code>load_index</code>","text":"<p>Loads the FAISS index and associated metadata from their respective files. This method reads the index from the file specified by <code>self.index_path</code> and loads the metadata from the file specified by <code>self.metadata_path</code>. If either file does not exist, a FileNotFoundError is raised. Raises: FileNotFoundError: If the index file or metadata file is not found. Parameters: ['self: Any'] Returns: None</p>"},{"location":"api/scripts_indexers/#search","title":"<code>search</code>","text":"<p>Searches the FAISS index for the given query and returns the top-k most relevant results. Parameters: ['self: Any', 'query: str', 'top_k: int'] Returns: List[Dict[str, Any]]</p>"},{"location":"api/scripts_indexers/#build_index","title":"<code>build_index</code>","text":"<p>Builds a FAISS index from provided texts and metadata. Parameters: ['self: Any', 'texts: List[str]', 'meta: List[Dict[str, Any]]', 'fail_on_empty: bool'] Returns: bool</p>"},{"location":"api/scripts_indexers/#save_index","title":"<code>save_index</code>","text":"<p>Saves the FAISS index to a file, and the associated metadata. This method must be called after <code>build_index</code> or <code>load_index</code> has been called. Parameters: ['self: Any'] Returns: None</p>"},{"location":"api/scripts_indexers/#scriptsindexersraw_log_indexer","title":"<code>scripts.indexers.raw_log_indexer</code>","text":"<p>\ud83e\udde0 Docstring Summary</p> Section Content Description This module defines the RawLogIndexer class for building and managing a FAISS vector index over raw log entries from zephyrus_log.json. Core features: - Loading and parsing raw log entries by date, main category, and subcategory. - Extracting entry content and metadata for semantic indexing. - Building, saving, loading, and rebuilding a FAISS index for full-text vector search. - Robust error handling and logging for file I/O and data processing. - Designed for use in the Zephyrus project to enable fast, flexible semantic search. Args \u2014 Returns \u2014"},{"location":"api/scripts_indexers/#classes_1","title":"\ud83d\udce6 Classes","text":""},{"location":"api/scripts_indexers/#rawlogindexer","title":"<code>RawLogIndexer</code>","text":"<p>Builds a FAISS index from raw entries in zephyrus_log.json. Used for full-text vector search across all logged ideas (not just summaries). Attributes: log_path (str): The path to the JSON log file. Parameters: ['self: Any', 'paths: ZephyrusPaths', 'autoload: bool'] Returns: None</p>"},{"location":"api/scripts_indexers/#functions_1","title":"\ud83d\udee0\ufe0f Functions","text":""},{"location":"api/scripts_indexers/#__init___1","title":"<code>__init__</code>","text":"<p>Initializes the RawLogIndexer with the specified paths and optionally loads the index. Parameters: ['self: Any', 'paths: ZephyrusPaths', 'autoload: bool'] Returns: None</p>"},{"location":"api/scripts_indexers/#load_entries","title":"<code>load_entries</code>","text":"<p>Loads raw entries from the zephyrus_log.json file. Parameters: ['self: Any'] Returns: Tuple[List[str], List[Dict[str, Any]]]</p>"},{"location":"api/scripts_indexers/#_process_categories","title":"<code>_process_categories</code>","text":"<p>Processes categories for a given date, updating the texts and metadata. Parameters: ['self: Any', 'date: str', 'categories: Dict[str, Any]', 'texts: List[str]', 'meta: List[Dict[str, Any]]'] Returns: Tuple[List[str], List[Dict[str, Any]]]</p>"},{"location":"api/scripts_indexers/#_process_subcategories","title":"<code>_process_subcategories</code>","text":"<p>Processes subcategories within a main category for a given date. Parameters: ['self: Any', 'date: str', 'main_cat: str', 'subcats: Dict[str, Any]', 'texts: List[str]', 'meta: List[Dict[str, Any]]'] Returns: Tuple[List[str], List[Dict[str, Any]]]</p>"},{"location":"api/scripts_indexers/#_process_entries","title":"<code>_process_entries</code>","text":"<p>Processes a list of entries for a given date, main category, and subcategory. Parameters: ['self: Any', 'date: str', 'main_cat: str', 'subcat: str', 'entries: List[Any]', 'texts: List[str]', 'meta: List[Dict[str, Any]]'] Returns: Tuple[List[str], List[Dict[str, Any]]]</p>"},{"location":"api/scripts_indexers/#build_index_from_logs","title":"<code>build_index_from_logs</code>","text":"<p>Loads entries from file and rebuilds FAISS index. Parameters: ['self: Any'] Returns: bool</p>"},{"location":"api/scripts_indexers/#rebuild","title":"<code>rebuild</code>","text":"<p>Rebuilds the raw log index from scratch. This method loads entries from the log file, rebuilds the FAISS index, and saves the new index. Raises: Exception: If an error occurs while rebuilding the index. Parameters: ['self: Any'] Returns: None</p>"},{"location":"api/scripts_indexers/#scriptsindexerssummary_indexer","title":"<code>scripts.indexers.summary_indexer</code>","text":"<p>\ud83e\udde0 Docstring Summary</p> Section Content Description summary_indexer.py This module defines the SummaryIndexer class for building and managing a FAISS vector index over summarized entries from correction_summaries.json. Core features include: - Loading and parsing summarized entries organized by date, main category, and subcategory. - Extracting summary texts and associated metadata for semantic indexing. - Building, saving, loading, and rebuilding a FAISS index for semantic search across all summarized corrections. - Robust error handling and logging for file I/O and data processing. - Designed for use in the Zephyrus project to enable fast, flexible semantic search over all summarized log data. Args \u2014 Returns \u2014"},{"location":"api/scripts_indexers/#classes_2","title":"\ud83d\udce6 Classes","text":""},{"location":"api/scripts_indexers/#summaryindexer","title":"<code>SummaryIndexer</code>","text":"<p>Builds a FAISS index from summarized entries in correction_summaries.json. Core features include loading and parsing summarized entries, extracting summary texts, and managing the FAISS index for semantic search. Parameters: ['self: Any', 'paths: ZephyrusPaths', 'autoload: bool'] Returns: None</p>"},{"location":"api/scripts_indexers/#functions_2","title":"\ud83d\udee0\ufe0f Functions","text":""},{"location":"api/scripts_indexers/#__init___2","title":"<code>__init__</code>","text":"<p>Initializes a SummaryIndexer object. Parameters: ['self: Any', 'paths: ZephyrusPaths', 'autoload: bool'] Returns: None</p>"},{"location":"api/scripts_indexers/#load_entries_1","title":"<code>load_entries</code>","text":"<p>Loads summarized entries from the correction_summaries.json file. Parameters: ['self: Any'] Returns: Tuple[List[str], List[Dict[str, Any]]]</p>"},{"location":"api/scripts_indexers/#_process_categories_1","title":"<code>_process_categories</code>","text":"<p>No description available. Parameters: ['self: Any', 'date: str', 'categories: Dict[str, Any]', 'texts: List[str]', 'meta: List[Dict[str, Any]]'] Returns: Tuple[List[str], List[Dict[str, Any]]]</p>"},{"location":"api/scripts_indexers/#_process_subcategories_1","title":"<code>_process_subcategories</code>","text":"<p>No description available. Parameters: ['self: Any', 'date: str', 'main_cat: str', 'subcats: Dict[str, Any]', 'texts: List[str]', 'meta: List[Dict[str, Any]]'] Returns: Tuple[List[str], List[Dict[str, Any]]]</p>"},{"location":"api/scripts_indexers/#_process_batches","title":"<code>_process_batches</code>","text":"<p>No description available. Parameters: ['self: Any', 'date: str', 'main_cat: str', 'subcat: str', 'batches: List[Any]', 'texts: List[str]', 'meta: List[Dict[str, Any]]'] Returns: Tuple[List[str], List[Dict[str, Any]]]</p>"},{"location":"api/scripts_indexers/#load_index_1","title":"<code>load_index</code>","text":"<p>Load the FAISS index and associated metadata from their respective files. Raises: FileNotFoundError: If the index file or metadata file is not found. Parameters: ['self: Any'] Returns: None</p>"},{"location":"api/scripts_indexers/#save_index_1","title":"<code>save_index</code>","text":"<p>Save the FAISS index and associated metadata to their respective files. This method delegates to the BaseIndexer implementation. Parameters: ['self: Any'] Returns: None</p>"},{"location":"api/scripts_indexers/#rebuild_index","title":"<code>rebuild_index</code>","text":"<p>Rebuild the FAISS index from the summarized entries. This method invokes building index from logs and saving it. Parameters: ['self: Any'] Returns: None</p>"},{"location":"api/scripts_indexers/#build_index_from_logs_1","title":"<code>build_index_from_logs</code>","text":"<p>Loads entries from file and rebuilds FAISS index. Parameters: ['self: Any'] Returns: bool</p>"},{"location":"api/scripts_indexers/#rebuild_1","title":"<code>rebuild</code>","text":"<p>Rebuild the summary index from scratch. Parameters: ['self: Any'] Returns: None</p>"},{"location":"api/scripts_kg/","title":"<code>scripts/kg</code>","text":""},{"location":"api/scripts_kg/#scriptskg__init__","title":"<code>scripts.kg.__init__</code>","text":"<p>\ud83e\udde0 Docstring Summary</p> Section Content Description No module description available. Args \u2014 Returns \u2014"},{"location":"api/scripts_kg/#scriptskggenerate_codebase_kg","title":"<code>scripts.kg.generate_codebase_kg</code>","text":"<p>\ud83e\udde0 Docstring Summary</p> Section Content Description generate_codebase_kg.py Builds Knowledge Graphs for a Python codebase using docstring summaries. Analyzes module complexity (density, degree, busyness). Colors graphs based on complexity. Usage: - Load JSON docstring summary - Build Parent Graph (subpackages) - Build Child Graphs (per subpackage) - Analyze complexity - Visualize with color-coding Args \u2014 Returns \u2014"},{"location":"api/scripts_kg/#functions","title":"\ud83d\udee0\ufe0f Functions","text":""},{"location":"api/scripts_kg/#main","title":"<code>main</code>","text":"<p>Main entry point for the script. Parses command-line arguments and initializes the CodebaseAnalyzer. Returns: Any</p>"},{"location":"api/scripts_kg_modules/","title":"<code>scripts/kg/modules</code>","text":""},{"location":"api/scripts_kg_modules/#scriptskgmodules__init__","title":"<code>scripts.kg.modules.__init__</code>","text":"<p>\ud83e\udde0 Docstring Summary</p> Section Content Description No module description available. Args \u2014 Returns \u2014"},{"location":"api/scripts_kg_modules/#scriptskgmodulesanalysis","title":"<code>scripts.kg.modules.analysis</code>","text":"<p>\ud83e\udde0 Docstring Summary</p> Section Content Description Complexity Analysis for Knowledge Graphs =============================== This module provides tools for analyzing the complexity of knowledge graphs. It includes metrics for density, degree, busyness, and overall complexity scores. Args \u2014 Returns \u2014"},{"location":"api/scripts_kg_modules/#classes","title":"\ud83d\udce6 Classes","text":""},{"location":"api/scripts_kg_modules/#complexityanalyzer","title":"<code>ComplexityAnalyzer</code>","text":"<p>Analyzes graph complexity using various metrics. Attributes: None Methods: analyze_density: Analyzes the density and complexity of a given graph. Returns: None</p>"},{"location":"api/scripts_kg_modules/#functions","title":"\ud83d\udee0\ufe0f Functions","text":""},{"location":"api/scripts_kg_modules/#analyze_density","title":"<code>analyze_density</code>","text":"<p>Analyze the density and complexity of a given graph. Parameters: ['graph: nx.Graph', 'name: str'] Returns: Dict[str, Any]</p>"},{"location":"api/scripts_kg_modules/#scriptskgmodulesdata_extractors","title":"<code>scripts.kg.modules.data_extractors</code>","text":"<p>\ud83e\udde0 Docstring Summary</p> Section Content Description Data extractors for analyzing Python docstrings and extracting relationships. Args \u2014 Returns \u2014"},{"location":"api/scripts_kg_modules/#classes_1","title":"\ud83d\udce6 Classes","text":""},{"location":"api/scripts_kg_modules/#datarelationextractor","title":"<code>DataRelationExtractor</code>","text":"<p>Extracts data relations from module docstrings. Returns: None</p>"},{"location":"api/scripts_kg_modules/#functionextractor","title":"<code>FunctionExtractor</code>","text":"<p>Extracts function parameters and return values from docstrings. Returns: None</p>"},{"location":"api/scripts_kg_modules/#functions_1","title":"\ud83d\udee0\ufe0f Functions","text":""},{"location":"api/scripts_kg_modules/#extract_data_relations","title":"<code>extract_data_relations</code>","text":"<p>Extract data relations from module docstrings using pattern matching. Parameters: ['cls: Any', 'graph: nx.DiGraph', 'module_node: NodeID', 'description: str'] Returns: None</p>"},{"location":"api/scripts_kg_modules/#_add_data_node","title":"<code>_add_data_node</code>","text":"<p>Add a data node and its relation to the graph. Parameters: ['graph: nx.DiGraph', 'module_node: NodeID', 'data_node: NodeID', 'relation: str', 'confidence: float'] Returns: None</p>"},{"location":"api/scripts_kg_modules/#extract_parameters_and_returns","title":"<code>extract_parameters_and_returns</code>","text":"<p>Extract parameters and return values from a function entry. Parameters: ['fn_entry: Dict[str, Any]'] Returns: Tuple[List[str], List[str]]</p>"},{"location":"api/scripts_kg_modules/#scriptskgmodulesgraph_builder","title":"<code>scripts.kg.modules.graph_builder</code>","text":"<p>\ud83e\udde0 Docstring Summary</p> Section Content Description Knowledge graph construction and management tools. Args \u2014 Returns \u2014"},{"location":"api/scripts_kg_modules/#classes_2","title":"\ud83d\udce6 Classes","text":""},{"location":"api/scripts_kg_modules/#knowledgegraphbuilder","title":"<code>KnowledgeGraphBuilder</code>","text":"<p>Builds knowledge graphs from docmap data. Parameters: ['self: Any', 'docmap: DocMap'] Returns: None</p>"},{"location":"api/scripts_kg_modules/#codebaseanalyzer","title":"<code>CodebaseAnalyzer</code>","text":"<p>Main class for analyzing and visualizing codebase knowledge graphs. Parameters: ['self: Any', 'json_path: str', 'focus_prefix: str'] Returns: None</p>"},{"location":"api/scripts_kg_modules/#functions_2","title":"\ud83d\udee0\ufe0f Functions","text":""},{"location":"api/scripts_kg_modules/#__init__","title":"<code>__init__</code>","text":"<p>Initialize with normalized docmap data. Parameters: ['self: Any', 'docmap: DocMap'] Returns: Any</p>"},{"location":"api/scripts_kg_modules/#build_knowledge_graph","title":"<code>build_knowledge_graph</code>","text":"<p>Constructs a knowledge graph from the docmap data, optionally filtering by prefix. Parameters: ['self: Any', 'focus_prefix: Optional[str]'] Returns: nx.DiGraph</p>"},{"location":"api/scripts_kg_modules/#_build_graph","title":"<code>_build_graph</code>","text":"<p>Build the knowledge graph from the filtered docmap. Parameters: ['self: Any', 'docmap: DocMap'] Returns: nx.DiGraph</p>"},{"location":"api/scripts_kg_modules/#__init___1","title":"<code>__init__</code>","text":"<p>Initialize the analyzer with JSON data. Parameters: ['self: Any', 'json_path: str', 'focus_prefix: str'] Returns: Any</p>"},{"location":"api/scripts_kg_modules/#analyze","title":"<code>analyze</code>","text":"<p>Analyze the codebase and build knowledge graph. Parameters: ['self: Any'] Returns: Tuple[nx.DiGraph, Dict[str, Any]]</p>"},{"location":"api/scripts_kg_modules/#visualize","title":"<code>visualize</code>","text":"<p>Visualize the knowledge graph with complexity indicators. Parameters: ['self: Any', 'graph: nx.DiGraph', 'density_report: Dict[str, Any]'] Returns: None</p>"},{"location":"api/scripts_kg_modules/#export_graph","title":"<code>export_graph</code>","text":"<p>Export the graph to a file. Parameters: ['self: Any', 'graph: nx.DiGraph', 'format_type: str'] Returns: str</p>"},{"location":"api/scripts_kg_modules/#scriptskgmodulesutils","title":"<code>scripts.kg.modules.utils</code>","text":"<p>\ud83e\udde0 Docstring Summary</p> Section Content Description Utility functions for the codebase analysis and graph generation. Args \u2014 Returns \u2014"},{"location":"api/scripts_kg_modules/#classes_3","title":"\ud83d\udce6 Classes","text":""},{"location":"api/scripts_kg_modules/#docmapnormalizer","title":"<code>DocMapNormalizer</code>","text":"<p>Handles normalization of module path keys in docmap dictionaries. Returns: None</p>"},{"location":"api/scripts_kg_modules/#functions_3","title":"\ud83d\udee0\ufe0f Functions","text":""},{"location":"api/scripts_kg_modules/#load_json_file","title":"<code>load_json_file</code>","text":"<p>Load and parse a JSON file. Parameters: ['file_path: str'] Returns: DocMap</p>"},{"location":"api/scripts_kg_modules/#safe_get","title":"<code>safe_get</code>","text":"<p>Safely get a value from a dictionary. Parameters: ['data: Dict[str, T]', 'key: str', 'default: Optional[T]'] Returns: Optional[T]</p>"},{"location":"api/scripts_kg_modules/#normalize_keys","title":"<code>normalize_keys</code>","text":"<p>Normalize all keys to use forward slashes for consistency. Parameters: ['docmap: DocMap'] Returns: DocMap</p>"},{"location":"api/scripts_kg_modules/#scriptskgmodulesvisualization","title":"<code>scripts.kg.modules.visualization</code>","text":"<p>\ud83e\udde0 Docstring Summary</p> Section Content Description Visualization tools for knowledge graphs. Args \u2014 Returns \u2014"},{"location":"api/scripts_kg_modules/#classes_4","title":"\ud83d\udce6 Classes","text":""},{"location":"api/scripts_kg_modules/#graphvisualizer","title":"<code>GraphVisualizer</code>","text":"<p>Handles visualization of knowledge graphs with complexity information. Parameters: ['self: Any'] Returns: None</p>"},{"location":"api/scripts_kg_modules/#functions_4","title":"\ud83d\udee0\ufe0f Functions","text":""},{"location":"api/scripts_kg_modules/#__init___2","title":"<code>__init__</code>","text":"<p>Initialize the visualizer. Parameters: ['self: Any'] Returns: Any</p>"},{"location":"api/scripts_kg_modules/#visualize_graph","title":"<code>visualize_graph</code>","text":"<p>Visualize the graph with complexity scores. Parameters: ['self: Any', 'graph: nx.DiGraph', 'complexity_scores: ComplexityScores', 'title: str'] Returns: None</p>"},{"location":"api/scripts_kg_modules/#_position_nodes_in_layers","title":"<code>_position_nodes_in_layers</code>","text":"<p>Position nodes in horizontal layers by type. Parameters: ['self: Any', 'layers: Dict[str, list]'] Returns: Dict[NodeID, tuple]</p>"},{"location":"api/scripts_kg_modules/#_handle_remaining_nodes","title":"<code>_handle_remaining_nodes</code>","text":"<p>Add positions for any nodes that weren't positioned in the initial layout. This modifies the pos dictionary in-place. Parameters: ['self: Any', 'pos: Dict[NodeID, tuple]'] Returns: None</p>"},{"location":"api/scripts_kg_modules/#_draw_module_rectangles","title":"<code>_draw_module_rectangles</code>","text":"<p>Draw colored rectangles around modules based on complexity. Parameters: ['self: Any', 'ax: plt.Axes', 'modules: Dict[NodeID, list]', 'pos: Dict[NodeID, tuple]', 'complexity_scores: ComplexityScores'] Returns: None</p>"},{"location":"api/scripts_kg_modules/#_get_node_colors","title":"<code>_get_node_colors</code>","text":"<p>Get node colors based on node type and module complexity. Parameters: ['self: Any', 'graph: nx.DiGraph', 'complexity_scores: ComplexityScores'] Returns: list</p>"},{"location":"api/scripts_kg_modules/#_get_complexity_color","title":"<code>_get_complexity_color</code>","text":"<p>Get the color representation based on the complexity score. Parameters: ['score: float'] Returns: str</p>"},{"location":"api/scripts_kg_modules/#_shorten_label","title":"<code>_shorten_label</code>","text":"<p>Shorten a label for display purposes. Parameters: ['name: str'] Returns: str</p>"},{"location":"api/scripts_refactor/","title":"<code>scripts/refactor</code>","text":""},{"location":"api/scripts_refactor/#scriptsrefactor__init__","title":"<code>scripts.refactor.__init__</code>","text":"<p>\ud83e\udde0 Docstring Summary</p> Section Content Description The <code>refactor</code> module provides tools for analyzing, comparing, and validating Python code refactoring. Core functionality includes: - Comparing original and refactored Python modules or directories to detect changes in class and method definitions. - Analyzing cyclomatic complexity of functions and methods to ensure maintainability. - Identifying missing or insufficient test coverage for public methods. - Integrating with code coverage data to enrich analysis results. - Supporting configuration for complexity thresholds and file/directory ignore patterns. This module is intended to help developers and teams maintain code quality and test coverage during refactoring processes. Args \u2014 Returns \u2014"},{"location":"api/scripts_refactor/#scriptsrefactorast_extractor","title":"<code>scripts.refactor.ast_extractor</code>","text":"<p>\ud83e\udde0 Docstring Summary</p> Section Content Description ast_extractor.py This module provides utilities for analyzing Python source files using the AST (Abstract Syntax Tree) to extract class and method information. Core features include: - Extracting all classes and their methods from a Python file, including method start and end line numbers. - Supporting nested class and method extraction. - Comparing two sets of class methods to identify missing or newly added methods after refactoring. - Providing a ClassMethodInfo class to encapsulate class and method metadata for further analysis. Intended for use in code analysis, refactoring tools, and automated quality checks. Args \u2014 Returns \u2014"},{"location":"api/scripts_refactor/#classes","title":"\ud83d\udce6 Classes","text":""},{"location":"api/scripts_refactor/#classmethodinfo","title":"<code>ClassMethodInfo</code>","text":"<p>Holds information about methods in a single class. Attributes: class_name (str): Name of the class. methods (Dict[str, Tuple[int, int]]): Mapping from method name to a tuple of (start_lineno, end_lineno). Parameters: ['self: Any', 'class_name: str'] Returns: None</p>"},{"location":"api/scripts_refactor/#classmethodextractor","title":"<code>ClassMethodExtractor</code>","text":"<p>No description available. Parameters: ['self: Any'] Returns: None</p>"},{"location":"api/scripts_refactor/#functions","title":"\ud83d\udee0\ufe0f Functions","text":""},{"location":"api/scripts_refactor/#__init__","title":"<code>__init__</code>","text":"<p>Initializes ClassMethodInfo with the class name and an empty methods dictionary. Parameters: ['self: Any', 'class_name: str'] Returns: None</p>"},{"location":"api/scripts_refactor/#add_method","title":"<code>add_method</code>","text":"<p>Record a method with its start and end line numbers. Parameters: ['self: Any', 'name: str', 'linenos: Tuple[int, int]'] Returns: None</p>"},{"location":"api/scripts_refactor/#__repr__","title":"<code>__repr__</code>","text":"<p>Returns a string representation of the ClassMethodInfo instance. Parameters: ['self: Any'] Returns: str</p>"},{"location":"api/scripts_refactor/#extract_class_methods","title":"<code>extract_class_methods</code>","text":"<p>Extracts all classes and their methods from a Python file, including method start and end line numbers. Parameters: ['file_path: str'] Returns: List[ClassMethodInfo]</p>"},{"location":"api/scripts_refactor/#__init___1","title":"<code>__init__</code>","text":"<p>No description available. Parameters: ['self: Any'] Returns: Any</p>"},{"location":"api/scripts_refactor/#visit_classdef","title":"<code>visit_ClassDef</code>","text":"<p>No description available. Parameters: ['self: Any', 'node: ast.AST'] Returns: None</p>"},{"location":"api/scripts_refactor/#generic_visit","title":"<code>generic_visit</code>","text":"<p>Visit all child nodes, to catch nested class definitions. Parameters: ['self: Any', 'node: ast.AST'] Returns: None</p>"},{"location":"api/scripts_refactor/#compare_class_methods","title":"<code>compare_class_methods</code>","text":"<p>Compare two ClassMethodInfo objects and return which methods are missing in the refactored version and which are newly added. Parameters: ['original: ClassMethodInfo', 'refactored: ClassMethodInfo'] Returns: Dict[str, List[str]]</p>"},{"location":"api/scripts_refactor/#scriptsrefactormerge_audit_reports","title":"<code>scripts.refactor.merge_audit_reports</code>","text":"<p>\ud83e\udde0 Docstring Summary</p> Section Content Description merge_audit_reports.py \u2013 bespoke normalizer Merges docstring, coverage/complexity, and linting JSON reports into a unified output. Uses custom normalization logic per input source to ensure accurate matching. Author: Your Name Version: 1.0 Args \u2014 Returns \u2014"},{"location":"api/scripts_refactor/#functions_1","title":"\ud83d\udee0\ufe0f Functions","text":""},{"location":"api/scripts_refactor/#normalize_path","title":"<code>normalize_path</code>","text":"<p>Normalize any report path by stripping everything up to and including the project 'scripts' directory and converting to a forward\u2011slash relative path. Parameters: ['path: str'] Returns: str</p>"},{"location":"api/scripts_refactor/#load_and_normalize","title":"<code>load_and_normalize</code>","text":"<p>Load JSON and normalize its keys using a common path normalizer. Parameters: ['path: Path'] Returns: Dict[str, Any]</p>"},{"location":"api/scripts_refactor/#merge_reports","title":"<code>merge_reports</code>","text":"<p>Merge docstring, coverage, and linting reports into a single JSON output. Parameters: ['doc_path: Path', 'cov_path: Path', 'lint_path: Path', 'output_path: Path'] Returns: None</p>"},{"location":"api/scripts_refactor/#main","title":"<code>main</code>","text":"<p>Main entry point for the script. Returns: None</p>"},{"location":"api/scripts_refactor/#scriptsrefactormethod_line_ranges","title":"<code>scripts.refactor.method_line_ranges</code>","text":"<p>\ud83e\udde0 Docstring Summary</p> Section Content Description method_line_ranges.py This module provides utilities for extracting the start and end line numbers of all functions and methods in a Python source file using the AST (Abstract Syntax Tree). Core features include: - The MethodRangeVisitor class, which traverses the AST to collect line ranges for top-level functions, class methods, and methods in nested classes. - The extract_method_line_ranges function, which parses a Python file and returns a dictionary mapping each function or method (as \"function\" or \"Class.method\") to its (start_lineno, end_lineno) tuple. - Handles both synchronous and asynchronous functions, and supports Python versions with or without the end_lineno attribute. - Designed for use in code analysis, refactoring tools, and coverage mapping. Intended to facilitate precise mapping of code structure for downstream analysis and tooling. Args \u2014 Returns \u2014"},{"location":"api/scripts_refactor/#classes_1","title":"\ud83d\udce6 Classes","text":""},{"location":"api/scripts_refactor/#methodrangevisitor","title":"<code>MethodRangeVisitor</code>","text":"<p>Collects start and end line numbers for each function or async method, keyed by 'ClassName.method' for methods or just 'function' for top-level functions. Nested classes are also visited. Attributes: ranges (Dict[str, Tuple[int, int]]): A dictionary mapping functions or methods to their line ranges. current_class (Optional[str]): The name of the current class being visited. Parameters: ['self: Any'] Returns: None</p>"},{"location":"api/scripts_refactor/#functions_2","title":"\ud83d\udee0\ufe0f Functions","text":""},{"location":"api/scripts_refactor/#__init___2","title":"<code>__init__</code>","text":"<p>Initializes the MethodRangeVisitor with an empty dictionary for ranges and a placeholder for the current class name. Parameters: ['self: Any'] Returns: None</p>"},{"location":"api/scripts_refactor/#visit_classdef_1","title":"<code>visit_ClassDef</code>","text":"<p>Visits a class definition node and collects line ranges for its methods. Parameters: ['self: Any', 'node: ast.ClassDef'] Returns: None</p>"},{"location":"api/scripts_refactor/#visit_functiondef","title":"<code>visit_FunctionDef</code>","text":"<p>Visits a function definition node and records its line range. Parameters: ['self: Any', 'node: ast.FunctionDef'] Returns: None</p>"},{"location":"api/scripts_refactor/#visit_asyncfunctiondef","title":"<code>visit_AsyncFunctionDef</code>","text":"<p>Visits an asynchronous function definition node and records its line range. Parameters: ['self: Any', 'node: ast.AsyncFunctionDef'] Returns: None</p>"},{"location":"api/scripts_refactor/#_record_range","title":"<code>_record_range</code>","text":"<p>Records the line range for a function or asynchronous function node. Parameters: ['self: Any', 'node: Union[ast.FunctionDef, ast.AsyncFunctionDef]'] Returns: None</p>"},{"location":"api/scripts_refactor/#extract_method_line_ranges","title":"<code>extract_method_line_ranges</code>","text":"<p>Parses a Python file and returns a dict mapping each function or method to its (start_lineno, end_lineno). Parameters: ['file_path: str'] Returns: Dict[str, Tuple[int, int]]</p>"},{"location":"api/scripts_refactor/#scriptsrefactorrefactor_guard","title":"<code>scripts.refactor.refactor_guard</code>","text":"<p>\ud83e\udde0 Docstring Summary</p> Section Content Description RefactorGuard: analyse refactors and (optionally) enrich the results with line\u2011coverage information coming from a <code>.coverage</code> SQLite DB or a JSON export produced by Coverage.py. Adds support for both <code>.coverage</code> and <code>coverage.json</code> formats. Automatically switches parsers based on the extension. Args \u2014 Returns \u2014"},{"location":"api/scripts_refactor/#classes_2","title":"\ud83d\udce6 Classes","text":""},{"location":"api/scripts_refactor/#analysiserror","title":"<code>AnalysisError</code>","text":"<p>Raised when an error occurs during analysis. Returns: None</p>"},{"location":"api/scripts_refactor/#refactorguard","title":"<code>RefactorGuard</code>","text":"<p>Analyse / validate Python refactors. Parameters: ['self: Any', 'config: Optional[Dict[str, Any]] | None'] Returns: None</p>"},{"location":"api/scripts_refactor/#functions_3","title":"\ud83d\udee0\ufe0f Functions","text":""},{"location":"api/scripts_refactor/#__init___3","title":"<code>__init__</code>","text":"<p>No description available. Parameters: ['self: Any', 'config: Optional[Dict[str, Any]] | None'] Returns: None</p>"},{"location":"api/scripts_refactor/#attach_coverage_hits","title":"<code>attach_coverage_hits</code>","text":"<p>No description available. Parameters: ['self: Any', 'coverage_data: Dict[str, Dict[str, Any]]'] Returns: None</p>"},{"location":"api/scripts_refactor/#analyze_tests","title":"<code>analyze_tests</code>","text":"<p>No description available. Parameters: ['self: Any', 'refactored_path: str', 'test_file_path: Optional[str] | None'] Returns: List[Dict[str, str]]</p>"},{"location":"api/scripts_refactor/#analyze_module","title":"<code>analyze_module</code>","text":"<p>No description available. Parameters: ['self: Any', 'original_path: Optional[str]', 'refactored_path: str', 'test_file_path: Optional[str]'] Returns: Dict[str, Any]</p>"},{"location":"api/scripts_refactor/#_simple_name","title":"<code>_simple_name</code>","text":"<p>No description available. Parameters: ['qual: str'] Returns: str</p>"},{"location":"api/scripts_refactor/#analyze_directory_recursive","title":"<code>analyze_directory_recursive</code>","text":"<p>No description available. Parameters: ['self: Any', 'original_dir: str', 'refactored_dir: str', 'test_dir: Optional[str]'] Returns: Dict[str, Dict[str, Any]]</p>"},{"location":"api/scripts_refactor/#print_human_readable","title":"<code>print_human_readable</code>","text":"<p>Print a human-readable summary of the analysis results. Parameters: ['summary: Dict[str, Dict[str, Any]]', 'guard: RefactorGuard', 'args: Optional[argparse.Namespace]'] Returns: None</p>"},{"location":"api/scripts_refactor/#scriptsrefactorrefactor_guard_cli","title":"<code>scripts.refactor.refactor_guard_cli</code>","text":"<p>\ud83e\udde0 Docstring Summary</p> Section Content Description No module description available. Args \u2014 Returns \u2014"},{"location":"api/scripts_refactor/#functions_4","title":"\ud83d\udee0\ufe0f Functions","text":""},{"location":"api/scripts_refactor/#_ensure_utf8_stdout","title":"<code>_ensure_utf8_stdout</code>","text":"<p>No description available. Returns: None</p>"},{"location":"api/scripts_refactor/#_parse_args","title":"<code>_parse_args</code>","text":"<p>No description available. Returns: argparse.Namespace</p>"},{"location":"api/scripts_refactor/#_merge_coverage","title":"<code>_merge_coverage</code>","text":"<p>No description available. Parameters: ['summary: dict', 'ref: str', 'args: argparse.Namespace'] Returns: None</p>"},{"location":"api/scripts_refactor/#handle_full_scan","title":"<code>handle_full_scan</code>","text":"<p>No description available. Parameters: ['args: argparse.Namespace', 'guard: RefactorGuard'] Returns: Dict[str, Dict[str, Any]]</p>"},{"location":"api/scripts_refactor/#handle_single_file","title":"<code>handle_single_file</code>","text":"<p>No description available. Parameters: ['args: argparse.Namespace', 'guard: RefactorGuard'] Returns: Dict[str, Dict[str, Any]]</p>"},{"location":"api/scripts_refactor/#main_1","title":"<code>main</code>","text":"<p>No description available. Returns: int</p>"},{"location":"api/scripts_refactor/#scriptsrefactorstrictness_analyzer","title":"<code>scripts.refactor.strictness_analyzer</code>","text":"<p>\ud83e\udde0 Docstring Summary</p> Section Content Description Test Coverage Mapper (Strictness Report Version) Author: Angelos Dimakos Version: 3.2.0 Loads precomputed strictness analysis and merges it with audit coverage data into a module-centric report with consistent schema handling. Usage: python test_coverage_mapper.py --test-report test_report.json --audit refactor_audit.json --output final_report.json Args \u2014 Returns \u2014"},{"location":"api/scripts_refactor/#classes_3","title":"\ud83d\udce6 Classes","text":""},{"location":"api/scripts_refactor/#complexitymetrics","title":"<code>ComplexityMetrics</code>","text":"<p>Model for storing code complexity and test coverage metrics for a single method. Returns: None</p>"},{"location":"api/scripts_refactor/#fileaudit","title":"<code>FileAudit</code>","text":"<p>Model for storing audit data for a specific file. Returns: None</p>"},{"location":"api/scripts_refactor/#auditreport","title":"<code>AuditReport</code>","text":"<p>Top-level model for the audit report. Returns: None</p>"},{"location":"api/scripts_refactor/#strictnessentry","title":"<code>StrictnessEntry</code>","text":"<p>Model for storing test strictness evaluation data. Returns: None</p>"},{"location":"api/scripts_refactor/#strictnessreport","title":"<code>StrictnessReport</code>","text":"<p>Top-level model for the strictness report. Returns: None</p>"},{"location":"api/scripts_refactor/#methodoutput","title":"<code>MethodOutput</code>","text":"<p>Standardized output model for method data in the final report. Returns: None</p>"},{"location":"api/scripts_refactor/#testoutput","title":"<code>TestOutput</code>","text":"<p>Standardized output model for test data in the final report. Returns: None</p>"},{"location":"api/scripts_refactor/#moduleoutput","title":"<code>ModuleOutput</code>","text":"<p>Standardized output model for module data in the final report. Returns: None</p>"},{"location":"api/scripts_refactor/#finalreport","title":"<code>FinalReport</code>","text":"<p>Top-level model for the final merged report. Returns: None</p>"},{"location":"api/scripts_refactor/#functions_5","title":"\ud83d\udee0\ufe0f Functions","text":""},{"location":"api/scripts_refactor/#weighted_coverage","title":"<code>weighted_coverage</code>","text":"<p>Return overall coverage weighted by each function's lines-of-code. Parameters: ['func_dict: Dict[str, ComplexityMetrics]'] Returns: float</p>"},{"location":"api/scripts_refactor/#get_test_severity","title":"<code>get_test_severity</code>","text":"<p>Compute severity with implicit weighting from coverage. Parameters: ['test_entry: StrictnessEntry', 'coverage: Optional[float]', 'alpha: float'] Returns: float</p>"},{"location":"api/scripts_refactor/#load_audit_report","title":"<code>load_audit_report</code>","text":"<p>Load the audit report JSON into the Pydantic model. Parameters: ['audit_path: str'] Returns: AuditReport</p>"},{"location":"api/scripts_refactor/#load_test_report","title":"<code>load_test_report</code>","text":"<p>Load the precomputed strictness analysis JSON. Parameters: ['test_report_path: str'] Returns: List[StrictnessEntry]</p>"},{"location":"api/scripts_refactor/#generate_module_report","title":"<code>generate_module_report</code>","text":"<p>No description available. Parameters: ['audit_model: AuditReport', 'strictness_entries: List[StrictnessEntry]', 'test_imports: Dict[str, List[str]]'] Returns: Dict[str, Any]</p>"},{"location":"api/scripts_refactor/#fuzzy_match","title":"<code>fuzzy_match</code>","text":"<p>Fuzzy matching with partial ratio preference for looser matching. Parameters: ['a: str', 'b: str', 'threshold: int'] Returns: bool</p>"},{"location":"api/scripts_refactor/#validate_report_schema","title":"<code>validate_report_schema</code>","text":"<p>No description available. Parameters: ['data: Dict[str, Any]', 'report_type: str'] Returns: bool</p>"},{"location":"api/scripts_refactor/#should_assign_test_to_module","title":"<code>should_assign_test_to_module</code>","text":"<p>Decide if a test should be assigned to a production module using strict matching. Prioritizes conventions and imports. Fuzzy matching is a last resort with a high bar. Parameters: ['prod_file_name: str', 'method_names: List[str]', 'test_entry: StrictnessEntry', 'test_imports: Dict[str, List[str]]', 'fuzzy_threshold: int'] Returns: bool</p>"},{"location":"api/scripts_refactor/#main_2","title":"<code>main</code>","text":"<p>No description available. Parameters: ['test_report_path: str', 'audit_path: str', 'output_path: Optional[str]'] Returns: None</p>"},{"location":"api/scripts_refactor_complexity/","title":"<code>scripts/refactor/complexity</code>","text":""},{"location":"api/scripts_refactor_complexity/#scriptsrefactorcomplexity__init__","title":"<code>scripts.refactor.complexity.__init__</code>","text":"<p>\ud83e\udde0 Docstring Summary</p> Section Content Description No module description available. Args \u2014 Returns \u2014"},{"location":"api/scripts_refactor_complexity/#scriptsrefactorcomplexitycomplexity_analyzer","title":"<code>scripts.refactor.complexity.complexity_analyzer</code>","text":"<p>\ud83e\udde0 Docstring Summary</p> Section Content Description complexity_analyzer.py This module provides utilities for analyzing the cyclomatic complexity of Python functions, methods, and modules using the AST (Abstract Syntax Tree). Core features include: - Computing cyclomatic complexity for each function and method in a Python file, including support for nested classes. - Summing per-function complexities to produce a module-level complexity score. - Supporting Python 3.10+ match/case syntax in complexity calculations. - Providing a ComplexityVisitor class for AST traversal and complexity computation. - Handling syntax and I/O errors gracefully with warnings. - Deprecated alias for backward compatibility. Intended for use in code quality analysis, refactoring tools, and CI pipelines to help maintain manageable code complexity. Args \u2014 Returns \u2014"},{"location":"api/scripts_refactor_complexity/#classes","title":"\ud83d\udce6 Classes","text":""},{"location":"api/scripts_refactor_complexity/#complexityvisitor","title":"<code>ComplexityVisitor</code>","text":"<p>Visits each top-level function or method definition and computes its cyclomatic complexity based on decision point nodes. Nested functions are entirely skipped; nested classes are recursed into. Parameters: ['self: Any'] Returns: None</p>"},{"location":"api/scripts_refactor_complexity/#functions","title":"\ud83d\udee0\ufe0f Functions","text":""},{"location":"api/scripts_refactor_complexity/#__init__","title":"<code>__init__</code>","text":"<p>Initializes the ComplexityVisitor with an empty dictionary for function scores and sets the current class name to an empty string. Parameters: ['self: Any'] Returns: None</p>"},{"location":"api/scripts_refactor_complexity/#visit_classdef","title":"<code>visit_ClassDef</code>","text":"<p>Visits a class definition node and computes the complexity of its methods. Parameters: ['self: Any', 'node: ast.ClassDef'] Returns: None</p>"},{"location":"api/scripts_refactor_complexity/#visit_functiondef","title":"<code>visit_FunctionDef</code>","text":"<p>Visits a function definition node and calculates its complexity. Parameters: ['self: Any', 'node: ast.FunctionDef'] Returns: None</p>"},{"location":"api/scripts_refactor_complexity/#visit_asyncfunctiondef","title":"<code>visit_AsyncFunctionDef</code>","text":"<p>Visits an asynchronous function definition node and calculates its complexity. Parameters: ['self: Any', 'node: ast.AsyncFunctionDef'] Returns: None</p>"},{"location":"api/scripts_refactor_complexity/#_compute_and_record","title":"<code>_compute_and_record</code>","text":"<p>Calculate complexity for a function/method node and record it. Parameters: ['self: Any', 'node: ast.AST'] Returns: None</p>"},{"location":"api/scripts_refactor_complexity/#count_nodes","title":"<code>count_nodes</code>","text":"<p>Recursively counts the number of decision nodes in the given AST node. Parameters: ['n: ast.AST'] Returns: int</p>"},{"location":"api/scripts_refactor_complexity/#get_scores","title":"<code>get_scores</code>","text":"<p>Return the computed complexity scores. Parameters: ['self: Any'] Returns: Dict[str, int]</p>"},{"location":"api/scripts_refactor_complexity/#calculate_function_complexity_map","title":"<code>calculate_function_complexity_map</code>","text":"<p>Parses the given Python file and returns a mapping from function/method full names to their cyclomatic complexity scores. Parameters: ['file_path: str'] Returns: Dict[str, int]</p>"},{"location":"api/scripts_refactor_complexity/#calculate_module_complexity","title":"<code>calculate_module_complexity</code>","text":"<p>Sum all function/method complexities in the module and add 1 overhead. Parameters: ['module_path: str'] Returns: int</p>"},{"location":"api/scripts_refactor_complexity/#calculate_cyclomatic_complexity_for_module","title":"<code>calculate_cyclomatic_complexity_for_module</code>","text":"<p>Deprecated alias for calculate_module_complexity. Issues a DeprecationWarning and delegates to calculate_module_complexity. Parameters: ['module_path: str'] Returns: int</p>"},{"location":"api/scripts_refactor_complexity/#scriptsrefactorcomplexitycomplexity_summary","title":"<code>scripts.refactor.complexity.complexity_summary</code>","text":"<p>\ud83e\udde0 Docstring Summary</p> Section Content Description complexity_summary.py This module provides functionality for analyzing code complexity from a JSON audit file. It reads the audit data, checks for complexity thresholds, and prints a summary report indicating any methods that exceed the specified complexity limits. Dependencies: - json - sys - os Args \u2014 Returns \u2014"},{"location":"api/scripts_refactor_complexity/#functions_1","title":"\ud83d\udee0\ufe0f Functions","text":""},{"location":"api/scripts_refactor_complexity/#analyze_complexity","title":"<code>analyze_complexity</code>","text":"<p>Analyzes code complexity from a JSON audit file and prints a summary. Parameters: file_path (str): Path to the audit JSON file. Defaults to \"refactor_audit.json\". max_complexity (int): Maximum allowed complexity before issuing warnings. Defaults to 10. Exits the process with an error message if the file is missing, empty, or contains invalid JSON. Parameters: ['file_path: str', 'max_complexity: int'] Returns: None</p>"},{"location":"api/scripts_refactor_complexity/#run_analysis","title":"<code>run_analysis</code>","text":"<p>Analyzes method complexity across files and prints a summary report. Parameters: ['data: Dict[str, Any]', 'max_complexity: Union[int, float]', 'use_emoji: bool'] Returns: None</p>"},{"location":"api/scripts_refactor_compressor/","title":"<code>scripts/refactor/compressor</code>","text":""},{"location":"api/scripts_refactor_compressor/#scriptsrefactorcompressor__init__","title":"<code>scripts.refactor.compressor.__init__</code>","text":"<p>\ud83e\udde0 Docstring Summary</p> Section Content Description No module description available. Args \u2014 Returns \u2014"},{"location":"api/scripts_refactor_compressor/#scriptsrefactorcompressormerged_report_squeezer","title":"<code>scripts.refactor.compressor.merged_report_squeezer</code>","text":"<p>\ud83e\udde0 Docstring Summary</p> Section Content Description No module description available. Args \u2014 Returns \u2014"},{"location":"api/scripts_refactor_compressor/#functions","title":"\ud83d\udee0\ufe0f Functions","text":""},{"location":"api/scripts_refactor_compressor/#_get_or_add","title":"<code>_get_or_add</code>","text":"<p>Return ID for triple; create a new one if unseen. Parameters: ['triple: DocTriple', 'cache: Dict[DocTriple, int]', 'table: List[List[Any]]'] Returns: int</p>"},{"location":"api/scripts_refactor_compressor/#_calc_percent","title":"<code>_calc_percent</code>","text":"<p>Return overall file-coverage percentage if the complexity section provides enough data, otherwise None. Parameters: ['cov_blob: dict[str, Any]'] Returns: float | None</p>"},{"location":"api/scripts_refactor_compressor/#compress_obj","title":"<code>compress_obj</code>","text":"<p>Return a compact structure with docstrings hoisted into a lookup table. Parameters</p> <p>original The full\u2011fidelity merged_report dict loaded from JSON. retain_keys If True, keep verbose dict keys inside each docstring record instead of positional arrays.  (Adds ~2\u00a0kB gzipped \u2013 handy for debugging.) Parameters: ['original: Dict[str, Any]', 'retain_keys: bool'] Returns: Dict[str, Any]</p>"},{"location":"api/scripts_refactor_compressor/#decompress_obj","title":"<code>decompress_obj</code>","text":"<p>Rebuild the full merged_report structure from the compact blob. Parameters: ['blob: Dict[str, Any]'] Returns: Dict[str, Any]</p>"},{"location":"api/scripts_refactor_compressor/#_expand","title":"<code>_expand</code>","text":"<p>No description available. Parameters: ['doc_id: int | None'] Returns: Dict[str, Any]</p>"},{"location":"api/scripts_refactor_compressor/#_load_json","title":"<code>_load_json</code>","text":"<p>No description available. Parameters: ['path: Path'] Returns: Dict[str, Any]</p>"},{"location":"api/scripts_refactor_compressor/#_dump_json","title":"<code>_dump_json</code>","text":"<p>No description available. Parameters: ['obj: Dict[str, Any]', 'path: Path', 'pretty: bool', 'gzip_level: int | None'] Returns: None</p>"},{"location":"api/scripts_refactor_compressor/#_cli","title":"<code>_cli</code>","text":"<p>No description available. Returns: None</p>"},{"location":"api/scripts_refactor_compressor/#scriptsrefactorcompressorstrictness_report_squeezer","title":"<code>scripts.refactor.compressor.strictness_report_squeezer</code>","text":"<p>\ud83e\udde0 Docstring Summary</p> Section Content Description No module description available. Args \u2014 Returns \u2014"},{"location":"api/scripts_refactor_compressor/#functions_1","title":"\ud83d\udee0\ufe0f Functions","text":""},{"location":"api/scripts_refactor_compressor/#compress_obj_1","title":"<code>compress_obj</code>","text":"<p>Compress a strictness report into a minimal 'modules' mapping. Parameters: ['original: Dict[str, Any]'] Returns: Dict[str, Any]</p>"},{"location":"api/scripts_refactor_compressor/#decompress_obj_1","title":"<code>decompress_obj</code>","text":"<p>Rebuild the full strictness report structure from the compact blob. Parameters: ['blob: Dict[str, Any]'] Returns: Dict[str, Any]</p>"},{"location":"api/scripts_refactor_compressor/#semantic_equal","title":"<code>semantic_equal</code>","text":"<p>Compare two reports semantically, allowing for rounding discrepancies. Parameters: ['a: Dict[str, Any]', 'b: Dict[str, Any]'] Returns: bool</p>"},{"location":"api/scripts_refactor_compressor/#_load_json_1","title":"<code>_load_json</code>","text":"<p>No description available. Parameters: ['path: Path'] Returns: Dict[str, Any]</p>"},{"location":"api/scripts_refactor_compressor/#_dump_json_1","title":"<code>_dump_json</code>","text":"<p>No description available. Parameters: ['obj: Dict[str, Any]', 'path: Path', 'pretty: bool'] Returns: None</p>"},{"location":"api/scripts_refactor_compressor/#_cli_1","title":"<code>_cli</code>","text":"<p>No description available. Returns: None</p>"},{"location":"api/scripts_refactor_lint_report_pkg/","title":"<code>scripts/refactor/lint_report_pkg</code>","text":""},{"location":"api/scripts_refactor_lint_report_pkg/#scriptsrefactorlint_report_pkg__init__","title":"<code>scripts.refactor.lint_report_pkg.__init__</code>","text":"<p>\ud83e\udde0 Docstring Summary</p> Section Content Description Plugin-based quality-checker package. <code>core.merge_into_refactor_guard()</code> is the only public entry-point most code ever needs. Args \u2014 Returns \u2014"},{"location":"api/scripts_refactor_lint_report_pkg/#functions","title":"\ud83d\udee0\ufe0f Functions","text":""},{"location":"api/scripts_refactor_lint_report_pkg/#register","title":"<code>register</code>","text":"<p>Decorator used by each plugin module to register it in the plugin registry. Parameters: ['name: str'] Returns: Callable[[Type], Type]</p>"},{"location":"api/scripts_refactor_lint_report_pkg/#_inner","title":"<code>_inner</code>","text":"<p>No description available. Parameters: ['cls: Type'] Returns: Type</p>"},{"location":"api/scripts_refactor_lint_report_pkg/#_discover_plugins","title":"<code>_discover_plugins</code>","text":"<p>Discovers and imports all plugin modules in the 'plugins' directory. This function automatically imports all Python files in the 'plugins' directory, excluding those that start with an underscore. Returns: None</p>"},{"location":"api/scripts_refactor_lint_report_pkg/#scriptsrefactorlint_report_pkgcore","title":"<code>scripts.refactor.lint_report_pkg.core</code>","text":"<p>\ud83e\udde0 Docstring Summary</p> Section Content Description Core Module for Lint Report Package ===================================== This module provides the base class for tool plugins and functions for plugin discovery. It includes the abstract base class ToolPlugin that all plugins must implement, and a utility to access all discovered plugins. Args \u2014 Returns \u2014"},{"location":"api/scripts_refactor_lint_report_pkg/#classes","title":"\ud83d\udce6 Classes","text":""},{"location":"api/scripts_refactor_lint_report_pkg/#toolplugin","title":"<code>ToolPlugin</code>","text":"<p>Abstract base class for tool plugins. All subclasses must define: - name: str (unique plugin name) - default_report: Path (where output is written) - run(): run the tool - parse(dst): enrich the lint result dictionary Returns: None</p>"},{"location":"api/scripts_refactor_lint_report_pkg/#functions_1","title":"\ud83d\udee0\ufe0f Functions","text":""},{"location":"api/scripts_refactor_lint_report_pkg/#name","title":"<code>name</code>","text":"<p>Unique plugin identifier (e.g., 'flake8'). Parameters: ['self: Any'] Returns: str</p>"},{"location":"api/scripts_refactor_lint_report_pkg/#default_report","title":"<code>default_report</code>","text":"<p>Path where the tool writes its report (txt/json/xml). Parameters: ['self: Any'] Returns: Path</p>"},{"location":"api/scripts_refactor_lint_report_pkg/#run","title":"<code>run</code>","text":"<p>Execute the tool, writing to <code>default_report</code>; return exit code. Parameters: ['self: Any'] Returns: int</p>"},{"location":"api/scripts_refactor_lint_report_pkg/#parse","title":"<code>parse</code>","text":"<p>Read <code>default_report</code> and update <code>dst</code> with findings. Parameters: ['self: Any', 'dst: Dict[str, Dict[str, Any]]'] Returns: None</p>"},{"location":"api/scripts_refactor_lint_report_pkg/#all_plugins","title":"<code>all_plugins</code>","text":"<p>Return all ToolPlugin instances registered by plugin modules. Returns: List[ToolPlugin]</p>"},{"location":"api/scripts_refactor_lint_report_pkg/#scriptsrefactorlint_report_pkghelpers","title":"<code>scripts.refactor.lint_report_pkg.helpers</code>","text":"<p>\ud83e\udde0 Docstring Summary</p> Section Content Description Helpers for Lint Report Package =============================== This module provides utility functions shared by the quality-checker core and plugins. It includes functions for running commands, printing safely, and reading report files. Args \u2014 Returns \u2014"},{"location":"api/scripts_refactor_lint_report_pkg/#functions_2","title":"\ud83d\udee0\ufe0f Functions","text":""},{"location":"api/scripts_refactor_lint_report_pkg/#safe_print","title":"<code>safe_print</code>","text":"<p>Print <code>msg</code> even on exotic console encodings (swallows UnicodeEncodeError). Parameters: ['msg: str'] Returns: None</p>"},{"location":"api/scripts_refactor_lint_report_pkg/#run_cmd","title":"<code>run_cmd</code>","text":"<p>Run cmd, write combined stdout + stderr to output_file (UTF-8), and return the subprocess' exit-code. Parameters: ['cmd: Sequence[str]', 'output_file: Union[str, os.PathLike]'] Returns: int</p>"},{"location":"api/scripts_refactor_lint_report_pkg/#read_report","title":"<code>read_report</code>","text":"<p>Return the textual contents of path (empty string if the file is missing), decoding as UTF-8 and falling back to \u201creplace\u201d for any bad bytes. Parameters: ['path: Path'] Returns: str</p>"},{"location":"api/scripts_refactor_lint_report_pkg/#scriptsrefactorlint_report_pkglint_report_cli","title":"<code>scripts.refactor.lint_report_pkg.lint_report_cli</code>","text":"<p>\ud83e\udde0 Docstring Summary</p> Section Content Description Lint Report CLI =============================== This script enriches a RefactorGuard audit file with linting, coverage, and docstring analysis data. Key points: - Zero-setup: If the audit JSON is missing, an empty one is created for plugins to populate. - No --reports argument: Each plugin runs its own tool and saves its report next to the audit file. - Optional docstring merge: If a docstring summary JSON is present, it is injected under a top-level \"docstrings\" key in the audit file. Typical usage: $ python lint_report_cli.py --audit refactor_audit.json $ python lint_report_cli.py --audit refactor_audit.json --docstrings docstring_summary.json Args \u2014 Returns \u2014"},{"location":"api/scripts_refactor_lint_report_pkg/#functions_3","title":"\ud83d\udee0\ufe0f Functions","text":""},{"location":"api/scripts_refactor_lint_report_pkg/#enrich_refactor_audit","title":"<code>enrich_refactor_audit</code>","text":"<p>Enrich audit_path with lint, coverage, and optional docstring data. Parameters:</p> <p>audit_path: str Path to the RefactorGuard audit JSON file. Parameters: ['audit_path: str'] Returns: None</p>"},{"location":"api/scripts_refactor_lint_report_pkg/#scriptsrefactorlint_report_pkgpath_utils","title":"<code>scripts.refactor.lint_report_pkg.path_utils</code>","text":"<p>\ud83e\udde0 Docstring Summary</p> Section Content Description Path Utilities for Quality Audit Modules =============================== This module provides common path helper functions used across quality and audit modules. It includes functions for normalizing paths relative to the repository root. Args \u2014 Returns \u2014"},{"location":"api/scripts_refactor_lint_report_pkg/#functions_4","title":"\ud83d\udee0\ufe0f Functions","text":""},{"location":"api/scripts_refactor_lint_report_pkg/#norm","title":"<code>norm</code>","text":"<p>Return a repository-relative normalized path. If the file lives outside the repo, fall back to \u201clast-two components\u201d to avoid collisions yet stay platform-agnostic. Parameters: ['p: str | os.PathLike'] Returns: str</p>"},{"location":"api/scripts_refactor_lint_report_pkg/#scriptsrefactorlint_report_pkgquality_checker","title":"<code>scripts.refactor.lint_report_pkg.quality_checker</code>","text":"<p>\ud83e\udde0 Docstring Summary</p> Section Content Description Quality Checker for Lint Report Package ======================================= This module serves as the public API for the lint report package. It imports all plugins, drives tool execution and parsing, and merges results into the RefactorGuard audit. Args \u2014 Returns \u2014"},{"location":"api/scripts_refactor_lint_report_pkg/#functions_5","title":"\ud83d\udee0\ufe0f Functions","text":""},{"location":"api/scripts_refactor_lint_report_pkg/#merge_into_refactor_guard","title":"<code>merge_into_refactor_guard</code>","text":"<p>Enrich audit_path with quality data produced by every plugin. Parameters</p> <p>audit_path : str Path to the RefactorGuard audit JSON file. Parameters: ['audit_path: str'] Returns: None</p>"},{"location":"api/scripts_refactor_lint_report_pkg/#merge_reports","title":"<code>merge_reports</code>","text":"<p>Return merged dict where b overrides a on duplicate keys. Parameters</p> <p>file_a : str Path to the first JSON file. file_b : str Path to the second JSON file. Parameters: ['file_a: str', 'file_b: str'] Returns: Dict[str, Any]</p>"},{"location":"api/scripts_refactor_lint_report_pkg/#scriptsrefactorlint_report_pkgquality_registry","title":"<code>scripts.refactor.lint_report_pkg.quality_registry</code>","text":"<p>\ud83e\udde0 Docstring Summary</p> Section Content Description Quality Registry for Lint Report Package =============================== This module provides functionality to register and run quality plugins. It includes decorators for registering plugins and a method to invoke all registered plugins. Args \u2014 Returns \u2014"},{"location":"api/scripts_refactor_lint_report_pkg/#functions_6","title":"\ud83d\udee0\ufe0f Functions","text":""},{"location":"api/scripts_refactor_lint_report_pkg/#register_1","title":"<code>register</code>","text":"<p>Decorator to register a quality plug-in. Parameters: ['func: Plugin'] Returns: Plugin</p>"},{"location":"api/scripts_refactor_lint_report_pkg/#run_all","title":"<code>run_all</code>","text":"<p>Invoke every registered plug-in in order. Parameters: ['quality: Dict[str, Dict[str, Any]]', 'report_paths: Dict[str, Path]'] Returns: None</p>"},{"location":"api/scripts_refactor_lint_report_pkg_plugins/","title":"<code>scripts/refactor/lint_report_pkg/plugins</code>","text":""},{"location":"api/scripts_refactor_lint_report_pkg_plugins/#scriptsrefactorlint_report_pkgplugins__init__","title":"<code>scripts.refactor.lint_report_pkg.plugins.__init__</code>","text":"<p>\ud83e\udde0 Docstring Summary</p> Section Content Description Auto-discover all ToolPlugin subclasses so the orchestrator can <code>import PLUGINS</code>. Args \u2014 Returns \u2014"},{"location":"api/scripts_refactor_lint_report_pkg_plugins/#scriptsrefactorlint_report_pkgpluginsblack","title":"<code>scripts.refactor.lint_report_pkg.plugins.black</code>","text":"<p>\ud83e\udde0 Docstring Summary</p> Section Content Description Black Plugin for Lint Report Package =============================== This module provides a plugin for the Black code formatter, implementing the ToolPlugin interface. It includes functionality to run Black on code and parse its output for formatting issues. Args \u2014 Returns \u2014"},{"location":"api/scripts_refactor_lint_report_pkg_plugins/#classes","title":"\ud83d\udce6 Classes","text":""},{"location":"api/scripts_refactor_lint_report_pkg_plugins/#blackplugin","title":"<code>BlackPlugin</code>","text":"<p>Plugin for the Black code formatter. Attributes: name (str): The name of the plugin. default_report (Path): The default report file path. Returns: None</p>"},{"location":"api/scripts_refactor_lint_report_pkg_plugins/#functions","title":"\ud83d\udee0\ufe0f Functions","text":""},{"location":"api/scripts_refactor_lint_report_pkg_plugins/#run","title":"<code>run</code>","text":"<p>Run Black in check mode on the scripts directory. Parameters: ['self: Any'] Returns: int</p>"},{"location":"api/scripts_refactor_lint_report_pkg_plugins/#parse","title":"<code>parse</code>","text":"<p>Parse the output report from Black and update the destination dictionary. Parameters: ['self: Any', 'dst: Dict[str, Dict[str, Any]]'] Returns: None</p>"},{"location":"api/scripts_refactor_lint_report_pkg_plugins/#scriptsrefactorlint_report_pkgpluginsflake8","title":"<code>scripts.refactor.lint_report_pkg.plugins.flake8</code>","text":"<p>\ud83e\udde0 Docstring Summary</p> Section Content Description No module description available. Args \u2014 Returns \u2014"},{"location":"api/scripts_refactor_lint_report_pkg_plugins/#classes_1","title":"\ud83d\udce6 Classes","text":""},{"location":"api/scripts_refactor_lint_report_pkg_plugins/#flake8plugin","title":"<code>Flake8Plugin</code>","text":"<p>No description available. Returns: None</p>"},{"location":"api/scripts_refactor_lint_report_pkg_plugins/#functions_1","title":"\ud83d\udee0\ufe0f Functions","text":""},{"location":"api/scripts_refactor_lint_report_pkg_plugins/#run_1","title":"<code>run</code>","text":"<p>No description available. Parameters: ['self: Any'] Returns: int</p>"},{"location":"api/scripts_refactor_lint_report_pkg_plugins/#parse_1","title":"<code>parse</code>","text":"<p>No description available. Parameters: ['self: Any', 'dst: Dict[str, Dict[str, Any]]'] Returns: None</p>"},{"location":"api/scripts_refactor_lint_report_pkg_plugins/#scriptsrefactorlint_report_pkgpluginsmypy","title":"<code>scripts.refactor.lint_report_pkg.plugins.mypy</code>","text":"<p>\ud83e\udde0 Docstring Summary</p> Section Content Description Mypy Plugin for Lint Report Package =============================== This module provides a plugin for the MyPy type checker, implementing the ToolPlugin interface. It includes functionality to run MyPy on code and parse its output for type checking errors. Args \u2014 Returns \u2014"},{"location":"api/scripts_refactor_lint_report_pkg_plugins/#classes_2","title":"\ud83d\udce6 Classes","text":""},{"location":"api/scripts_refactor_lint_report_pkg_plugins/#mypyplugin","title":"<code>MypyPlugin</code>","text":"<p>Plugin for the MyPy type checker. Attributes: name (str): The name of the plugin. default_report (Path): The default report file path. Returns: None</p>"},{"location":"api/scripts_refactor_lint_report_pkg_plugins/#functions_2","title":"\ud83d\udee0\ufe0f Functions","text":""},{"location":"api/scripts_refactor_lint_report_pkg_plugins/#run_2","title":"<code>run</code>","text":"<p>Run MyPy in strict mode on the scripts directory. Parameters: ['self: Any'] Returns: int</p>"},{"location":"api/scripts_refactor_lint_report_pkg_plugins/#parse_2","title":"<code>parse</code>","text":"<p>Parse the output report from MyPy and update the destination dictionary. Parameters: ['self: Any', 'dst: Dict[str, Dict[str, Any]]'] Returns: None</p>"},{"location":"api/scripts_refactor_lint_report_pkg_plugins/#scriptsrefactorlint_report_pkgpluginspydocstyle","title":"<code>scripts.refactor.lint_report_pkg.plugins.pydocstyle</code>","text":"<p>\ud83e\udde0 Docstring Summary</p> Section Content Description Pydocstyle Plugin for Lint Report Package =============================== This module provides a plugin for the pydocstyle tool, implementing the ToolPlugin interface. It includes functionality to run pydocstyle on code and parse its output for docstring issues. Args \u2014 Returns \u2014"},{"location":"api/scripts_refactor_lint_report_pkg_plugins/#classes_3","title":"\ud83d\udce6 Classes","text":""},{"location":"api/scripts_refactor_lint_report_pkg_plugins/#pydocstyleplugin","title":"<code>PydocstylePlugin</code>","text":"<p>Plugin for the pydocstyle tool. Attributes: name (str): The name of the plugin. default_report (Path): The default report file path. Returns: None</p>"},{"location":"api/scripts_refactor_lint_report_pkg_plugins/#functions_3","title":"\ud83d\udee0\ufe0f Functions","text":""},{"location":"api/scripts_refactor_lint_report_pkg_plugins/#run_3","title":"<code>run</code>","text":"<p>Execute the pydocstyle tool on the scripts directory. Parameters: ['self: Any'] Returns: int</p>"},{"location":"api/scripts_refactor_lint_report_pkg_plugins/#parse_3","title":"<code>parse</code>","text":"<p>Parse pydocstyle output and inject docstring issues grouped by symbol with full detail. Parameters: ['self: Any', 'dst: Dict[str, Dict[str, Any]]'] Returns: None</p>"},{"location":"api/scripts_refactor_parsers/","title":"<code>scripts/refactor/parsers</code>","text":""},{"location":"api/scripts_refactor_parsers/#scriptsrefactorparsers__init__","title":"<code>scripts.refactor.parsers.__init__</code>","text":"<p>\ud83e\udde0 Docstring Summary</p> Section Content Description No module description available. Args \u2014 Returns \u2014"},{"location":"api/scripts_refactor_parsers/#scriptsrefactorparsersdocstring_parser","title":"<code>scripts.refactor.parsers.docstring_parser</code>","text":"<p>\ud83e\udde0 Docstring Summary</p> Section Content Description Docstring Parser =============================== This module scans a Python project directory for missing or partial docstrings. It outputs structured JSON and markdown-style reports with description, args, and return sections. Also supports generating MkDocs-compatible markdown files. Args \u2014 Returns \u2014"},{"location":"api/scripts_refactor_parsers/#classes","title":"\ud83d\udce6 Classes","text":""},{"location":"api/scripts_refactor_parsers/#docstringanalyzer","title":"<code>DocstringAnalyzer</code>","text":"<p>No description available. Parameters: ['self: Any', 'exclude_dirs: List[str]'] Returns: None</p>"},{"location":"api/scripts_refactor_parsers/#docstringauditcli","title":"<code>DocstringAuditCLI</code>","text":"<p>No description available. Parameters: ['self: Any'] Returns: None</p>"},{"location":"api/scripts_refactor_parsers/#functions","title":"\ud83d\udee0\ufe0f Functions","text":""},{"location":"api/scripts_refactor_parsers/#split_docstring_sections","title":"<code>split_docstring_sections</code>","text":"<p>Split a docstring into its sections: description, args, and returns. Parameters: ['docstring: Optional[str]'] Returns: Dict[str, Optional[str]]</p>"},{"location":"api/scripts_refactor_parsers/#__init__","title":"<code>__init__</code>","text":"<p>No description available. Parameters: ['self: Any', 'exclude_dirs: List[str]'] Returns: None</p>"},{"location":"api/scripts_refactor_parsers/#should_exclude","title":"<code>should_exclude</code>","text":"<p>No description available. Parameters: ['self: Any', 'path: Path'] Returns: bool</p>"},{"location":"api/scripts_refactor_parsers/#_format_args","title":"<code>_format_args</code>","text":"<p>No description available. Parameters: ['self: Any', 'args_node: ast.arguments'] Returns: List[str]</p>"},{"location":"api/scripts_refactor_parsers/#arg_str","title":"<code>arg_str</code>","text":"<p>No description available. Parameters: ['arg: Any'] Returns: Any</p>"},{"location":"api/scripts_refactor_parsers/#_get_return_type","title":"<code>_get_return_type</code>","text":"<p>No description available. Parameters: ['self: Any', 'func_node: ast.FunctionDef'] Returns: str</p>"},{"location":"api/scripts_refactor_parsers/#_process_function","title":"<code>_process_function</code>","text":"<p>No description available. Parameters: ['self: Any', 'node: ast.FunctionDef'] Returns: Dict[str, Any]</p>"},{"location":"api/scripts_refactor_parsers/#_process_class","title":"<code>_process_class</code>","text":"<p>No description available. Parameters: ['self: Any', 'node: ast.ClassDef'] Returns: Dict[str, Any]</p>"},{"location":"api/scripts_refactor_parsers/#extract_docstrings","title":"<code>extract_docstrings</code>","text":"<p>Extract docstrings, args, and return types from a Python file using AST. Always returns a consistent structure even on parse failure. Parameters: ['self: Any', 'file_path: Path'] Returns: Dict[str, Any]</p>"},{"location":"api/scripts_refactor_parsers/#visit","title":"<code>visit</code>","text":"<p>No description available. Parameters: ['node: Any'] Returns: Any</p>"},{"location":"api/scripts_refactor_parsers/#analyze_directory","title":"<code>analyze_directory</code>","text":"<p>No description available. Parameters: ['self: Any', 'root: Path'] Returns: Dict[str, Dict[str, Any]]</p>"},{"location":"api/scripts_refactor_parsers/#__init___1","title":"<code>__init__</code>","text":"<p>Initialize the command-line interface for the docstring audit. Parameters: ['self: Any'] Returns: None</p>"},{"location":"api/scripts_refactor_parsers/#parse_args","title":"<code>parse_args</code>","text":"<p>Parse command-line arguments. Parameters: ['self: Any'] Returns: argparse.Namespace</p>"},{"location":"api/scripts_refactor_parsers/#run","title":"<code>run</code>","text":"<p>Run the docstring audit. Parameters: ['self: Any'] Returns: None</p>"},{"location":"api/scripts_refactor_parsers/#scriptsrefactorparsersjson_coverage_parser","title":"<code>scripts.refactor.parsers.json_coverage_parser</code>","text":"<p>\ud83e\udde0 Docstring Summary</p> Section Content Description No module description available. Args \u2014 Returns \u2014"},{"location":"api/scripts_refactor_parsers/#functions_1","title":"\ud83d\udee0\ufe0f Functions","text":""},{"location":"api/scripts_refactor_parsers/#_load_files","title":"<code>_load_files</code>","text":"<p>Return the <code>files</code> section with all keys normalised to POSIX paths. Parameters: ['json_path: str'] Returns: Dict[str, Any]</p>"},{"location":"api/scripts_refactor_parsers/#_best_suffix_match","title":"<code>_best_suffix_match</code>","text":"<p>Find the file-entry whose tail components best match requested. Returns the matching coverage dict or None if nothing plausible found. Parameters: ['files: Dict[str, Any]', 'requested: str'] Returns: Optional[Dict[str, Any]]</p>"},{"location":"api/scripts_refactor_parsers/#_fully_uncovered","title":"<code>_fully_uncovered</code>","text":"<p>Return a coverage dict that marks every method as 0 % covered. Parameters: ['method_ranges: Dict[str, Tuple[int, int]]'] Returns: Dict[str, Any]</p>"},{"location":"api/scripts_refactor_parsers/#_coverage_from_summary","title":"<code>_coverage_from_summary</code>","text":"<p>Extract coverage %, hits and missing lines list from a summary block. Parameters: ['summary: Dict[str, Any]', 'total: int'] Returns: Tuple[float, int, List[int]]</p>"},{"location":"api/scripts_refactor_parsers/#_coverage_from_executed","title":"<code>_coverage_from_executed</code>","text":"<p>No description available. Parameters: ['executed: List[int]', 'rng: Tuple[int, int]'] Returns: Tuple[float, int, List[int]]</p>"},{"location":"api/scripts_refactor_parsers/#parse_json_coverage","title":"<code>parse_json_coverage</code>","text":"<p>Return per-method coverage data for filepath based on a <code>coverage.py</code> JSON (v5) report previously converted with <code>coverage json</code>. Parameters: ['json_path: str', 'method_ranges: Dict[str, Tuple[int, int]]', 'filepath: str'] Returns: Dict[str, Any]</p>"},{"location":"api/scripts_unified_code_assistant/","title":"<code>scripts/unified_code_assistant</code>","text":""},{"location":"api/scripts_unified_code_assistant/#scriptsunified_code_assistant__init__","title":"<code>scripts.unified_code_assistant.__init__</code>","text":"<p>\ud83e\udde0 Docstring Summary</p> Section Content Description No module description available. Args \u2014 Returns \u2014"},{"location":"api/scripts_unified_code_assistant/#scriptsunified_code_assistantanalysis","title":"<code>scripts.unified_code_assistant.analysis</code>","text":"<p>\ud83e\udde0 Docstring Summary</p> Section Content Description No module description available. Args \u2014 Returns \u2014"},{"location":"api/scripts_unified_code_assistant/#functions","title":"\ud83d\udee0\ufe0f Functions","text":""},{"location":"api/scripts_unified_code_assistant/#analyze_report","title":"<code>analyze_report</code>","text":"<p>Analyze the report data to extract top offenders, severity data, and metrics. Parameters: ['report_data: Dict[str, Any]', 'top_n: int', 'path_filter: Optional[str]'] Returns: Dict[str, Any]</p>"},{"location":"api/scripts_unified_code_assistant/#scriptsunified_code_assistantassistant_cli","title":"<code>scripts.unified_code_assistant.assistant_cli</code>","text":"<p>\ud83e\udde0 Docstring Summary</p> Section Content Description No module description available. Args \u2014 Returns \u2014"},{"location":"api/scripts_unified_code_assistant/#functions_1","title":"\ud83d\udee0\ufe0f Functions","text":""},{"location":"api/scripts_unified_code_assistant/#chat_mode","title":"<code>chat_mode</code>","text":"<p>No description available. Parameters: ['report_path: str', 'config: ConfigManager', 'top_n: int', 'path_filter: str'] Returns: None</p>"},{"location":"api/scripts_unified_code_assistant/#main","title":"<code>main</code>","text":"<p>No description available. Returns: None</p>"},{"location":"api/scripts_unified_code_assistant/#scriptsunified_code_assistantassistant_utils","title":"<code>scripts.unified_code_assistant.assistant_utils</code>","text":"<p>\ud83e\udde0 Docstring Summary</p> Section Content Description No module description available. Args \u2014 Returns \u2014"},{"location":"api/scripts_unified_code_assistant/#functions_2","title":"\ud83d\udee0\ufe0f Functions","text":""},{"location":"api/scripts_unified_code_assistant/#load_report","title":"<code>load_report</code>","text":"<p>No description available. Parameters: ['path: str'] Returns: Dict[str, Any]</p>"},{"location":"api/scripts_unified_code_assistant/#extract_code_snippets","title":"<code>extract_code_snippets</code>","text":"<p>No description available. Parameters: ['file_path: str', 'issue_locations: List[Dict[str, Any]]', 'context_lines: int'] Returns: Dict[str, str]</p>"},{"location":"api/scripts_unified_code_assistant/#_format_snippet","title":"<code>_format_snippet</code>","text":"<p>No description available. Parameters: ['lines: List[str]', 'line_num: int', 'context_lines: int'] Returns: str</p>"},{"location":"api/scripts_unified_code_assistant/#get_issue_locations","title":"<code>get_issue_locations</code>","text":"<p>Extract and categorize issues for a given file path from the report data. Returns a dict with keys: - 'mypy_errors': List of mypy issue dicts - 'lint_issues': List of lint issue dicts - 'complexity_issues': List of complexity issue dicts Parameters: ['file_path: str', 'report_data: Dict[str, Any]'] Returns: Dict[str, List[Dict[str, Any]]]</p>"},{"location":"api/scripts_unified_code_assistant/#_extract_mypy_issues","title":"<code>_extract_mypy_issues</code>","text":"<p>No description available. Parameters: ['file_data: Dict[str, Any]'] Returns: List[Dict[str, Any]]</p>"},{"location":"api/scripts_unified_code_assistant/#_extract_lint_issues","title":"<code>_extract_lint_issues</code>","text":"<p>No description available. Parameters: ['file_data: Dict[str, Any]'] Returns: List[Dict[str, Any]]</p>"},{"location":"api/scripts_unified_code_assistant/#_extract_complexity_issues","title":"<code>_extract_complexity_issues</code>","text":"<p>No description available. Parameters: ['file_data: Dict[str, Any]'] Returns: List[Dict[str, Any]]</p>"},{"location":"api/scripts_unified_code_assistant/#scriptsunified_code_assistantmodule_summarizer","title":"<code>scripts.unified_code_assistant.module_summarizer</code>","text":"<p>\ud83e\udde0 Docstring Summary</p> Section Content Description No module description available. Args \u2014 Returns \u2014"},{"location":"api/scripts_unified_code_assistant/#functions_3","title":"\ud83d\udee0\ufe0f Functions","text":""},{"location":"api/scripts_unified_code_assistant/#summarize_modules","title":"<code>summarize_modules</code>","text":"<p>Generate summaries of module functionality based on docstrings. Parameters: ['report_data: Dict', 'summarizer: AISummarizer', 'config: Any', 'path_filter: Optional[str]'] Returns: Dict[str, str]</p>"},{"location":"api/scripts_unified_code_assistant/#scriptsunified_code_assistantprompt_builder","title":"<code>scripts.unified_code_assistant.prompt_builder</code>","text":"<p>\ud83e\udde0 Docstring Summary</p> Section Content Description No module description available. Args \u2014 Returns \u2014"},{"location":"api/scripts_unified_code_assistant/#functions_4","title":"\ud83d\udee0\ufe0f Functions","text":""},{"location":"api/scripts_unified_code_assistant/#build_contextual_prompt","title":"<code>build_contextual_prompt</code>","text":"<p>No description available. Parameters: ['query: str', 'top_offenders: List[Tuple[str, any, List[any], int, int, float]]', 'summary_metrics: Dict[str, any]', 'persona: str'] Returns: str</p>"},{"location":"api/scripts_unified_code_assistant/#build_enhanced_contextual_prompt","title":"<code>build_enhanced_contextual_prompt</code>","text":"<p>No description available. Parameters: ['query: str', 'top_offenders: List[Tuple[str, any, List[any], int, int, float]]', 'summary_metrics: Dict[str, any]', 'module_summaries: Dict[str, str]', 'file_issues: Dict[str, Dict[str, List[any]]]', 'file_recommendations: Dict[str, str]', 'persona: str'] Returns: str</p>"},{"location":"api/scripts_unified_code_assistant/#scriptsunified_code_assistantstrategy","title":"<code>scripts.unified_code_assistant.strategy</code>","text":"<p>\ud83e\udde0 Docstring Summary</p> Section Content Description No module description available. Args \u2014 Returns \u2014"},{"location":"api/scripts_unified_code_assistant/#functions_5","title":"\ud83d\udee0\ufe0f Functions","text":""},{"location":"api/scripts_unified_code_assistant/#generate_strategy","title":"<code>generate_strategy</code>","text":"<p>Generate strategic recommendations using severity and metric data. Parameters: ['severity_data: List[Dict]', 'summary_metrics: Dict', 'limit: int', 'persona: str', 'summarizer: AISummarizer'] Returns: str</p>"},{"location":"api/scripts_utils/","title":"<code>scripts/utils</code>","text":""},{"location":"api/scripts_utils/#scriptsutils__init__","title":"<code>scripts.utils.__init__</code>","text":"<p>\ud83e\udde0 Docstring Summary</p> Section Content Description No module description available. Args \u2014 Returns \u2014"},{"location":"api/scripts_utils/#scriptsutilsfile_io","title":"<code>scripts.utils.file_io</code>","text":"<p>\ud83e\udde0 Docstring Summary</p> Section Content Description No module description available. Args \u2014 Returns \u2014"},{"location":"api/scripts_utils/#functions","title":"\ud83d\udee0\ufe0f Functions","text":""},{"location":"api/scripts_utils/#load_json_any","title":"<code>load_json_any</code>","text":"<p>Load .json or compressed .json.{gz,bz2,xz} transparently. Returns {} on missing file for caller-side resilience. Parameters: ['path: str | os.PathLike'] Returns: Dict[str, Any]</p>"},{"location":"api/scripts_utils/#scriptsutilsfile_utils","title":"<code>scripts.utils.file_utils</code>","text":"<p>\ud83e\udde0 Docstring Summary</p> Section Content Description No module description available. Args \u2014 Returns \u2014"},{"location":"api/scripts_utils/#functions_1","title":"\ud83d\udee0\ufe0f Functions","text":""},{"location":"api/scripts_utils/#sanitize_filename","title":"<code>sanitize_filename</code>","text":"<p>Return name stripped of illegal chars and truncated to 100 chars. Parameters: ['name: str'] Returns: str</p>"},{"location":"api/scripts_utils/#get_timestamp","title":"<code>get_timestamp</code>","text":"<p>Current time as <code>YYYY\u2011MM\u2011DD_HH\u2011MM\u2011SS</code>. Returns: str</p>"},{"location":"api/scripts_utils/#_to_path","title":"<code>_to_path</code>","text":"<p>Internal: coerce p to <code>Path</code> exactly once. Parameters: ['p: Union[str, Path]'] Returns: Path</p>"},{"location":"api/scripts_utils/#safe_path","title":"<code>safe_path</code>","text":"<p>Ensure <code>path.parent</code> exists; return <code>Path</code>. Parameters: ['path: Union[str, Path]'] Returns: Path</p>"},{"location":"api/scripts_utils/#write_json","title":"<code>write_json</code>","text":"<p>No description available. Parameters: ['path: Union[str, Path]', 'data: dict'] Returns: None</p>"},{"location":"api/scripts_utils/#read_json","title":"<code>read_json</code>","text":"<p>No description available. Parameters: ['path: Union[str, Path]'] Returns: dict</p>"},{"location":"api/scripts_utils/#safe_read_json","title":"<code>safe_read_json</code>","text":"<p>No description available. Parameters: ['filepath: Union[str, Path]'] Returns: dict</p>"},{"location":"api/scripts_utils/#make_backup","title":"<code>make_backup</code>","text":"<p>No description available. Parameters: ['file_path: Union[str, Path]'] Returns: str | None</p>"},{"location":"api/scripts_utils/#zip_python_files","title":"<code>zip_python_files</code>","text":"<p>Zip all <code>.py</code> files under root_dir (recursively), excluding any directory whose name appears in exclude_dirs (case\u2011sensitive match against each path part). If exclude_dirs is <code>None</code> we default to::{.python} {\".venv\", \"pycache\", \".git\", \"node_modules\"} Parameters: ['output_path: Union[str, Path]', 'root_dir: Union[str, Path]', 'exclude_dirs: Optional[Iterable[str]]'] Returns: None</p>"},{"location":"api/scripts_utils/#scriptsutilsgit_utils","title":"<code>scripts.utils.git_utils</code>","text":"<p>\ud83e\udde0 Docstring Summary</p> Section Content Description git_utils.py This module provides utility functions for working with Git, including: - Getting changed Python files compared to a specified branch. - Running an interactive commit flow to create and push a new branch. Intended for use in CI workflows and scripts to automate code quality and coverage reporting. Args \u2014 Returns \u2014"},{"location":"api/scripts_utils/#functions_2","title":"\ud83d\udee0\ufe0f Functions","text":""},{"location":"api/scripts_utils/#get_changed_files","title":"<code>get_changed_files</code>","text":"<p>Returns a list of changed Python files compared to the specified Git base branch. Runs 'git diff --name-only' to identify changed files and filters for those ending with '.py'. Handles compatibility with different Python versions and returns an empty list if the Git command fails. Parameters: ['base: str'] Returns: List[str]</p>"},{"location":"api/scripts_utils/#interactive_commit_flow","title":"<code>interactive_commit_flow</code>","text":"<p>Guides the user through an interactive Git commit and push process. Prompts the user to either push changes to the default branch or create and push to a new branch, handling all Git commands interactively. Parameters: ['default_branch: str'] Returns: None</p>"},{"location":"api/scripts_utils/#get_current_branch","title":"<code>get_current_branch</code>","text":"<p>Returns the name of the current Git branch as a string. Executes a Git command to determine the active branch in the local repository. Returns: str</p>"},{"location":"api/scripts_utils/#scriptsutilslink_summaries_to_raw_logs","title":"<code>scripts.utils.link_summaries_to_raw_logs</code>","text":"<p>\ud83e\udde0 Docstring Summary</p> Section Content Description Module for processing raw logs and injecting entries into correction summaries. This module provides functionality to flatten raw log entries based on categories and inject those entries into correction summaries. Functions: - flatten_raw_entries: Flattens raw log entries for a specified category and subcategory. - inject_entries_into_summaries: Injects raw log entries into correction summaries based on batch labels. Args \u2014 Returns \u2014"},{"location":"api/scripts_utils/#functions_3","title":"\ud83d\udee0\ufe0f Functions","text":""},{"location":"api/scripts_utils/#flatten_raw_entries","title":"<code>flatten_raw_entries</code>","text":"<p>Flatten raw log entries for a given main category and subcategory across all dates, sorted chronologically. Parameters: ['raw_logs: dict', 'main_cat: str', 'subcat: str'] Returns: list</p>"},{"location":"api/scripts_utils/#inject_entries_into_summaries","title":"<code>inject_entries_into_summaries</code>","text":"<p>Injects corresponding raw log entries into each batch of correction summaries based on batch labels. Loads configuration to determine file paths, reads raw logs and correction summaries, and for each batch in the summaries, injects the relevant raw entries by extracting their content fields. Updates the summaries file in place. Returns: None</p>"},{"location":"api/scripts_utils/#scriptsutilszip_util","title":"<code>scripts.utils.zip_util</code>","text":"<p>\ud83e\udde0 Docstring Summary</p> Section Content Description zip_util.py This module provides the main entry point for the zip_util utility, which zips all .py files in a project, excluding specified directories. Args \u2014 Returns \u2014"},{"location":"api/scripts_utils/#functions_4","title":"\ud83d\udee0\ufe0f Functions","text":""},{"location":"api/scripts_utils/#main","title":"<code>main</code>","text":"<p>Parses command-line arguments to zip all .py files in a project, excluding specified directories. Calls the internal utility to create the zip archive and logs the output path. Returns: Any</p>"},{"location":"coverage/","title":"Test Coverage Report Index","text":""},{"location":"coverage/#summary","title":"Summary","text":"Metric Coverage Overall Coverage 74.65% Lines Covered 3163 of 4113 Branches Covered 642 of 984 <ul> <li>scripts/</li> <li>scripts/ai/</li> <li>scripts/ci_analyzer/</li> <li>scripts/config/</li> <li>scripts/core/</li> <li>scripts/doc_generation/</li> <li>scripts/gui/</li> <li>scripts/gui/base/</li> <li>scripts/gui/panels/</li> <li>scripts/gui/tabs/</li> <li>scripts/indexers/</li> <li>scripts/kg/</li> <li>scripts/kg/modules/</li> <li>scripts/refactor/</li> <li>scripts/refactor/complexity/</li> <li>scripts/refactor/compressor/</li> <li>scripts/refactor/lint_report_pkg/</li> <li>scripts/refactor/lint_report_pkg/plugins/</li> <li>scripts/refactor/parsers/</li> <li>scripts/unified_code_assistant/</li> <li>scripts/utils/</li> </ul>"},{"location":"coverage/scripts/","title":"Test Coverage Report for <code>scripts/</code>","text":"<p>Folder Coverage: 88.62% (109 of 123 lines covered)</p>"},{"location":"coverage/scripts/#file-coverage","title":"\ud83d\udcc4 File Coverage","text":"File Line Coverage Branch Coverage dev_commit.py 94.92% 0.00% main.py 66.67% 0.00% paths.py 93.18% 0.00%"},{"location":"coverage/scripts_ai/","title":"Test Coverage Report for <code>scripts/ai/</code>","text":"<p>Folder Coverage: 88.69% (290 of 327 lines covered)</p>"},{"location":"coverage/scripts_ai/#file-coverage","title":"\ud83d\udcc4 File Coverage","text":"File Line Coverage Branch Coverage ai_summarizer.py 89.74% N/A llm_optimization.py 96.75% 0.00% llm_refactor_advisor.py 90.70% 0.00% llm_router.py 100.00% N/A module_docstring_summarizer.py 87.04% 0.00% module_idea_generator.py 72.11% 0.00%"},{"location":"coverage/scripts_ci_analyzer/","title":"Test Coverage Report for <code>scripts/ci_analyzer/</code>","text":"<p>Folder Coverage: 100.00% (137 of 137 lines covered)</p>"},{"location":"coverage/scripts_ci_analyzer/#file-coverage","title":"\ud83d\udcc4 File Coverage","text":"File Line Coverage Branch Coverage drilldown.py 100.00% 0.00% metrics_summary.py 100.00% 0.00% severity_audit.py 100.00% 0.00% severity_index.py 100.00% 0.00%"},{"location":"coverage/scripts_config/","title":"Test Coverage Report for <code>scripts/config/</code>","text":"<p>Folder Coverage: 88.36% (129 of 146 lines covered)</p>"},{"location":"coverage/scripts_config/#file-coverage","title":"\ud83d\udcc4 File Coverage","text":"File Line Coverage Branch Coverage config_loader.py 76.92% 0.00% config_manager.py 92.71% N/A"},{"location":"coverage/scripts_core/","title":"Test Coverage Report for <code>scripts/core/</code>","text":"<p>Folder Coverage: 80.50% (260 of 323 lines covered)</p>"},{"location":"coverage/scripts_core/#file-coverage","title":"\ud83d\udcc4 File Coverage","text":"File Line Coverage Branch Coverage core.py 86.11% 0.00% core_cli.py 0.00% 0.00% environment_bootstrapper.py 85.71% 0.00% log_manager.py 89.09% 0.00% markdown_logger.py 92.86% 0.00% summary_engine.py 90.91% N/A summary_tracker.py 77.52% 0.00%"},{"location":"coverage/scripts_doc_generation/","title":"Test Coverage Report for <code>scripts/doc_generation/</code>","text":"<p>Folder Coverage: 81.95% (227 of 277 lines covered)</p>"},{"location":"coverage/scripts_doc_generation/#file-coverage","title":"\ud83d\udcc4 File Coverage","text":"File Line Coverage Branch Coverage coverage_doc_generation.py 67.27% 0.00% doc_renderers.py 92.96% 0.00% docstring_doc_generation.py 71.43% 0.00% quality_doc_generation.py 75.00% 0.00%"},{"location":"coverage/scripts_gui/","title":"Test Coverage Report for <code>scripts/gui/</code>","text":"<p>Folder Coverage: 37.80% (144 of 381 lines covered)</p>"},{"location":"coverage/scripts_gui/#file-coverage","title":"\ud83d\udcc4 File Coverage","text":"File Line Coverage Branch Coverage gui.py 12.14% 0.00% gui_controller.py 70.59% 0.00% gui_helpers.py 32.88% 0.00% gui_logging.py 25.00% 0.00% style_manager.py 100.00% N/A widget_factory.py 100.00% N/A"},{"location":"coverage/scripts_gui_base/","title":"Test Coverage Report for <code>scripts/gui/base/</code>","text":"<p>Folder Coverage: 100.00% (20 of 20 lines covered)</p>"},{"location":"coverage/scripts_gui_base/#file-coverage","title":"\ud83d\udcc4 File Coverage","text":"File Line Coverage Branch Coverage base_panel.py 100.00% N/A base_tab.py 100.00% N/A"},{"location":"coverage/scripts_gui_panels/","title":"Test Coverage Report for <code>scripts/gui/panels/</code>","text":"<p>Folder Coverage: 91.80% (112 of 122 lines covered)</p>"},{"location":"coverage/scripts_gui_panels/#file-coverage","title":"\ud83d\udcc4 File Coverage","text":"File Line Coverage Branch Coverage action_panel.py 89.74% 0.00% coverage_panel.py 89.47% 0.00% entry_panel.py 80.56% 0.00% log_panel.py 92.00% 0.00%"},{"location":"coverage/scripts_gui_tabs/","title":"Test Coverage Report for <code>scripts/gui/tabs/</code>","text":"<p>Folder Coverage: 100.00% (28 of 28 lines covered)</p>"},{"location":"coverage/scripts_gui_tabs/#file-coverage","title":"\ud83d\udcc4 File Coverage","text":"File Line Coverage Branch Coverage main_tab.py 88.89% 0.00%"},{"location":"coverage/scripts_indexers/","title":"Test Coverage Report for <code>scripts/indexers/</code>","text":"<p>Folder Coverage: 79.82% (174 of 218 lines covered)</p>"},{"location":"coverage/scripts_indexers/#file-coverage","title":"\ud83d\udcc4 File Coverage","text":"File Line Coverage Branch Coverage base_indexer.py 85.39% 0.00% raw_log_indexer.py 77.33% 0.00% summary_indexer.py 74.44% 0.00%"},{"location":"coverage/scripts_kg/","title":"Test Coverage Report for <code>scripts/kg/</code>","text":"<p>Folder Coverage: 100.00% (22 of 22 lines covered)</p>"},{"location":"coverage/scripts_kg/#file-coverage","title":"\ud83d\udcc4 File Coverage","text":"File Line Coverage Branch Coverage generate_codebase_kg.py 96.15% 0.00%"},{"location":"coverage/scripts_kg_modules/","title":"Test Coverage Report for <code>scripts/kg/modules/</code>","text":"<p>Folder Coverage: 64.03% (178 of 278 lines covered)</p>"},{"location":"coverage/scripts_kg_modules/#file-coverage","title":"\ud83d\udcc4 File Coverage","text":"File Line Coverage Branch Coverage analysis.py 100.00% N/A data_extractors.py 96.25% 0.00% graph_builder.py 68.55% 0.00% utils.py 48.15% N/A visualization.py 37.96% 0.00%"},{"location":"coverage/scripts_refactor/","title":"Test Coverage Report for <code>scripts/refactor/</code>","text":"<p>Folder Coverage: 76.42% (470 of 615 lines covered)</p>"},{"location":"coverage/scripts_refactor/#file-coverage","title":"\ud83d\udcc4 File Coverage","text":"File Line Coverage Branch Coverage ast_extractor.py 90.38% 0.00% merge_audit_reports.py 81.08% 0.00% method_line_ranges.py 92.45% 0.00% refactor_guard.py 68.14% 0.00% refactor_guard_cli.py 51.70% 0.00% strictness_analyzer.py 70.44% 0.00% test_discovery.py 87.39% 0.00%"},{"location":"coverage/scripts_refactor_complexity/","title":"Test Coverage Report for <code>scripts/refactor/complexity/</code>","text":"<p>Folder Coverage: 98.41% (124 of 126 lines covered)</p>"},{"location":"coverage/scripts_refactor_complexity/#file-coverage","title":"\ud83d\udcc4 File Coverage","text":"File Line Coverage Branch Coverage complexity_analyzer.py 94.19% 0.00% complexity_summary.py 97.50% 0.00%"},{"location":"coverage/scripts_refactor_compressor/","title":"Test Coverage Report for <code>scripts/refactor/compressor/</code>","text":"<p>Folder Coverage: 50.97% (105 of 206 lines covered)</p>"},{"location":"coverage/scripts_refactor_compressor/#file-coverage","title":"\ud83d\udcc4 File Coverage","text":"File Line Coverage Branch Coverage merged_report_squeezer.py 48.48% 0.00% strictness_report_squeezer.py 49.58% 0.00%"},{"location":"coverage/scripts_refactor_lint_report_pkg/","title":"Test Coverage Report for <code>scripts/refactor/lint_report_pkg/</code>","text":"<p>Folder Coverage: 68.50% (87 of 127 lines covered)</p>"},{"location":"coverage/scripts_refactor_lint_report_pkg/#file-coverage","title":"\ud83d\udcc4 File Coverage","text":"File Line Coverage Branch Coverage core.py 81.82% N/A helpers.py 60.87% 0.00% lint_report_cli.py 84.21% 0.00% path_utils.py 100.00% N/A quality_checker.py 68.33% 0.00% quality_registry.py 0.00% 0.00%"},{"location":"coverage/scripts_refactor_lint_report_pkg_plugins/","title":"Test Coverage Report for <code>scripts/refactor/lint_report_pkg/plugins/</code>","text":"<p>Folder Coverage: 92.77% (77 of 83 lines covered)</p>"},{"location":"coverage/scripts_refactor_lint_report_pkg_plugins/#file-coverage","title":"\ud83d\udcc4 File Coverage","text":"File Line Coverage Branch Coverage black.py 94.74% 0.00% flake8.py 96.43% 0.00% mypy.py 95.00% 0.00% pydocstyle.py 85.29% 0.00%"},{"location":"coverage/scripts_refactor_parsers/","title":"Test Coverage Report for <code>scripts/refactor/parsers/</code>","text":"<p>Folder Coverage: 94.05% (174 of 185 lines covered)</p>"},{"location":"coverage/scripts_refactor_parsers/#file-coverage","title":"\ud83d\udcc4 File Coverage","text":"File Line Coverage Branch Coverage docstring_parser.py 89.83% 0.00% json_coverage_parser.py 98.48% 0.00%"},{"location":"coverage/scripts_unified_code_assistant/","title":"Test Coverage Report for <code>scripts/unified_code_assistant/</code>","text":"<p>Folder Coverage: 75.41% (138 of 183 lines covered)</p>"},{"location":"coverage/scripts_unified_code_assistant/#file-coverage","title":"\ud83d\udcc4 File Coverage","text":"File Line Coverage Branch Coverage analysis.py 92.86% 0.00% assistant_cli.py 55.05% 0.00% assistant_utils.py 82.50% 0.00% module_summarizer.py 91.30% 0.00% prompt_builder.py 100.00% 0.00% strategy.py 100.00% N/A"},{"location":"coverage/scripts_utils/","title":"Test Coverage Report for <code>scripts/utils/</code>","text":"<p>Folder Coverage: 84.95% (158 of 186 lines covered)</p>"},{"location":"coverage/scripts_utils/#file-coverage","title":"\ud83d\udcc4 File Coverage","text":"File Line Coverage Branch Coverage file_io.py 0.00% 0.00% file_utils.py 92.00% 0.00% git_utils.py 91.43% 0.00% link_summaries_to_raw_logs.py 89.29% 0.00% zip_util.py 100.00% N/A"},{"location":"overview/","title":"ZephyrusLogger","text":"<p>ZephyrusLogger is a robust, modular logging and summarization framework designed for developers, designers, and writers working with iterative ideas, creative systems, or AI-driven workflows.</p> <p>It combines the power of LLMs, semantic indexing (via FAISS), and user-friendly interfaces to help you track, analyze, and reflect on evolving concepts over time.</p>"},{"location":"overview/#core-features","title":"\u2728 Core Features","text":"<ul> <li>\ud83e\udde0 AI Summarization: Automatically distill raw ideas into structured summaries based on subcategories you define.</li> <li>\ud83d\udd0d Searchable Vector Index: Store and retrieve summaries using semantic similarity via FAISS.</li> <li>\ud83d\udcca Coverage Tracking: View real-time coverage stats across creative or technical categories.</li> <li>\ud83d\udda5\ufe0f Dual Interface: Use the CLI for automation or launch a GUI for interactive logging and inspection.</li> <li>\ud83e\uddea RefactorGuard: Analyze Python code refactors with method diffs, complexity scoring, and test coverage checks.</li> <li>\ud83e\uddf0 Developer Utilities: Built-in tools for zipping, auditing, and maintaining high-code-quality standards.</li> </ul>"},{"location":"overview/#use-cases","title":"\ud83d\udccc Use Cases","text":"<ul> <li>Creative writing or game design logs with narrative + worldbuilding structure</li> <li>Technical notes or R&amp;D experiments organized by functional areas</li> <li>Long-term AI system tracking with category-level reflection prompts</li> <li>Internal tooling for auditing and summarizing refactor progress</li> </ul>"},{"location":"overview/#tech-stack","title":"\ud83d\udd27 Tech Stack","text":"<ul> <li>Python 3.11+</li> <li>PyQt5 (GUI)</li> <li>FAISS (vector similarity search)</li> <li>sentence-transformers (<code>all-MiniLM-L6-v2</code> by default)</li> <li>Optional: HuggingFace, OpenAI, Ollama</li> </ul>"},{"location":"overview/#philosophy","title":"\ud83d\udca1 Philosophy","text":"<p>ZephyrusLogger was built for power-users who want to reason about their thinking. It offers flexible logging with structured meaning, while remaining light enough for rapid prototyping and iteration.</p> <p>Think of it as a semantic journal, backed by LLMs and embeddable search.</p>"},{"location":"overview/#next-steps","title":"\ud83d\udd17 Next Steps","text":"<ul> <li>Installation Guide</li> <li>Configuration Reference</li> <li>Using the GUI or CLI</li> <li>Testing &amp; Coverage</li> </ul>"},{"location":"overview/README_Full/","title":"Index","text":""},{"location":"overview/README_Full/#zephyruslogger","title":"ZephyrusLogger","text":"<p>ZephyrusLogger is a robust, modular logging and summarization framework designed for developers, designers, and writers working with iterative ideas, creative systems, or AI-driven workflows.</p> <p>It combines the power of LLMs, semantic indexing (via FAISS), and user-friendly interfaces to help you track, analyze, and reflect on evolving concepts over time.</p>"},{"location":"overview/README_Full/#core-features","title":"\u2728 Core Features","text":"<ul> <li>\ud83e\udde0 AI Summarization: Automatically distill raw ideas into structured summaries based on subcategories you define.</li> <li>\ud83d\udd0d Searchable Vector Index: Store and retrieve summaries using semantic similarity via FAISS.</li> <li>\ud83d\udcca Coverage Tracking: View real-time coverage stats across creative or technical categories.</li> <li>\ud83d\udda5\ufe0f Dual Interface: Use the CLI for automation or launch a GUI for interactive logging and inspection.</li> <li>\ud83e\uddea RefactorGuard: Analyze Python code refactors with method diffs, complexity scoring, and test coverage checks.</li> <li>\ud83e\uddf0 Developer Utilities: Built-in tools for zipping, auditing, and maintaining high-code-quality standards.</li> </ul>"},{"location":"overview/README_Full/#use-cases","title":"\ud83d\udccc Use Cases","text":"<ul> <li>Creative writing or game design logs with narrative + worldbuilding structure</li> <li>Technical notes or R&amp;D experiments organized by functional areas</li> <li>Long-term AI system tracking with category-level reflection prompts</li> <li>Internal tooling for auditing and summarizing refactor progress</li> </ul>"},{"location":"overview/README_Full/#tech-stack","title":"\ud83d\udd27 Tech Stack","text":"<ul> <li>Python 3.11+</li> <li>PyQt5 (GUI)</li> <li>FAISS (vector similarity search)</li> <li>sentence-transformers (<code>all-MiniLM-L6-v2</code> by default)</li> <li>Optional: HuggingFace, OpenAI, Ollama</li> </ul>"},{"location":"overview/README_Full/#philosophy","title":"\ud83d\udca1 Philosophy","text":"<p>ZephyrusLogger was built for power-users who want to reason about their thinking. It offers flexible logging with structured meaning, while remaining light enough for rapid prototyping and iteration.</p> <p>Think of it as a semantic journal, backed by LLMs and embeddable search.</p>"},{"location":"overview/README_Full/#next-steps","title":"\ud83d\udd17 Next Steps","text":"<ul> <li>Installation Guide</li> <li>Configuration Reference</li> <li>Using the GUI or CLI</li> <li>Testing &amp; Coverage</li> </ul>"},{"location":"overview/README_Full/#install","title":"Install","text":""},{"location":"overview/README_Full/#installation-guide","title":"\ud83d\udee0 Installation Guide","text":"<p>This guide walks you through setting up ZephyrusLogger in a local development or production environment.</p>"},{"location":"overview/README_Full/#requirements","title":"\u2705 Requirements","text":"<ul> <li>Python 3.11.x (avoid 3.11.9 on Windows if using GUI \u2014 known tkinter issue)</li> <li>pip &gt;= 21.0</li> <li>OS: Windows, macOS, Linux (tested on Windows + Ubuntu)</li> </ul>"},{"location":"overview/README_Full/#1-clone-the-repo","title":"\ud83d\udce6 1. Clone the Repo","text":"<p>```bash git clone https://github.com/your-org/zephyrus-logger.git cd zephyrus-logger</p> <p>\ud83d\udc0d 2. Set Up a Virtual Environment</p> <p>python -m venv .venv source .venv/bin/activate  # or .venv\\Scripts\\activate on Windows</p> <p>\ud83d\udce6 3. Install Dependencies</p> <p>python -m pip install --upgrade pip wheel setuptools pip install -r requirements.txt</p> <pre><code>\ud83d\udca1 For Windows + FAISS, install with:\n</code></pre> <p>pip install faiss-cpu --only-binary=faiss-cpu</p> <p>\ud83d\udcbe 4. Optional: GPU Support (FAISS)</p> <p>FAISS GPU isn't required, but if needed:</p> <p>pip install faiss-gpu  # \u26a0\ufe0f may require CUDA &amp; compilation support</p> <p>\ud83e\udde0 5. Optional: LLM Support</p> <p>ZephyrusLogger supports multiple backends:</p> <pre><code>OpenAI \u2192 Requires OPENAI_API_KEY or key in config.json\n\nOllama \u2192 Local model serving, e.g., Mistral\n</code></pre> <p>Install dependencies for LLMs:</p> <p>pip install openai sentence-transformers</p> <p>\ud83e\uddea 6. Verify Installation</p> <p>Run the canary test:</p> <p>pytest tests/test_canary.py</p> <p>Then launch the app:</p> <p>python scripts/main.py</p> <p>\ud83e\uddea Troubleshooting Problem Solution ModuleNotFoundError: scripts    Set PYTHONPATH=. or inject sys.path manually FAISS file write error  Ensure vector_store/ directory exists GUI fails to load   Check use_gui: true in config.json and tkinter installed</p>"},{"location":"overview/README_Full/#config","title":"Config","text":""},{"location":"overview/README_Full/#configuration-guide-configjson","title":"\u2699\ufe0f Configuration Guide (<code>config.json</code>)","text":"<p>ZephyrusLogger is fully driven by a centralized <code>config.json</code> file located at:</p> <p>config/config.json</p> <p>This file controls everything from runtime behavior to GUI layout, LLM selection, vector indexing paths, and developer flags.</p>"},{"location":"overview/README_Full/#top-level-keys","title":"\ud83d\udd11 Top-Level Keys","text":"Key Type Description <code>mode</code> string <code>\"test\"</code> or <code>\"full\"</code> \u2013 controls whether full indexing &amp; vector storage are enabled <code>use_gui</code> boolean Toggle GUI on launch <code>test_mode</code> boolean If true, redirects paths to mock/test-safe folders <code>dev_mode</code> boolean Enables logging/debugging flags <code>markdown_export</code> boolean If true, allows Markdown export of entries"},{"location":"overview/README_Full/#llm-settings","title":"\ud83e\udd16 LLM Settings","text":"Key Description <code>llm_provider</code> <code>\"openai\"</code>, <code>\"huggingface\"</code>, <code>\"ollama\"</code> <code>llm_model</code> Model name (e.g. <code>\"gpt-3.5-turbo\"</code>, <code>\"mistral\"</code>) <code>embedding_model</code> SentenceTransformers model name (e.g. <code>\"all-MiniLM-L6-v2\"</code>) \u2013 fallback if not defined"},{"location":"overview/README_Full/#categories-prompts","title":"\ud83e\udde0 Categories &amp; Prompts","text":"Section Description <code>category_structure</code> Maps each major category (e.g. <code>Narrative</code>, <code>World</code>) to subcategories (e.g. <code>Plot</code>, <code>Magic</code>, <code>Faction</code>) <code>prompts_by_subcategory</code> Maps each subcategory to a summarization prompt \u2013 this powers the AI guidance in the GUI or CLI <p>Example: ```json {   \"category_structure\": {     \"Narrative\": [\"Plot\", \"Themes\"],     \"World\": [\"Factions\", \"Magic\"]   },   \"prompts_by_subcategory\": {     \"Plot\": \"Summarize this plot point...\",     \"Magic\": \"Describe how this magic system functions...\"   } }</p> <p>\ud83d\udce6 Storage Paths Key Description summary_data_path   Where to save/load structured summary entries raw_log_path    Where raw input text is saved faiss_index_path    Vector index file (*.faiss) faiss_metadata_path JSON metadata matching vectors to entries tracker_path    Saves overall category coverage tracker (summary_tracker.json) gui_state_path  Remembers last selected dropdowns, inputs, etc. \ud83e\uddea Mock/Test Overrides</p> <p>If test_mode: true, these paths override real ones: Key Description test_summary_data_path  Summary JSON for test runs test_raw_log_path   Raw logs for test runs test_faiss_index_path   Temp index file test_faiss_metadata_path    Temp metadata file test_tracker_path   Tracker state for test runs \ud83e\uddfc Tips</p> <pre><code>You can reload config.json on-the-fly via CLI/GUI triggers.\n\nIf any key is missing, ZephyrusLogger will log a warning and use a default.\n\nInvalid paths will not crash the app, but will skip indexing unless caught.\n</code></pre>"},{"location":"overview/README_Full/#usage","title":"Usage","text":""},{"location":"overview/README_Full/#usage-guide","title":"\ud83d\ude80 Usage Guide","text":"<p>ZephyrusLogger can be used either as an interactive GUI or as a CLI-based logging engine. It\u2019s designed to be flexible, scriptable, and modular.</p>"},{"location":"overview/README_Full/#gui-mode-default","title":"\ud83d\udda5\ufe0f GUI Mode (Default)","text":"<p>To launch the graphical interface:</p> <p>```bash python scripts/main.py</p> <p>Make sure use_gui is set to true in your config/config.json. Key Features:</p> <pre><code>Dropdown-based subcategory selection\n\nPrompt-assisted AI summarization\n\nReal-time coverage overview\n\nLogs visible inside app\n\nMarkdown export (if enabled)\n</code></pre> <p>\ud83d\udcbb CLI Mode</p> <p>You can also run in headless CLI mode by setting:</p> <p>\"use_gui\": false</p> <p>Then run:</p> <p>python scripts/main.py</p> <p>This will process summaries and logs without the GUI, useful for automation or fast entry. \ud83e\udde0 Logging an Idea</p> <pre><code>Pick a subcategory (e.g., Narrative \u2192 Plot)\n\nType or paste your raw input\n\nThe system will:\n\n    Apply a prompt (from config)\n\n    Run the LLM\n\n    Save both the input + summary\n\n    Update your vector index and tracker\n</code></pre> <p>\ud83e\uddea Run Refactor Audit (Dev Tool)</p> <p>The built-in RefactorGuard lets you compare two versions of code and audit:</p> <pre><code>Method diffs (added, removed, renamed)\n\nCyclomatic complexity\n\nMissing test coverage\n</code></pre> <p>Example CLI usage:</p> <p>python scripts/refactor/refactor_guard_cli.py \\   --original old_version.py \\   --refactored new_version.py \\   --tests test_file.py \\   --complexity-warnings \\   --missing-tests \\   --json</p> <p>Or to audit the whole repo:</p> <p>python scripts/refactor/refactor_guard_cli.py \\   --refactored scripts \\   --all \\   --missing-tests \\   --json</p> <p>\ud83e\uddfe Zipping Code (for archiving)</p> <p>python scripts/utils/zip_util.py --exclude my_backup.zip</p> <p>This compresses all .py files into a single archive, excluding the zip file itself. \u2705 Summary Task    Command Launch GUI  python scripts/main.py Run CLI mode    use_gui: false + main.py Run refactor audit  scripts/refactor/refactor_guard_cli.py Zip project files   scripts/utils/zip_util.py</p>"},{"location":"overview/README_Full/#testing","title":"Testing","text":""},{"location":"overview/README_Full/#testing-guide","title":"\ud83e\uddea Testing Guide","text":"<p>ZephyrusLogger includes a full-featured test suite covering unit, integration, and smoke tests, with CI integration via GitHub Actions and Codecov.</p>"},{"location":"overview/README_Full/#running-tests-locally","title":"\u2705 Running Tests Locally","text":"<p>Make sure you\u2019re in your virtual environment, then run:</p> <p>```bash pytest</p> <p>To check coverage:</p> <p>pytest --cov=scripts --cov-report=html --cov-report=xml</p> <pre><code>\ud83d\udd0d This will:\n\n    Show terminal summary\n\n    Generate htmlcov/ folder for detailed UI\n\n    Save coverage.xml for CI or audit analysis\n</code></pre> <p>\ud83e\uddea Canary Test</p> <p>Quick sanity test to verify base functionality:</p> <p>pytest tests/test_canary.py</p> <p>\ud83e\uddf1 Test Structure Folder  Purpose tests/unit/ Pure logic and module tests tests/integration/  Cross-component + system-level tests/smoke/    GUI/CLI boot tests tests/mocks/    Fake data + reusable fixtures \ud83e\uddf0 CI Integration (GitHub Actions)</p> <p>You can find the CI logic in .github/workflows/pytest.yml.</p> <p>This pipeline:</p> <pre><code>Installs dependencies\n\nRuns tests and coverage\n\nUploads coverage.xml to Codecov\n\nSaves htmlcov/ and refactor_audit.json as artifacts\n\nSummarizes complexity + audit metrics\n\n\ud83d\udca1 CI fails if coverage.xml is missing or test errors occur\n</code></pre> <p>\ud83d\udcc8 Viewing Coverage</p> <p>Run:</p> <p>open htmlcov/index.html  # or start on Windows</p> <p>\ud83e\uddea Test Targets File    What it Tests test_summary_tracker.py Tracker logic + fallback test_ai_summarizer.py   Prompt flow + LLM stubs test_gui_controller.py  GUI to backend interaction test_config_loader.py   Fallback + file parse test_indexers.py    FAISS loading + rebuild test_refactor_guard.py  Refactor diff logic \ud83e\uddfc Tips</p> <pre><code>Use pytest -k &lt;name&gt; to run a single test\n\nUse @pytest.mark.slow for long integration tests\n\nRun black ., ruff ., or mypy as linter checks\n</code></pre>"},{"location":"overview/README_Full/#dev-tools","title":"Dev Tools","text":""},{"location":"overview/README_Full/#developer-tools","title":"\ud83e\uddf0 Developer Tools","text":"<p>ZephyrusLogger includes internal utilities to support better code hygiene, refactoring, and development workflows. This doc explains how to use each one.</p>"},{"location":"overview/README_Full/#refactorguard","title":"\ud83d\udd27 RefactorGuard","text":"<p>RefactorGuard is a CLI tool that analyzes Python files and directories for:</p> <ul> <li>Method-level diffs (added, removed, renamed)</li> <li>Cyclomatic complexity scoring</li> <li>Test coverage analysis (via test files or <code>coverage.xml</code>)</li> <li>Renaming suggestions</li> </ul>"},{"location":"overview/README_Full/#basic-usage","title":"\ud83d\udd39 Basic Usage","text":"<p>```bash python scripts/refactor/refactor_guard_cli.py \\   --original old_version.py \\   --refactored new_version.py</p> <p>\ud83d\udd39 Directory Comparison</p> <p>python scripts/refactor/refactor_guard_cli.py \\   --refactored scripts \\   --all \\   --missing-tests \\   --complexity-warnings \\   --json</p> <p>\ud83d\udd39 Output Flags Flag    Purpose --json  Outputs JSON result instead of raw string --missing-tests Identifies untested methods --complexity-warnings   Shows complexity per method --diff-only Suppress complexity, only show changes \ud83d\udce6 Zip Utility</p> <p>The zip_util.py script compresses .py files in your project for archiving or sharing. Usage:</p> <p>python scripts/utils/zip_util.py --exclude backup.zip</p> <p>Excludes the output file from itself. \ud83e\udde0 Complexity Analysis</p> <p>RefactorGuard uses an internal complexity analyzer that scores:</p> <pre><code>If / For / While\n\nTry / Except / With\n\nBoolean operations\n</code></pre> <p>Each method starts at complexity 1. Scores above a threshold (default: 10) are flagged. \ud83d\udcc1 Project Scaffolding</p> <p>Use scripts/paths.py and path_utils.py to resolve paths safely across environments. These modules abstract config-aware paths and support test overrides. \ud83e\uddea Dev Mode &amp; Test Mode</p> <p>Set these in config.json:</p> <pre><code>\"test_mode\": true \u2192 Routes all paths to test_* equivalents\n\n\"dev_mode\": true \u2192 Enables additional debug logs\n</code></pre> <p>These are useful for CI, sandboxing, and local development. \u2728 Coming Soon</p> <pre><code>coverage_parser.py \u2192 Converts coverage XML into line/method coverage maps\n\nsummary_exporter.py \u2192 Markdown/CSV export tooling\n\ndataset_builder.py \u2192 Generate datasets from logs and summaries\n</code></pre>"},{"location":"overview/README_Full/#architecture","title":"Architecture","text":""},{"location":"overview/README_Full/#developer-tools_1","title":"\ud83e\uddf0 Developer Tools","text":"<p>ZephyrusLogger includes internal utilities to support better code hygiene, refactoring, and development workflows. This doc explains how to use each one.</p>"},{"location":"overview/README_Full/#refactorguard_1","title":"\ud83d\udd27 RefactorGuard","text":"<p>RefactorGuard is a CLI tool that analyzes Python files and directories for:</p> <ul> <li>Method-level diffs (added, removed, renamed)</li> <li>Cyclomatic complexity scoring</li> <li>Test coverage analysis (via test files or <code>coverage.xml</code>)</li> <li>Renaming suggestions</li> </ul>"},{"location":"overview/README_Full/#basic-usage_1","title":"\ud83d\udd39 Basic Usage","text":"<p>```bash python scripts/refactor/refactor_guard_cli.py \\   --original old_version.py \\   --refactored new_version.py</p> <p>\ud83d\udd39 Directory Comparison</p> <p>python scripts/refactor/refactor_guard_cli.py \\   --refactored scripts \\   --all \\   --missing-tests \\   --complexity-warnings \\   --json</p> <p>\ud83d\udd39 Output Flags Flag    Purpose --json  Outputs JSON result instead of raw string --missing-tests Identifies untested methods --complexity-warnings   Shows complexity per method --diff-only Suppress complexity, only show changes \ud83d\udce6 Zip Utility</p> <p>The zip_util.py script compresses .py files in your project for archiving or sharing. Usage:</p> <p>python scripts/utils/zip_util.py --exclude backup.zip</p> <p>Excludes the output file from itself. \ud83e\udde0 Complexity Analysis</p> <p>RefactorGuard uses an internal complexity analyzer that scores:</p> <pre><code>If / For / While\n\nTry / Except / With\n\nBoolean operations\n</code></pre> <p>Each method starts at complexity 1. Scores above a threshold (default: 10) are flagged. \ud83d\udcc1 Project Scaffolding</p> <p>Use scripts/paths.py and path_utils.py to resolve paths safely across environments. These modules abstract config-aware paths and support test overrides. \ud83e\uddea Dev Mode &amp; Test Mode</p> <p>Set these in config.json:</p> <pre><code>\"test_mode\": true \u2192 Routes all paths to test_* equivalents\n\n\"dev_mode\": true \u2192 Enables additional debug logs\n</code></pre> <p>These are useful for CI, sandboxing, and local development. \u2728 Coming Soon</p> <pre><code>coverage_parser.py \u2192 Converts coverage XML into line/method coverage maps\n\nsummary_exporter.py \u2192 Markdown/CSV export tooling\n\ndataset_builder.py \u2192 Generate datasets from logs and summaries\n</code></pre> <p>\u2705 Related Docs</p> <pre><code>Testing Guide\n\nTroubleshooting\n</code></pre> <p>Want <code>architecture.md</code> next?</p> <p>You said: Yes ChatGPT said:</p> <p>Here\u2019s the complete architecture.md as plain text \u2014 outlining your codebase layout and flow:</p>"},{"location":"overview/README_Full/#zephyruslogger-architecture","title":"\ud83e\udded ZephyrusLogger Architecture","text":"<p>ZephyrusLogger is structured as a layered, modular application with clear separation between core logic, GUI, indexing, and utilities.</p> <p>This guide walks through the project layout, data flow, and key components.</p>"},{"location":"overview/README_Full/#folder-structure","title":"\ud83d\uddc2\ufe0f Folder Structure","text":"<p>scripts/ \u251c\u2500\u2500 ai/ # Summarization logic, LLM adapters \u251c\u2500\u2500 config/ # JSON loader, defaults, logging \u251c\u2500\u2500 core/ # Main controller + summary tracker \u251c\u2500\u2500 gui/ # PyQt GUI and interaction logic \u251c\u2500\u2500 indexers/ # FAISS-based vector index and metadata \u251c\u2500\u2500 refactor/ # Code analysis, complexity, diff tooling \u251c\u2500\u2500 utils/ # File zipping, path helpers, CLI tools \u251c\u2500\u2500 main.py # Entrypoint to launch GUI or CLI \u251c\u2500\u2500 paths.py # Centralized path resolver</p> <p>Tests are located in:</p> <p>tests/ \u251c\u2500\u2500 unit/ \u251c\u2500\u2500 integration/ \u251c\u2500\u2500 smoke/ \u251c\u2500\u2500 mocks/</p>"},{"location":"overview/README_Full/#execution-flow","title":"\ud83d\udd01 Execution Flow","text":""},{"location":"overview/README_Full/#gui-or-cli-launches","title":"GUI or CLI launches:","text":"<p>```python python scripts/main.py</p> <pre><code>Loads config/config.json\n\nInitializes ZephyrusLoggerCore\n\n    Loads tracker, indexers, summarizer\n\nEnters GUI loop (if enabled) or processes CLI inputs\n</code></pre> <p>\ud83e\udde0 Core Components Module  Purpose core/summary_tracker.py Maintains metadata and category-level summary coverage ai/ai_summarizer.py Calls LLM using prompt based on selected subcategory indexers/summary_indexer.py Stores vector embeddings via FAISS indexers/raw_log_indexer.py Stores raw logs (non-summarized) config/config_loader.py Reads and validates JSON config refactor/refactor_guard.py  Analyzes changes between refactored files gui/    Handles dropdowns, prompts, logging window, coverage stats \ud83d\udcca Vector Index Design</p> <p>Each summary has:</p> <pre><code>a raw input\n\na summarized output\n\na subcategory label\n\na vector embedding\n</code></pre> <p>These are saved to:</p> <pre><code>.faiss index\n\n.json metadata file (with UUIDs, timestamps, labels)\n</code></pre> <p>\ud83e\uddf0 RefactorGuard Toolchain</p> <p>RefactorGuard uses:</p> <pre><code>ast parsing to extract classes/methods\n\ncomplexity_analyzer.py to calculate cyclomatic scores\n\ncoverage_parser.py (optional) to extract test coverage\n</code></pre> <p>\ud83d\udda5\ufe0f GUI Overview</p> <p>The GUI builds:</p> <pre><code>Left: coverage table (category_structure)\n\nCenter: text input + AI output\n\nRight: raw logs + config preview\n\nBottom: logging window (real-time logs)\n</code></pre> <p>It uses widget_factory.py, style_manager.py, and gui_controller.py to modularize behavior. \ud83e\uddea CI Flow</p> <p>CI runs:</p> <pre><code>Full pytest suite\n\nCoverage reporting (coverage.xml, htmlcov/)\n\nRefactor audit (refactor_guard_cli.py)\n\nSummary statistics: methods, files, missing tests\n</code></pre>"},{"location":"overview/README_Full/#troubleshooting","title":"Troubleshooting","text":""},{"location":"overview/README_Full/#troubleshooting-faq","title":"\ud83e\uddef Troubleshooting &amp; FAQ","text":"<p>This guide outlines common issues you might encounter when running ZephyrusLogger, and how to fix them.</p>"},{"location":"overview/README_Full/#common-setup-issues","title":"\ud83d\udd27 Common Setup Issues","text":""},{"location":"overview/README_Full/#modulenotfounderror-scripts","title":"\u274c <code>ModuleNotFoundError: scripts</code>","text":"<p>Cause: Python doesn\u2019t recognize <code>scripts/</code> as a module.</p> <p>Fix:</p> <ul> <li>Set your working directory to project root</li> <li> <p>Or run:   ```bash   $env:PYTHONPATH = \".\"  # PowerShell   export PYTHONPATH=.    # Bash</p> <p>Or inject this at the top of your script:</p> <p>import sys, os sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(file), \"..\")))</p> </li> </ul> <p>\u274c faiss::FileIOWriter Error</p> <p>Cause: FAISS can't write to the index file because the directory doesn\u2019t exist.</p> <p>Fix: Ensure the following folder exists before starting:</p> <p>mkdir vector_store</p> <p>Or add this in code before saving:</p> <p>index_path.parent.mkdir(parents=True, exist_ok=True)</p> <p>\u274c GUI Fails to Launch (no window)</p> <p>Possible Causes:</p> <pre><code>use_gui is set to false in config.json\n\nMissing tkinter on your Python install\n\nYou\u2019re in a headless (SSH) or WSL environment\n</code></pre> <p>Fixes:</p> <pre><code>Set \"use_gui\": true\n\nOn Windows, use Python from python.org \u2014 some WSL installs miss tkinter\n\nGUI is not supported in some remote environments (e.g., GitHub Codespaces)\n</code></pre> <p>\u274c No Coverage XML Generated in CI</p> <p>Cause: Pytest didn\u2019t generate coverage.xml.</p> <p>Fixes:</p> <pre><code>Make sure you use:\n</code></pre> <p>pytest --cov=scripts --cov-report=xml</p> <p>Add a CI step to check its presence:</p> <pre><code>if [ ! -f coverage.xml ]; then echo \"\u274c Not found\"; exit 1; fi\n</code></pre> <p>\ud83e\udde0 Debugging Tips</p> <pre><code>Enable \"dev_mode\": true in config.json to show extra logs\n\nSet \"test_mode\": true to sandbox vector writes and paths\n\nUse print(json.dumps(config, indent=2)) anywhere to verify values\n</code></pre> <p>\u2705 GUI Dev Tips</p> <pre><code>GUI state is saved to gui_state.json\n\nPrompt mapping comes from prompts_by_subcategory in config\n\nAdd tooltips or validation in widget_factory.py if you want a better UX\n</code></pre> <p>\ud83d\udca1 Logging</p> <p>You can redirect logs to GUI and a file. Check:</p> <pre><code>config_manager.py sets up logging\n\ngui_logging.py routes logs to QTextEdit widget\n</code></pre> <p>\ud83d\udcac Still Stuck?</p> <p>If you\u2019re debugging something unusual:</p> <pre><code>Add print() inside core.py, summary_tracker.py, or ai_summarizer.py\n\nRun pytest -s for live output\n\nUse --json in RefactorGuard to get structured output\n</code></pre> <p>\ud83d\udd17 See Also</p> <pre><code>Installation Guide\n\nConfig Reference\n\nDeveloper Tools\n</code></pre>"},{"location":"overview/ai_capabilities/","title":"Ai capabilities","text":"<p>\ud83e\udde0 Zephyrus LLM-Powered CI Advisors \ud83d\udce6 Tools Overview 1. llm_refactor_advisor.py</p> <p>Analyzes your merged_report.json and generates a prioritized list of files most in need of refactor, based on metrics like MyPy errors, lint issues, complexity, and coverage. LLM Role: Summarizes this analysis with a concise recommendation on what to refactor first and why.</p> <p>Invocation:</p> <p>python scripts/ai/llm_refactor_advisor.py merged_report.json</p> <ol> <li>chat_refactor.py</li> </ol> <p>Interactive CLI tool that answers dev questions like \u201cWhat should I fix first?\u201d using the context from the merged report. LLM Role: Constructs contextual prompts with severity data and responds to your questions with actionable advice.</p> <p>Invocation:</p> <p>python scripts/ai/chat_refactor.py merged_report.json</p> <ol> <li>module_docstring_summarizer.py</li> </ol> <p>Generates concise summaries of module-level functionality by synthesizing function docstrings. LLM Role: Reads per-function descriptions and creates one-paragraph summaries for each file.</p> <p>Invocation:</p> <p>python scripts/ai/module_docstring_summarizer.py merged_report.json</p> <p>\ud83d\udd27 How it Works</p> <pre><code>Prompts are fetched via llm_router.py using configurable subcategories.\n\nPersona-modified responses (e.g. mentor, reviewer) are enabled.\n\nModels like Mistral (via Ollama) are configured through config.json.\n</code></pre> <p>\ud83d\udcc1 Configuration</p> <p>Ensure your config/config.json includes appropriate subcategory prompts like:</p> <p>\"prompts_by_subcategory\": {   \"Tooling &amp; Automation\": \"Summarize the workflow, tool, or automation concept in a concise technical format.\",   \"Module Functionality\": \"Summarize the purpose of this module based on the provided function-level docstrings.\",   \"_default\": \"Summarize the following idea into concise, meaningful bullet points.\" }</p>"},{"location":"overview/architecture/","title":"\ud83e\uddf0 Developer Tools","text":"<p>ZephyrusLogger includes internal utilities to support better code hygiene, refactoring, and development workflows. This doc explains how to use each one.</p>"},{"location":"overview/architecture/#refactorguard","title":"\ud83d\udd27 RefactorGuard","text":"<p>RefactorGuard is a CLI tool that analyzes Python files and directories for:</p> <ul> <li>Method-level diffs (added, removed, renamed)</li> <li>Cyclomatic complexity scoring</li> <li>Test coverage analysis (via test files or <code>coverage.xml</code>)</li> <li>Renaming suggestions</li> </ul>"},{"location":"overview/architecture/#basic-usage","title":"\ud83d\udd39 Basic Usage","text":"<p>```bash python scripts/refactor/refactor_guard_cli.py \\   --original old_version.py \\   --refactored new_version.py</p> <p>\ud83d\udd39 Directory Comparison</p> <p>python scripts/refactor/refactor_guard_cli.py \\   --refactored scripts \\   --all \\   --missing-tests \\   --complexity-warnings \\   --json</p> <p>\ud83d\udd39 Output Flags Flag    Purpose --json  Outputs JSON result instead of raw string --missing-tests Identifies untested methods --complexity-warnings   Shows complexity per method --diff-only Suppress complexity, only show changes \ud83d\udce6 Zip Utility</p> <p>The zip_util.py script compresses .py files in your project for archiving or sharing. Usage:</p> <p>python scripts/utils/zip_util.py --exclude backup.zip</p> <p>Excludes the output file from itself. \ud83e\udde0 Complexity Analysis</p> <p>RefactorGuard uses an internal complexity analyzer that scores:</p> <pre><code>If / For / While\n\nTry / Except / With\n\nBoolean operations\n</code></pre> <p>Each method starts at complexity 1. Scores above a threshold (default: 10) are flagged. \ud83d\udcc1 Project Scaffolding</p> <p>Use scripts/paths.py and path_utils.py to resolve paths safely across environments. These modules abstract config-aware paths and support test overrides. \ud83e\uddea Dev Mode &amp; Test Mode</p> <p>Set these in config.json:</p> <pre><code>\"test_mode\": true \u2192 Routes all paths to test_* equivalents\n\n\"dev_mode\": true \u2192 Enables additional debug logs\n</code></pre> <p>These are useful for CI, sandboxing, and local development. \u2728 Coming Soon</p> <pre><code>coverage_parser.py \u2192 Converts coverage XML into line/method coverage maps\n\nsummary_exporter.py \u2192 Markdown/CSV export tooling\n\ndataset_builder.py \u2192 Generate datasets from logs and summaries\n</code></pre> <p>\u2705 Related Docs</p> <pre><code>Testing Guide\n\nTroubleshooting\n</code></pre> <p>Want <code>architecture.md</code> next?</p> <p>You said: Yes ChatGPT said:</p> <p>Here\u2019s the complete architecture.md as plain text \u2014 outlining your codebase layout and flow:</p>"},{"location":"overview/architecture/#zephyruslogger-architecture","title":"\ud83e\udded ZephyrusLogger Architecture","text":"<p>ZephyrusLogger is structured as a layered, modular application with clear separation between core logic, GUI, indexing, and utilities.</p> <p>This guide walks through the project layout, data flow, and key components.</p>"},{"location":"overview/architecture/#folder-structure","title":"\ud83d\uddc2\ufe0f Folder Structure","text":"<p>scripts/ \u251c\u2500\u2500 ai/ # Summarization logic, LLM adapters \u251c\u2500\u2500 config/ # JSON loader, defaults, logging \u251c\u2500\u2500 core/ # Main controller + summary tracker \u251c\u2500\u2500 gui/ # PyQt GUI and interaction logic \u251c\u2500\u2500 indexers/ # FAISS-based vector index and metadata \u251c\u2500\u2500 refactor/ # Code analysis, complexity, diff tooling \u251c\u2500\u2500 utils/ # File zipping, path helpers, CLI tools \u251c\u2500\u2500 main.py # Entrypoint to launch GUI or CLI \u251c\u2500\u2500 paths.py # Centralized path resolver</p> <p>Tests are located in:</p> <p>tests/ \u251c\u2500\u2500 unit/ \u251c\u2500\u2500 integration/ \u251c\u2500\u2500 smoke/ \u251c\u2500\u2500 mocks/</p>"},{"location":"overview/architecture/#execution-flow","title":"\ud83d\udd01 Execution Flow","text":""},{"location":"overview/architecture/#gui-or-cli-launches","title":"GUI or CLI launches:","text":"<p>```python python scripts/main.py</p> <pre><code>Loads config/config.json\n\nInitializes ZephyrusLoggerCore\n\n    Loads tracker, indexers, summarizer\n\nEnters GUI loop (if enabled) or processes CLI inputs\n</code></pre> <p>\ud83e\udde0 Core Components Module  Purpose core/summary_tracker.py Maintains metadata and category-level summary coverage ai/ai_summarizer.py Calls LLM using prompt based on selected subcategory indexers/summary_indexer.py Stores vector embeddings via FAISS indexers/raw_log_indexer.py Stores raw logs (non-summarized) config/config_loader.py Reads and validates JSON config refactor/refactor_guard.py  Analyzes changes between refactored files gui/    Handles dropdowns, prompts, logging window, coverage stats \ud83d\udcca Vector Index Design</p> <p>Each summary has:</p> <pre><code>a raw input\n\na summarized output\n\na subcategory label\n\na vector embedding\n</code></pre> <p>These are saved to:</p> <pre><code>.faiss index\n\n.json metadata file (with UUIDs, timestamps, labels)\n</code></pre> <p>\ud83e\uddf0 RefactorGuard Toolchain</p> <p>RefactorGuard uses:</p> <pre><code>ast parsing to extract classes/methods\n\ncomplexity_analyzer.py to calculate cyclomatic scores\n\ncoverage_parser.py (optional) to extract test coverage\n</code></pre> <p>\ud83d\udda5\ufe0f GUI Overview</p> <p>The GUI builds:</p> <pre><code>Left: coverage table (category_structure)\n\nCenter: text input + AI output\n\nRight: raw logs + config preview\n\nBottom: logging window (real-time logs)\n</code></pre> <p>It uses widget_factory.py, style_manager.py, and gui_controller.py to modularize behavior. \ud83e\uddea CI Flow</p> <p>CI runs:</p> <pre><code>Full pytest suite\n\nCoverage reporting (coverage.xml, htmlcov/)\n\nRefactor audit (refactor_guard_cli.py)\n\nSummary statistics: methods, files, missing tests\n</code></pre>"},{"location":"overview/config/","title":"\u2699\ufe0f Configuration Guide (<code>config.json</code>)","text":"<p>ZephyrusLogger is fully driven by a centralized <code>config.json</code> file located at:</p> <p>config/config.json</p> <p>This file controls everything from runtime behavior to GUI layout, LLM selection, vector indexing paths, and developer flags.</p>"},{"location":"overview/config/#top-level-keys","title":"\ud83d\udd11 Top-Level Keys","text":"Key Type Description <code>mode</code> string <code>\"test\"</code> or <code>\"full\"</code> \u2013 controls whether full indexing &amp; vector storage are enabled <code>use_gui</code> boolean Toggle GUI on launch <code>test_mode</code> boolean If true, redirects paths to mock/test-safe folders <code>dev_mode</code> boolean Enables logging/debugging flags <code>markdown_export</code> boolean If true, allows Markdown export of entries"},{"location":"overview/config/#llm-settings","title":"\ud83e\udd16 LLM Settings","text":"Key Description <code>llm_provider</code> <code>\"openai\"</code>, <code>\"huggingface\"</code>, <code>\"ollama\"</code> <code>llm_model</code> Model name (e.g. <code>\"gpt-3.5-turbo\"</code>, <code>\"mistral\"</code>) <code>embedding_model</code> SentenceTransformers model name (e.g. <code>\"all-MiniLM-L6-v2\"</code>) \u2013 fallback if not defined"},{"location":"overview/config/#categories-prompts","title":"\ud83e\udde0 Categories &amp; Prompts","text":"Section Description <code>category_structure</code> Maps each major category (e.g. <code>Narrative</code>, <code>World</code>) to subcategories (e.g. <code>Plot</code>, <code>Magic</code>, <code>Faction</code>) <code>prompts_by_subcategory</code> Maps each subcategory to a summarization prompt \u2013 this powers the AI guidance in the GUI or CLI <p>Example: ```json {   \"category_structure\": {     \"Narrative\": [\"Plot\", \"Themes\"],     \"World\": [\"Factions\", \"Magic\"]   },   \"prompts_by_subcategory\": {     \"Plot\": \"Summarize this plot point...\",     \"Magic\": \"Describe how this magic system functions...\"   } }</p> <p>\ud83d\udce6 Storage Paths Key Description summary_data_path   Where to save/load structured summary entries raw_log_path    Where raw input text is saved faiss_index_path    Vector index file (*.faiss) faiss_metadata_path JSON metadata matching vectors to entries tracker_path    Saves overall category coverage tracker (summary_tracker.json) gui_state_path  Remembers last selected dropdowns, inputs, etc. \ud83e\uddea Mock/Test Overrides</p> <p>If test_mode: true, these paths override real ones: Key Description test_summary_data_path  Summary JSON for test runs test_raw_log_path   Raw logs for test runs test_faiss_index_path   Temp index file test_faiss_metadata_path    Temp metadata file test_tracker_path   Tracker state for test runs \ud83e\uddfc Tips</p> <pre><code>You can reload config.json on-the-fly via CLI/GUI triggers.\n\nIf any key is missing, ZephyrusLogger will log a warning and use a default.\n\nInvalid paths will not crash the app, but will skip indexing unless caught.\n</code></pre>"},{"location":"overview/dev_tools/","title":"\ud83e\uddf0 Developer Tools","text":"<p>ZephyrusLogger includes internal utilities to support better code hygiene, refactoring, and development workflows. This doc explains how to use each one.</p>"},{"location":"overview/dev_tools/#refactorguard","title":"\ud83d\udd27 RefactorGuard","text":"<p>RefactorGuard is a CLI tool that analyzes Python files and directories for:</p> <ul> <li>Method-level diffs (added, removed, renamed)</li> <li>Cyclomatic complexity scoring</li> <li>Test coverage analysis (via test files or <code>coverage.xml</code>)</li> <li>Renaming suggestions</li> </ul>"},{"location":"overview/dev_tools/#basic-usage","title":"\ud83d\udd39 Basic Usage","text":"<p>```bash python scripts/refactor/refactor_guard_cli.py \\   --original old_version.py \\   --refactored new_version.py</p> <p>\ud83d\udd39 Directory Comparison</p> <p>python scripts/refactor/refactor_guard_cli.py \\   --refactored scripts \\   --all \\   --missing-tests \\   --complexity-warnings \\   --json</p> <p>\ud83d\udd39 Output Flags Flag    Purpose --json  Outputs JSON result instead of raw string --missing-tests Identifies untested methods --complexity-warnings   Shows complexity per method --diff-only Suppress complexity, only show changes \ud83d\udce6 Zip Utility</p> <p>The zip_util.py script compresses .py files in your project for archiving or sharing. Usage:</p> <p>python scripts/utils/zip_util.py --exclude backup.zip</p> <p>Excludes the output file from itself. \ud83e\udde0 Complexity Analysis</p> <p>RefactorGuard uses an internal complexity analyzer that scores:</p> <pre><code>If / For / While\n\nTry / Except / With\n\nBoolean operations\n</code></pre> <p>Each method starts at complexity 1. Scores above a threshold (default: 10) are flagged. \ud83d\udcc1 Project Scaffolding</p> <p>Use scripts/paths.py and path_utils.py to resolve paths safely across environments. These modules abstract config-aware paths and support test overrides. \ud83e\uddea Dev Mode &amp; Test Mode</p> <p>Set these in config.json:</p> <pre><code>\"test_mode\": true \u2192 Routes all paths to test_* equivalents\n\n\"dev_mode\": true \u2192 Enables additional debug logs\n</code></pre> <p>These are useful for CI, sandboxing, and local development. \u2728 Coming Soon</p> <pre><code>coverage_parser.py \u2192 Converts coverage XML into line/method coverage maps\n\nsummary_exporter.py \u2192 Markdown/CSV export tooling\n\ndataset_builder.py \u2192 Generate datasets from logs and summaries\n</code></pre>"},{"location":"overview/install/","title":"\ud83d\udee0 Installation Guide","text":"<p>This guide walks you through setting up ZephyrusLogger in a local development or production environment.</p>"},{"location":"overview/install/#requirements","title":"\u2705 Requirements","text":"<ul> <li>Python 3.11.x (avoid 3.11.9 on Windows if using GUI \u2014 known tkinter issue)</li> <li>pip &gt;= 21.0</li> <li>OS: Windows, macOS, Linux (tested on Windows + Ubuntu)</li> </ul>"},{"location":"overview/install/#1-clone-the-repo","title":"\ud83d\udce6 1. Clone the Repo","text":"<p>```bash git clone https://github.com/your-org/zephyrus-logger.git cd zephyrus-logger</p> <p>\ud83d\udc0d 2. Set Up a Virtual Environment</p> <p>python -m venv .venv source .venv/bin/activate  # or .venv\\Scripts\\activate on Windows</p> <p>\ud83d\udce6 3. Install Dependencies</p> <p>python -m pip install --upgrade pip wheel setuptools pip install -r requirements.txt</p> <pre><code>\ud83d\udca1 For Windows + FAISS, install with:\n</code></pre> <p>pip install faiss-cpu --only-binary=faiss-cpu</p> <p>\ud83d\udcbe 4. Optional: GPU Support (FAISS)</p> <p>FAISS GPU isn't required, but if needed:</p> <p>pip install faiss-gpu  # \u26a0\ufe0f may require CUDA &amp; compilation support</p> <p>\ud83e\udde0 5. Optional: LLM Support</p> <p>ZephyrusLogger supports multiple backends:</p> <pre><code>OpenAI \u2192 Requires OPENAI_API_KEY or key in config.json\n\nOllama \u2192 Local model serving, e.g., Mistral\n</code></pre> <p>Install dependencies for LLMs:</p> <p>pip install openai sentence-transformers</p> <p>\ud83e\uddea 6. Verify Installation</p> <p>Run the canary test:</p> <p>pytest tests/test_canary.py</p> <p>Then launch the app:</p> <p>python scripts/main.py</p> <p>\ud83e\uddea Troubleshooting Problem Solution ModuleNotFoundError: scripts    Set PYTHONPATH=. or inject sys.path manually FAISS file write error  Ensure vector_store/ directory exists GUI fails to load   Check use_gui: true in config.json and tkinter installed</p>"},{"location":"overview/testing/","title":"\ud83e\uddea Testing Guide","text":"<p>ZephyrusLogger includes a full-featured test suite covering unit, integration, and smoke tests, with CI integration via GitHub Actions and Codecov.</p>"},{"location":"overview/testing/#running-tests-locally","title":"\u2705 Running Tests Locally","text":"<p>Make sure you\u2019re in your virtual environment, then run:</p> <p>```bash pytest</p> <p>To check coverage:</p> <p>pytest --cov=scripts --cov-report=html --cov-report=xml</p> <pre><code>\ud83d\udd0d This will:\n\n    Show terminal summary\n\n    Generate htmlcov/ folder for detailed UI\n\n    Save coverage.xml for CI or audit analysis\n</code></pre> <p>\ud83e\uddea Canary Test</p> <p>Quick sanity test to verify base functionality:</p> <p>pytest tests/test_canary.py</p> <p>\ud83e\uddf1 Test Structure Folder  Purpose tests/unit/ Pure logic and module tests tests/integration/  Cross-component + system-level tests/smoke/    GUI/CLI boot tests tests/mocks/    Fake data + reusable fixtures \ud83e\uddf0 CI Integration (GitHub Actions)</p> <p>You can find the CI logic in .github/workflows/pytest.yml.</p> <p>This pipeline:</p> <pre><code>Installs dependencies\n\nRuns tests and coverage\n\nUploads coverage.xml to Codecov\n\nSaves htmlcov/ and refactor_audit.json as artifacts\n\nSummarizes complexity + audit metrics\n\n\ud83d\udca1 CI fails if coverage.xml is missing or test errors occur\n</code></pre> <p>\ud83d\udcc8 Viewing Coverage</p> <p>Run:</p> <p>open htmlcov/index.html  # or start on Windows</p> <p>\ud83e\uddea Test Targets File    What it Tests test_summary_tracker.py Tracker logic + fallback test_ai_summarizer.py   Prompt flow + LLM stubs test_gui_controller.py  GUI to backend interaction test_config_loader.py   Fallback + file parse test_indexers.py    FAISS loading + rebuild test_refactor_guard.py  Refactor diff logic \ud83e\uddfc Tips</p> <pre><code>Use pytest -k &lt;name&gt; to run a single test\n\nUse @pytest.mark.slow for long integration tests\n\nRun black ., ruff ., or mypy as linter checks\n</code></pre>"},{"location":"overview/troubleshooting/","title":"\ud83e\uddef Troubleshooting &amp; FAQ","text":"<p>This guide outlines common issues you might encounter when running ZephyrusLogger, and how to fix them.</p>"},{"location":"overview/troubleshooting/#common-setup-issues","title":"\ud83d\udd27 Common Setup Issues","text":""},{"location":"overview/troubleshooting/#modulenotfounderror-scripts","title":"\u274c <code>ModuleNotFoundError: scripts</code>","text":"<p>Cause: Python doesn\u2019t recognize <code>scripts/</code> as a module.</p> <p>Fix:</p> <ul> <li>Set your working directory to project root</li> <li> <p>Or run:   ```bash   $env:PYTHONPATH = \".\"  # PowerShell   export PYTHONPATH=.    # Bash</p> <p>Or inject this at the top of your script:</p> <p>import sys, os sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(file), \"..\")))</p> </li> </ul> <p>\u274c faiss::FileIOWriter Error</p> <p>Cause: FAISS can't write to the index file because the directory doesn\u2019t exist.</p> <p>Fix: Ensure the following folder exists before starting:</p> <p>mkdir vector_store</p> <p>Or add this in code before saving:</p> <p>index_path.parent.mkdir(parents=True, exist_ok=True)</p> <p>\u274c GUI Fails to Launch (no window)</p> <p>Possible Causes:</p> <pre><code>use_gui is set to false in config.json\n\nMissing tkinter on your Python install\n\nYou\u2019re in a headless (SSH) or WSL environment\n</code></pre> <p>Fixes:</p> <pre><code>Set \"use_gui\": true\n\nOn Windows, use Python from python.org \u2014 some WSL installs miss tkinter\n\nGUI is not supported in some remote environments (e.g., GitHub Codespaces)\n</code></pre> <p>\u274c No Coverage XML Generated in CI</p> <p>Cause: Pytest didn\u2019t generate coverage.xml.</p> <p>Fixes:</p> <pre><code>Make sure you use:\n</code></pre> <p>pytest --cov=scripts --cov-report=xml</p> <p>Add a CI step to check its presence:</p> <pre><code>if [ ! -f coverage.xml ]; then echo \"\u274c Not found\"; exit 1; fi\n</code></pre> <p>\ud83e\udde0 Debugging Tips</p> <pre><code>Enable \"dev_mode\": true in config.json to show extra logs\n\nSet \"test_mode\": true to sandbox vector writes and paths\n\nUse print(json.dumps(config, indent=2)) anywhere to verify values\n</code></pre> <p>\u2705 GUI Dev Tips</p> <pre><code>GUI state is saved to gui_state.json\n\nPrompt mapping comes from prompts_by_subcategory in config\n\nAdd tooltips or validation in widget_factory.py if you want a better UX\n</code></pre> <p>\ud83d\udca1 Logging</p> <p>You can redirect logs to GUI and a file. Check:</p> <pre><code>config_manager.py sets up logging\n\ngui_logging.py routes logs to QTextEdit widget\n</code></pre> <p>\ud83d\udcac Still Stuck?</p> <p>If you\u2019re debugging something unusual:</p> <pre><code>Add print() inside core.py, summary_tracker.py, or ai_summarizer.py\n\nRun pytest -s for live output\n\nUse --json in RefactorGuard to get structured output\n</code></pre> <p>\ud83d\udd17 See Also</p> <pre><code>Installation Guide\n\nConfig Reference\n\nDeveloper Tools\n</code></pre>"},{"location":"overview/usage/","title":"\ud83d\ude80 Usage Guide","text":"<p>ZephyrusLogger can be used either as an interactive GUI or as a CLI-based logging engine. It\u2019s designed to be flexible, scriptable, and modular.</p>"},{"location":"overview/usage/#gui-mode-default","title":"\ud83d\udda5\ufe0f GUI Mode (Default)","text":"<p>To launch the graphical interface:</p> <p>```bash python scripts/main.py</p> <p>Make sure use_gui is set to true in your config/config.json. Key Features:</p> <pre><code>Dropdown-based subcategory selection\n\nPrompt-assisted AI summarization\n\nReal-time coverage overview\n\nLogs visible inside app\n\nMarkdown export (if enabled)\n</code></pre> <p>\ud83d\udcbb CLI Mode</p> <p>You can also run in headless CLI mode by setting:</p> <p>\"use_gui\": false</p> <p>Then run:</p> <p>python scripts/main.py</p> <p>This will process summaries and logs without the GUI, useful for automation or fast entry. \ud83e\udde0 Logging an Idea</p> <pre><code>Pick a subcategory (e.g., Narrative \u2192 Plot)\n\nType or paste your raw input\n\nThe system will:\n\n    Apply a prompt (from config)\n\n    Run the LLM\n\n    Save both the input + summary\n\n    Update your vector index and tracker\n</code></pre> <p>\ud83e\uddea Run Refactor Audit (Dev Tool)</p> <p>The built-in RefactorGuard lets you compare two versions of code and audit:</p> <pre><code>Method diffs (added, removed, renamed)\n\nCyclomatic complexity\n\nMissing test coverage\n</code></pre> <p>Example CLI usage:</p> <p>python scripts/refactor/refactor_guard_cli.py \\   --original old_version.py \\   --refactored new_version.py \\   --tests test_file.py \\   --complexity-warnings \\   --missing-tests \\   --json</p> <p>Or to audit the whole repo:</p> <p>python scripts/refactor/refactor_guard_cli.py \\   --refactored scripts \\   --all \\   --missing-tests \\   --json</p> <p>\ud83e\uddfe Zipping Code (for archiving)</p> <p>python scripts/utils/zip_util.py --exclude my_backup.zip</p> <p>This compresses all .py files into a single archive, excluding the zip file itself. \u2705 Summary Task    Command Launch GUI  python scripts/main.py Run CLI mode    use_gui: false + main.py Run refactor audit  scripts/refactor/refactor_guard_cli.py Zip project files   scripts/utils/zip_util.py</p>"},{"location":"quality/","title":"Code Quality Report Index","text":"<ul> <li>./</li> <li>ai/</li> <li>ci_analyzer/</li> <li>config/</li> <li>core/</li> <li>dashboard/</li> <li>doc_generation/</li> <li>gui/</li> <li>gui/base/</li> <li>gui/panels/</li> <li>gui/tabs/</li> <li>indexers/</li> <li>kg/</li> <li>kg/modules/</li> <li>refactor/</li> <li>refactor/complexity/</li> <li>refactor/compressor/</li> <li>refactor/lint_report_pkg/</li> <li>refactor/lint_report_pkg/plugins/</li> <li>refactor/parsers/</li> <li>unified_code_assistant/</li> <li>utils/</li> </ul>"},{"location":"quality/ai/","title":"Code Quality Report for <code>ai/</code>","text":"<p>Folder Totals: 36 issues (Critical: 0, High: 31, Medium: 5, Low: 0)</p>"},{"location":"quality/ai/#missing-documentation","title":"\ud83d\udcc4 Missing Documentation","text":"File Module Doc Missing Classes Missing Functions module_idea_generator.py Missing All Documented All Documented"},{"location":"quality/ai/#linting-issues","title":"\ud83e\uddf9 Linting Issues","text":"File Critical High Medium Low Total ai_summarizer.py 0 3 2 0 5 llm_optimization.py 0 10 2 0 12 llm_refactor_advisor.py 0 7 0 0 7 llm_router.py 0 2 0 0 2 module_docstring_summarizer.py 0 3 0 0 3 module_idea_generator.py 0 6 1 0 7"},{"location":"quality/ci_analyzer/","title":"Code Quality Report for <code>ci_analyzer/</code>","text":"<p>Folder Totals: 8 issues (Critical: 0, High: 8, Medium: 0, Low: 0)</p>"},{"location":"quality/ci_analyzer/#missing-documentation","title":"\ud83d\udcc4 Missing Documentation","text":"File Module Doc Missing Classes Missing Functions init.py Missing All Documented All Documented"},{"location":"quality/ci_analyzer/#linting-issues","title":"\ud83e\uddf9 Linting Issues","text":"File Critical High Medium Low Total drilldown.py 0 2 0 0 2 metrics_summary.py 0 1 0 0 1 severity_audit.py 0 3 0 0 3 severity_index.py 0 2 0 0 2"},{"location":"quality/config/","title":"Code Quality Report for <code>config/</code>","text":"<p>Folder Totals: 4 issues (Critical: 0, High: 4, Medium: 0, Low: 0)</p>"},{"location":"quality/config/#missing-documentation","title":"\ud83d\udcc4 Missing Documentation","text":"File Module Doc Missing Classes Missing Functions config_loader.py Missing All Documented All Documented config_manager.py Present Config All Documented"},{"location":"quality/config/#linting-issues","title":"\ud83e\uddf9 Linting Issues","text":"File Critical High Medium Low Total config_loader.py 0 2 0 0 2 logging_setup.py 0 2 0 0 2"},{"location":"quality/core/","title":"Code Quality Report for <code>core/</code>","text":"<p>Folder Totals: 18 issues (Critical: 0, High: 10, Medium: 8, Low: 0)</p>"},{"location":"quality/core/#missing-documentation","title":"\ud83d\udcc4 Missing Documentation","text":"File Module Doc Missing Classes Missing Functions init.py Missing All Documented All Documented log_manager.py Present LogManager All Documented"},{"location":"quality/core/#linting-issues","title":"\ud83e\uddf9 Linting Issues","text":"File Critical High Medium Low Total core.py 0 2 2 0 4 environment_bootstrapper.py 0 0 2 0 2 log_manager.py 0 6 2 0 8 summary_tracker.py 0 2 2 0 4"},{"location":"quality/dashboard/","title":"Code Quality Report for <code>dashboard/</code>","text":"<p>Folder Totals: 0 issues (Critical: 0, High: 0, Medium: 0, Low: 0)</p>"},{"location":"quality/dashboard/#missing-documentation","title":"\ud83d\udcc4 Missing Documentation","text":"File Module Doc Missing Classes Missing Functions init.py Missing All Documented All Documented ai_integration.py Missing AIIntegration All Documented app.py Missing All Documented All Documented data_loader.py Missing All Documented All Documented"},{"location":"quality/doc_generation/","title":"Code Quality Report for <code>doc_generation/</code>","text":"<p>Folder Totals: 24 issues (Critical: 0, High: 19, Medium: 5, Low: 0)</p>"},{"location":"quality/doc_generation/#missing-documentation","title":"\ud83d\udcc4 Missing Documentation","text":"File Module Doc Missing Classes Missing Functions init.py Missing All Documented All Documented coverage_doc_generation.py Present All Documented main docstring_doc_generation.py Present All Documented main quality_doc_generation.py Present All Documented main"},{"location":"quality/doc_generation/#linting-issues","title":"\ud83e\uddf9 Linting Issues","text":"File Critical High Medium Low Total coverage_doc_generation.py 0 4 1 0 5 doc_renderers.py 0 2 1 0 3 docstring_doc_generation.py 0 3 2 0 5 quality_doc_generation.py 0 10 1 0 11"},{"location":"quality/gui/","title":"Code Quality Report for <code>gui/</code>","text":"<p>Folder Totals: 21 issues (Critical: 0, High: 11, Medium: 10, Low: 0)</p>"},{"location":"quality/gui/#missing-documentation","title":"\ud83d\udcc4 Missing Documentation","text":"File Module Doc Missing Classes Missing Functions init.py Missing All Documented All Documented"},{"location":"quality/gui/#linting-issues","title":"\ud83e\uddf9 Linting Issues","text":"File Critical High Medium Low Total gui_controller.py 0 1 4 0 5 gui_helpers.py 0 9 4 0 13 gui_logging.py 0 0 2 0 2 widget_factory.py 0 1 0 0 1"},{"location":"quality/gui_base/","title":"Code Quality Report for <code>gui/base/</code>","text":"<p>Folder Totals: 8 issues (Critical: 0, High: 2, Medium: 6, Low: 0)</p>"},{"location":"quality/gui_base/#missing-documentation","title":"\ud83d\udcc4 Missing Documentation","text":"File Module Doc Missing Classes Missing Functions init.py Missing All Documented All Documented"},{"location":"quality/gui_base/#linting-issues","title":"\ud83e\uddf9 Linting Issues","text":"File Critical High Medium Low Total base_panel.py 0 1 3 0 4 base_tab.py 0 1 3 0 4"},{"location":"quality/gui_panels/","title":"Code Quality Report for <code>gui/panels/</code>","text":"<p>Folder Totals: 12 issues (Critical: 0, High: 12, Medium: 0, Low: 0)</p>"},{"location":"quality/gui_panels/#missing-documentation","title":"\ud83d\udcc4 Missing Documentation","text":"File Module Doc Missing Classes Missing Functions init.py Missing All Documented All Documented"},{"location":"quality/gui_panels/#linting-issues","title":"\ud83e\uddf9 Linting Issues","text":"File Critical High Medium Low Total action_panel.py 0 1 0 0 1 coverage_panel.py 0 4 0 0 4 entry_panel.py 0 4 0 0 4 log_panel.py 0 3 0 0 3"},{"location":"quality/gui_tabs/","title":"Code Quality Report for <code>gui/tabs/</code>","text":"<p>Folder Totals: 1 issues (Critical: 0, High: 0, Medium: 1, Low: 0)</p>"},{"location":"quality/gui_tabs/#missing-documentation","title":"\ud83d\udcc4 Missing Documentation","text":"File Module Doc Missing Classes Missing Functions init.py Missing All Documented All Documented"},{"location":"quality/gui_tabs/#linting-issues","title":"\ud83e\uddf9 Linting Issues","text":"File Critical High Medium Low Total main_tab.py 0 0 1 0 1"},{"location":"quality/indexers/","title":"Code Quality Report for <code>indexers/</code>","text":"<p>Folder Totals: 9 issues (Critical: 0, High: 7, Medium: 2, Low: 0)</p>"},{"location":"quality/indexers/#missing-documentation","title":"\ud83d\udcc4 Missing Documentation","text":"File Module Doc Missing Classes Missing Functions base_indexer.py Present BaseIndexer _load_model summary_indexer.py Present All Documented _process_categories, _process_subcategories, _process_batches"},{"location":"quality/indexers/#linting-issues","title":"\ud83e\uddf9 Linting Issues","text":"File Critical High Medium Low Total base_indexer.py 0 5 1 0 6 raw_log_indexer.py 0 1 0 0 1 summary_indexer.py 0 1 1 0 2"},{"location":"quality/kg/","title":"Code Quality Report for <code>kg/</code>","text":"<p>Folder Totals: 2 issues (Critical: 0, High: 2, Medium: 0, Low: 0)</p>"},{"location":"quality/kg/#missing-documentation","title":"\ud83d\udcc4 Missing Documentation","text":"File Module Doc Missing Classes Missing Functions init.py Missing All Documented All Documented"},{"location":"quality/kg/#linting-issues","title":"\ud83e\uddf9 Linting Issues","text":"File Critical High Medium Low Total generate_codebase_kg.py 0 2 0 0 2"},{"location":"quality/kg_modules/","title":"Code Quality Report for <code>kg/modules/</code>","text":"<p>Folder Totals: 16 issues (Critical: 0, High: 15, Medium: 1, Low: 0)</p>"},{"location":"quality/kg_modules/#missing-documentation","title":"\ud83d\udcc4 Missing Documentation","text":"File Module Doc Missing Classes Missing Functions init.py Missing All Documented All Documented"},{"location":"quality/kg_modules/#linting-issues","title":"\ud83e\uddf9 Linting Issues","text":"File Critical High Medium Low Total graph_builder.py 0 1 0 0 1 utils.py 0 1 0 0 1 visualization.py 0 13 1 0 14"},{"location":"quality/refactor/","title":"Code Quality Report for <code>refactor/</code>","text":"<p>Folder Totals: 31 issues (Critical: 0, High: 14, Medium: 17, Low: 0)</p>"},{"location":"quality/refactor/#missing-documentation","title":"\ud83d\udcc4 Missing Documentation","text":"File Module Doc Missing Classes Missing Functions ast_extractor.py Present ClassMethodExtractor init, visit_ClassDef refactor_guard.py Present All Documented init, attach_coverage_hits, analyze_tests, analyze_module, _simple_name, analyze_directory_recursive refactor_guard_cli.py Missing All Documented _ensure_utf8_stdout, _parse_args, _merge_coverage, handle_full_scan, handle_single_file, main strictness_analyzer.py Present All Documented generate_module_report, validate_report_schema, main"},{"location":"quality/refactor/#linting-issues","title":"\ud83e\uddf9 Linting Issues","text":"File Critical High Medium Low Total ast_extractor.py 0 5 0 0 5 merge_audit_reports.py 0 0 2 0 2 method_line_ranges.py 0 0 3 0 3 refactor_guard.py 0 0 5 0 5 refactor_guard_cli.py 0 2 3 0 5 strictness_analyzer.py 0 1 4 0 5 test_discovery.py 0 6 0 0 6"},{"location":"quality/refactor_complexity/","title":"Code Quality Report for <code>refactor/complexity/</code>","text":"<p>Folder Totals: 4 issues (Critical: 0, High: 1, Medium: 3, Low: 0)</p>"},{"location":"quality/refactor_complexity/#missing-documentation","title":"\ud83d\udcc4 Missing Documentation","text":"File Module Doc Missing Classes Missing Functions init.py Missing All Documented All Documented"},{"location":"quality/refactor_complexity/#linting-issues","title":"\ud83e\uddf9 Linting Issues","text":"File Critical High Medium Low Total complexity_analyzer.py 0 0 3 0 3 complexity_summary.py 0 1 0 0 1"},{"location":"quality/refactor_compressor/","title":"Code Quality Report for <code>refactor/compressor/</code>","text":"<p>Folder Totals: 3 issues (Critical: 0, High: 2, Medium: 1, Low: 0)</p>"},{"location":"quality/refactor_compressor/#missing-documentation","title":"\ud83d\udcc4 Missing Documentation","text":"File Module Doc Missing Classes Missing Functions init.py Missing All Documented All Documented merged_report_squeezer.py Missing All Documented _expand, _load_json, _dump_json, _cli strictness_report_squeezer.py Missing All Documented _load_json, _dump_json, _cli"},{"location":"quality/refactor_compressor/#linting-issues","title":"\ud83e\uddf9 Linting Issues","text":"File Critical High Medium Low Total merged_report_squeezer.py 0 1 1 0 2 strictness_report_squeezer.py 0 1 0 0 1"},{"location":"quality/refactor_lint_report_pkg/","title":"Code Quality Report for <code>refactor/lint_report_pkg/</code>","text":"<p>Folder Totals: 11 issues (Critical: 0, High: 8, Medium: 3, Low: 0)</p>"},{"location":"quality/refactor_lint_report_pkg/#missing-documentation","title":"\ud83d\udcc4 Missing Documentation","text":"File Module Doc Missing Classes Missing Functions init.py Present All Documented _inner"},{"location":"quality/refactor_lint_report_pkg/#linting-issues","title":"\ud83e\uddf9 Linting Issues","text":"File Critical High Medium Low Total init.py 0 3 0 0 3 core.py 0 0 1 0 1 helpers.py 0 1 2 0 3 lint_report_cli.py 0 2 0 0 2 path_utils.py 0 1 0 0 1 quality_checker.py 0 1 0 0 1"},{"location":"quality/refactor_lint_report_pkg_plugins/","title":"Code Quality Report for <code>refactor/lint_report_pkg/plugins/</code>","text":"<p>Folder Totals: 3 issues (Critical: 0, High: 0, Medium: 3, Low: 0)</p>"},{"location":"quality/refactor_lint_report_pkg_plugins/#missing-documentation","title":"\ud83d\udcc4 Missing Documentation","text":"File Module Doc Missing Classes Missing Functions flake8.py Missing Flake8Plugin run, parse"},{"location":"quality/refactor_lint_report_pkg_plugins/#linting-issues","title":"\ud83e\uddf9 Linting Issues","text":"File Critical High Medium Low Total flake8.py 0 0 3 0 3"},{"location":"quality/refactor_parsers/","title":"Code Quality Report for <code>refactor/parsers/</code>","text":"<p>Folder Totals: 18 issues (Critical: 0, High: 9, Medium: 9, Low: 0)</p>"},{"location":"quality/refactor_parsers/#missing-documentation","title":"\ud83d\udcc4 Missing Documentation","text":"File Module Doc Missing Classes Missing Functions init.py Missing All Documented All Documented docstring_parser.py Present DocstringAnalyzer, DocstringAuditCLI init, should_exclude, _format_args, arg_str, _get_return_type, _process_function, _process_class, visit, analyze_directory json_coverage_parser.py Missing All Documented _coverage_from_executed"},{"location":"quality/refactor_parsers/#linting-issues","title":"\ud83e\uddf9 Linting Issues","text":"File Critical High Medium Low Total docstring_parser.py 0 9 7 0 16 json_coverage_parser.py 0 0 2 0 2"},{"location":"quality/unified_code_assistant/","title":"Code Quality Report for <code>unified_code_assistant/</code>","text":"<p>Folder Totals: 21 issues (Critical: 0, High: 14, Medium: 7, Low: 0)</p>"},{"location":"quality/unified_code_assistant/#missing-documentation","title":"\ud83d\udcc4 Missing Documentation","text":"File Module Doc Missing Classes Missing Functions init.py Missing All Documented All Documented analysis.py Missing All Documented All Documented assistant_cli.py Missing All Documented chat_mode, main assistant_utils.py Missing All Documented load_report, extract_code_snippets, _format_snippet, _extract_mypy_issues, _extract_lint_issues, _extract_complexity_issues module_summarizer.py Missing All Documented All Documented prompt_builder.py Missing All Documented build_contextual_prompt, build_enhanced_contextual_prompt strategy.py Missing All Documented All Documented"},{"location":"quality/unified_code_assistant/#linting-issues","title":"\ud83e\uddf9 Linting Issues","text":"File Critical High Medium Low Total analysis.py 0 1 1 0 2 assistant_cli.py 0 3 2 0 5 assistant_utils.py 0 1 2 0 3 module_summarizer.py 0 2 0 0 2 prompt_builder.py 0 5 2 0 7 strategy.py 0 2 0 0 2"},{"location":"quality/utils/","title":"Code Quality Report for <code>utils/</code>","text":"<p>Folder Totals: 22 issues (Critical: 0, High: 14, Medium: 8, Low: 0)</p>"},{"location":"quality/utils/#missing-documentation","title":"\ud83d\udcc4 Missing Documentation","text":"File Module Doc Missing Classes Missing Functions init.py Missing All Documented All Documented file_io.py Missing All Documented All Documented file_utils.py Missing All Documented write_json, read_json, safe_read_json, make_backup"},{"location":"quality/utils/#linting-issues","title":"\ud83e\uddf9 Linting Issues","text":"File Critical High Medium Low Total file_io.py 0 5 1 0 6 file_utils.py 0 5 5 0 10 link_summaries_to_raw_logs.py 0 2 1 0 3 zip_util.py 0 2 1 0 3"}]}