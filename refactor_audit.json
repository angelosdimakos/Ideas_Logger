{
  "main.py": {
    "method_diff": {},
    "missing_tests": [],
    "complexity": {
      "bootstrap": {
        "complexity": 8,
        "coverage": 0.2830188679245283,
        "hits": 15,
        "lines": 53
      }
    },
    "quality": {
      "flake8": {
        "issues": [
          {
            "line": 7,
            "column": 1,
            "code": "F401",
            "message": "'scripts.gui.gui_logging.GUILogHandler' imported but unused"
          },
          {
            "line": 18,
            "column": 101,
            "code": "E501",
            "message": "line too long (107 > 100 characters)"
          }
        ]
      },
      "black": {
        "needs_formatting": true
      },
      "pydocstyle": {
        "issues": [
          "scripts/main.py:1 at module level:"
        ]
      },
      "coverage": {
        "percent": 62.2
      }
    }
  },
  "paths.py": {
    "method_diff": {
      "ZephyrusPaths": {
        "missing": [],
        "added": [
          "_resolve_path",
          "from_config"
        ]
      }
    },
    "missing_tests": [
      {
        "class": "ZephyrusPaths",
        "method": "_resolve_path"
      },
      {
        "class": "ZephyrusPaths",
        "method": "from_config"
      }
    ],
    "complexity": {
      "_resolve_path": {
        "complexity": 1,
        "coverage": 1.0,
        "hits": 2,
        "lines": 2
      },
      "from_config": {
        "complexity": 2,
        "coverage": 0.32142857142857145,
        "hits": 18,
        "lines": 56
      }
    },
    "quality": {
      "mypy": {
        "errors": [
          "scripts/paths.py:23: error: Function is missing a type annotation for one or more arguments  [no-untyped-def]"
        ]
      },
      "pydocstyle": {
        "issues": [
          "scripts/paths.py:1 at module level:",
          "scripts/paths.py:7 in public class `ZephyrusPaths`:",
          "scripts/paths.py:27 in public method `from_config`:"
        ]
      },
      "coverage": {
        "percent": 95.2
      }
    }
  },
  "__init__.py": {
    "method_diff": {},
    "missing_tests": [],
    "complexity": {},
    "quality": {
      "pydocstyle": {
        "issues": [
          "scripts/__init__.py:1 at module level:"
        ]
      },
      "coverage": {
        "percent": 100.0
      }
    }
  },
  "dev_commit.py": {
    "method_diff": {},
    "missing_tests": [],
    "complexity": {
      "get_current_branch": {
        "complexity": 1,
        "coverage": 0.2,
        "hits": 3,
        "lines": 15
      },
      "get_modified_files": {
        "complexity": 3,
        "coverage": 0.5,
        "hits": 6,
        "lines": 12
      },
      "is_valid_branch_name": {
        "complexity": 1,
        "coverage": 0.18181818181818182,
        "hits": 2,
        "lines": 11
      },
      "generate_suggested_branch_name": {
        "complexity": 4,
        "coverage": 0.5714285714285714,
        "hits": 12,
        "lines": 21
      },
      "switch_to_new_branch": {
        "complexity": 7,
        "coverage": 0.6060606060606061,
        "hits": 20,
        "lines": 33
      }
    },
    "quality": {
      "flake8": {
        "issues": [
          {
            "line": 9,
            "column": 1,
            "code": "E402",
            "message": "module level import not at top of file"
          },
          {
            "line": 37,
            "column": 101,
            "code": "E501",
            "message": "line too long (107 > 100 characters)"
          },
          {
            "line": 106,
            "column": 15,
            "code": "F541",
            "message": "f-string is missing placeholders"
          },
          {
            "line": 137,
            "column": 9,
            "code": "E303",
            "message": "too many blank lines (2)"
          }
        ]
      },
      "black": {
        "needs_formatting": true
      },
      "mypy": {
        "errors": [
          "scripts/dev_commit.py:12: error: Function is missing a return type annotation  [no-untyped-def]",
          "scripts/dev_commit.py:29: error: Function is missing a return type annotation  [no-untyped-def]",
          "scripts/dev_commit.py:43: error: Function is missing a type annotation  [no-untyped-def]",
          "scripts/dev_commit.py:56: error: Function is missing a return type annotation  [no-untyped-def]",
          "scripts/dev_commit.py:79: error: Function is missing a return type annotation  [no-untyped-def]"
        ]
      },
      "pydocstyle": {
        "issues": [
          "scripts/dev_commit.py:1 at module level:",
          "scripts/dev_commit.py:13 in public function `get_current_branch`:",
          "scripts/dev_commit.py:30 in public function `get_modified_files`:",
          "scripts/dev_commit.py:44 in public function `is_valid_branch_name`:",
          "scripts/dev_commit.py:57 in public function `generate_suggested_branch_name`:",
          "scripts/dev_commit.py:80 in public function `switch_to_new_branch`:"
        ]
      },
      "coverage": {
        "percent": 73.9
      }
    }
  },
  "gui/style_manager.py": {
    "method_diff": {
      "StyleManager": {
        "missing": [],
        "added": [
          "__init__",
          "initialize_styles",
          "update_style"
        ]
      }
    },
    "missing_tests": [
      {
        "class": "StyleManager",
        "method": "__init__"
      },
      {
        "class": "StyleManager",
        "method": "initialize_styles"
      },
      {
        "class": "StyleManager",
        "method": "update_style"
      }
    ],
    "complexity": {
      "__init__": {
        "complexity": 1,
        "coverage": 0.0,
        "hits": 0,
        "lines": 4
      },
      "initialize_styles": {
        "complexity": 1,
        "coverage": 0.0,
        "hits": 0,
        "lines": 14
      },
      "update_style": {
        "complexity": 1,
        "coverage": 0.0,
        "hits": 0,
        "lines": 7
      }
    },
    "quality": {
      "mypy": {
        "errors": [
          "scripts/gui/style_manager.py:10: error: Function is missing a type annotation  [no-untyped-def]",
          "scripts/gui/style_manager.py:15: error: Function is missing a return type annotation  [no-untyped-def]",
          "scripts/gui/style_manager.py:30: error: Function is missing a type annotation  [no-untyped-def]"
        ]
      },
      "pydocstyle": {
        "issues": [
          "scripts/gui/style_manager.py:1 at module level:",
          "scripts/gui/style_manager.py:5 in public class `StyleManager`:",
          "scripts/gui/style_manager.py:10 in public method `__init__`:",
          "scripts/gui/style_manager.py:15 in public method `initialize_styles`:",
          "scripts/gui/style_manager.py:31 in public method `update_style`:"
        ]
      }
    }
  },
  "gui/gui.py": {
    "method_diff": {
      "ZephyrusLoggerGUI": {
        "missing": [],
        "added": [
          "__init__",
          "_setup_gui_logging",
          "_build_main_tab",
          "_build_search_tab",
          "_build_summary_search",
          "_build_raw_search",
          "_build_advanced_search",
          "_build_analytics_tab",
          "_create_status_bar",
          "_populate_category_dropdown",
          "_update_main_category",
          "_update_coverage_display",
          "_on_entry_focus_in",
          "_on_entry_focus_out",
          "_log_entry",
          "_format_json_for_display",
          "_search_summary_from_entry",
          "_search_raw_from_entry",
          "_manual_summarize",
          "_rebuild_tracker",
          "_show_coverage",
          "run"
        ]
      }
    },
    "missing_tests": [
      {
        "class": "ZephyrusLoggerGUI",
        "method": "__init__"
      },
      {
        "class": "ZephyrusLoggerGUI",
        "method": "_setup_gui_logging"
      },
      {
        "class": "ZephyrusLoggerGUI",
        "method": "_build_main_tab"
      },
      {
        "class": "ZephyrusLoggerGUI",
        "method": "_build_search_tab"
      },
      {
        "class": "ZephyrusLoggerGUI",
        "method": "_build_summary_search"
      },
      {
        "class": "ZephyrusLoggerGUI",
        "method": "_build_raw_search"
      },
      {
        "class": "ZephyrusLoggerGUI",
        "method": "_build_advanced_search"
      },
      {
        "class": "ZephyrusLoggerGUI",
        "method": "_build_analytics_tab"
      },
      {
        "class": "ZephyrusLoggerGUI",
        "method": "_create_status_bar"
      },
      {
        "class": "ZephyrusLoggerGUI",
        "method": "_populate_category_dropdown"
      },
      {
        "class": "ZephyrusLoggerGUI",
        "method": "_update_main_category"
      },
      {
        "class": "ZephyrusLoggerGUI",
        "method": "_update_coverage_display"
      },
      {
        "class": "ZephyrusLoggerGUI",
        "method": "_on_entry_focus_in"
      },
      {
        "class": "ZephyrusLoggerGUI",
        "method": "_on_entry_focus_out"
      },
      {
        "class": "ZephyrusLoggerGUI",
        "method": "_log_entry"
      },
      {
        "class": "ZephyrusLoggerGUI",
        "method": "_format_json_for_display"
      },
      {
        "class": "ZephyrusLoggerGUI",
        "method": "_search_summary_from_entry"
      },
      {
        "class": "ZephyrusLoggerGUI",
        "method": "_search_raw_from_entry"
      },
      {
        "class": "ZephyrusLoggerGUI",
        "method": "_manual_summarize"
      },
      {
        "class": "ZephyrusLoggerGUI",
        "method": "_rebuild_tracker"
      },
      {
        "class": "ZephyrusLoggerGUI",
        "method": "_show_coverage"
      },
      {
        "class": "ZephyrusLoggerGUI",
        "method": "run"
      }
    ],
    "complexity": {
      "__init__": {
        "complexity": 1,
        "coverage": 0.0,
        "hits": 0,
        "lines": 82
      },
      "_setup_gui_logging": {
        "complexity": 1,
        "coverage": 0.0,
        "hits": 0,
        "lines": 6
      },
      "_build_main_tab": {
        "complexity": 1,
        "coverage": 0.0,
        "hits": 0,
        "lines": 141
      },
      "_build_search_tab": {
        "complexity": 1,
        "coverage": 0.0,
        "hits": 0,
        "lines": 21
      },
      "_build_summary_search": {
        "complexity": 1,
        "coverage": 0.0,
        "hits": 0,
        "lines": 41
      },
      "_build_raw_search": {
        "complexity": 1,
        "coverage": 0.0,
        "hits": 0,
        "lines": 42
      },
      "_build_advanced_search": {
        "complexity": 1,
        "coverage": 0.0,
        "hits": 0,
        "lines": 6
      },
      "_build_analytics_tab": {
        "complexity": 1,
        "coverage": 0.0,
        "hits": 0,
        "lines": 21
      },
      "_create_status_bar": {
        "complexity": 1,
        "coverage": 0.0,
        "hits": 0,
        "lines": 14
      },
      "_populate_category_dropdown": {
        "complexity": 2,
        "coverage": 0.0,
        "hits": 0,
        "lines": 10
      },
      "_update_main_category": {
        "complexity": 2,
        "coverage": 0.0,
        "hits": 0,
        "lines": 10
      },
      "_update_coverage_display": {
        "complexity": 8,
        "coverage": 0.0,
        "hits": 0,
        "lines": 38
      },
      "_on_entry_focus_in": {
        "complexity": 2,
        "coverage": 0.0,
        "hits": 0,
        "lines": 4
      },
      "_on_entry_focus_out": {
        "complexity": 2,
        "coverage": 0.0,
        "hits": 0,
        "lines": 4
      },
      "_log_entry": {
        "complexity": 5,
        "coverage": 0.0,
        "hits": 0,
        "lines": 17
      },
      "_format_json_for_display": {
        "complexity": 9,
        "coverage": 0.0,
        "hits": 0,
        "lines": 58
      },
      "_search_summary_from_entry": {
        "complexity": 5,
        "coverage": 0.0,
        "hits": 0,
        "lines": 17
      },
      "_search_raw_from_entry": {
        "complexity": 5,
        "coverage": 0.0,
        "hits": 0,
        "lines": 19
      },
      "_manual_summarize": {
        "complexity": 3,
        "coverage": 0.0,
        "hits": 0,
        "lines": 9
      },
      "_rebuild_tracker": {
        "complexity": 3,
        "coverage": 0.0,
        "hits": 0,
        "lines": 15
      },
      "_show_coverage": {
        "complexity": 3,
        "coverage": 0.0,
        "hits": 0,
        "lines": 7
      },
      "run": {
        "complexity": 1,
        "coverage": 0.0,
        "hits": 0,
        "lines": 2
      }
    },
    "quality": {
      "flake8": {
        "issues": [
          {
            "line": 2,
            "column": 1,
            "code": "F401",
            "message": "'tkinter.simpledialog' imported but unused"
          },
          {
            "line": 4,
            "column": 1,
            "code": "F401",
            "message": "'tkinter.PhotoImage' imported but unused"
          },
          {
            "line": 70,
            "column": 101,
            "code": "E501",
            "message": "line too long (113 > 100 characters)"
          },
          {
            "line": 230,
            "column": 101,
            "code": "E501",
            "message": "line too long (104 > 100 characters)"
          },
          {
            "line": 619,
            "column": 29,
            "code": "W292",
            "message": "no newline at end of file"
          }
        ]
      },
      "black": {
        "needs_formatting": true
      },
      "mypy": {
        "errors": [
          "scripts/gui/gui.py:96: error: Function is missing a return type annotation  [no-untyped-def]",
          "scripts/gui/gui.py:103: error: Function is missing a return type annotation  [no-untyped-def]",
          "scripts/gui/gui.py:245: error: Function is missing a return type annotation  [no-untyped-def]",
          "scripts/gui/gui.py:267: error: Function is missing a type annotation  [no-untyped-def]",
          "scripts/gui/gui.py:309: error: Function is missing a type annotation  [no-untyped-def]",
          "scripts/gui/gui.py:352: error: Function is missing a type annotation  [no-untyped-def]",
          "scripts/gui/gui.py:361: error: Function is missing a return type annotation  [no-untyped-def]",
          "scripts/gui/gui.py:383: error: Function is missing a return type annotation  [no-untyped-def]",
          "scripts/gui/gui.py:398: error: Function is missing a return type annotation  [no-untyped-def]",
          "scripts/gui/gui.py:409: error: Function is missing a type annotation  [no-untyped-def]",
          "scripts/gui/gui.py:420: error: Function is missing a return type annotation  [no-untyped-def]",
          "scripts/gui/gui.py:459: error: Function is missing a type annotation  [no-untyped-def]",
          "scripts/gui/gui.py:464: error: Function is missing a type annotation  [no-untyped-def]",
          "scripts/gui/gui.py:469: error: Function is missing a return type annotation  [no-untyped-def]",
          "scripts/gui/gui.py:487: error: Function is missing a type annotation  [no-untyped-def]",
          "scripts/gui/gui.py:546: error: Function is missing a return type annotation  [no-untyped-def]",
          "scripts/gui/gui.py:564: error: Function is missing a return type annotation  [no-untyped-def]",
          "scripts/gui/gui.py:584: error: Function is missing a return type annotation  [no-untyped-def]",
          "scripts/gui/gui.py:594: error: Function is missing a return type annotation  [no-untyped-def]",
          "scripts/gui/gui.py:610: error: Function is missing a return type annotation  [no-untyped-def]",
          "scripts/gui/gui.py:618: error: Function is missing a return type annotation  [no-untyped-def]"
        ]
      },
      "pydocstyle": {
        "issues": [
          "scripts/gui/gui.py:1 at module level:",
          "scripts/gui/gui.py:12 in public class `ZephyrusLoggerGUI`:",
          "scripts/gui/gui.py:13 in public method `__init__`:",
          "scripts/gui/gui.py:488 in private method `_format_json_for_display`:",
          "scripts/gui/gui.py:488 in private method `_format_json_for_display`:",
          "scripts/gui/gui.py:618 in public method `run`:"
        ]
      }
    }
  },
  "gui/app.py": {
    "method_diff": {
      "ZephyrusLoggerApp": {
        "missing": [],
        "added": [
          "__init__",
          "_create_status_bar",
          "run"
        ]
      }
    },
    "missing_tests": [
      {
        "class": "ZephyrusLoggerApp",
        "method": "__init__"
      },
      {
        "class": "ZephyrusLoggerApp",
        "method": "_create_status_bar"
      },
      {
        "class": "ZephyrusLoggerApp",
        "method": "run"
      }
    ],
    "complexity": {
      "__init__": {
        "complexity": 1,
        "coverage": 0.0,
        "hits": 0,
        "lines": 26
      },
      "_create_status_bar": {
        "complexity": 1,
        "coverage": 0.0,
        "hits": 0,
        "lines": 9
      },
      "run": {
        "complexity": 1,
        "coverage": 0.0,
        "hits": 0,
        "lines": 3
      }
    },
    "quality": {
      "flake8": {
        "issues": [
          {
            "line": 5,
            "column": 1,
            "code": "F401",
            "message": "'scripts.gui.widget_factory.WidgetFactory' imported but unused"
          }
        ]
      },
      "mypy": {
        "errors": [
          "scripts/gui/app.py:17: error: Function is missing a type annotation  [no-untyped-def]",
          "scripts/gui/app.py:44: error: Function is missing a return type annotation  [no-untyped-def]",
          "scripts/gui/app.py:54: error: Function is missing a return type annotation  [no-untyped-def]"
        ]
      },
      "pydocstyle": {
        "issues": [
          "scripts/gui/app.py:1 at module level:",
          "scripts/gui/app.py:11 in public class `ZephyrusLoggerApp`:",
          "scripts/gui/app.py:11 in public class `ZephyrusLoggerApp`:",
          "scripts/gui/app.py:17 in public method `__init__`:",
          "scripts/gui/app.py:45 in private method `_create_status_bar`:",
          "scripts/gui/app.py:55 in public method `run`:"
        ]
      }
    }
  },
  "gui/gui_logging.py": {
    "method_diff": {
      "GUILogHandler": {
        "missing": [],
        "added": [
          "__init__",
          "emit",
          "append_message"
        ]
      }
    },
    "missing_tests": [
      {
        "class": "GUILogHandler",
        "method": "__init__"
      },
      {
        "class": "GUILogHandler",
        "method": "emit"
      },
      {
        "class": "GUILogHandler",
        "method": "append_message"
      }
    ],
    "complexity": {
      "__init__": {
        "complexity": 1,
        "coverage": 0.0,
        "hits": 0,
        "lines": 6
      },
      "emit": {
        "complexity": 3,
        "coverage": 0.0,
        "hits": 0,
        "lines": 12
      },
      "append_message": {
        "complexity": 4,
        "coverage": 0.0,
        "hits": 0,
        "lines": 17
      }
    },
    "quality": {
      "flake8": {
        "issues": [
          {
            "line": 27,
            "column": 9,
            "code": "F841",
            "message": "local variable 'e' is assigned to but never used"
          }
        ]
      },
      "mypy": {
        "errors": [
          "scripts/gui/gui_logging.py:10: error: Function is missing a type annotation  [no-untyped-def]",
          "scripts/gui/gui_logging.py:17: error: Function is missing a type annotation  [no-untyped-def]",
          "scripts/gui/gui_logging.py:30: error: Function is missing a type annotation  [no-untyped-def]"
        ]
      },
      "pydocstyle": {
        "issues": [
          "scripts/gui/gui_logging.py:1 at module level:",
          "scripts/gui/gui_logging.py:6 in public class `GUILogHandler`:",
          "scripts/gui/gui_logging.py:11 in public method `__init__`:",
          "scripts/gui/gui_logging.py:18 in public method `emit`:",
          "scripts/gui/gui_logging.py:31 in public method `append_message`:"
        ]
      }
    }
  },
  "gui/widget_factory.py": {
    "method_diff": {
      "WidgetFactory": {
        "missing": [],
        "added": [
          "create_button",
          "create_label",
          "create_entry",
          "create_frame",
          "create_notebook"
        ]
      }
    },
    "missing_tests": [
      {
        "class": "WidgetFactory",
        "method": "create_button"
      },
      {
        "class": "WidgetFactory",
        "method": "create_label"
      },
      {
        "class": "WidgetFactory",
        "method": "create_entry"
      },
      {
        "class": "WidgetFactory",
        "method": "create_frame"
      },
      {
        "class": "WidgetFactory",
        "method": "create_notebook"
      }
    ],
    "complexity": {
      "create_button": {
        "complexity": 1,
        "coverage": 0.0,
        "hits": 0,
        "lines": 5
      },
      "create_label": {
        "complexity": 1,
        "coverage": 0.0,
        "hits": 0,
        "lines": 5
      },
      "create_entry": {
        "complexity": 1,
        "coverage": 0.0,
        "hits": 0,
        "lines": 5
      },
      "create_frame": {
        "complexity": 1,
        "coverage": 0.0,
        "hits": 0,
        "lines": 5
      },
      "create_notebook": {
        "complexity": 1,
        "coverage": 0.0,
        "hits": 0,
        "lines": 5
      }
    },
    "quality": {
      "flake8": {
        "issues": [
          {
            "line": 1,
            "column": 1,
            "code": "F401",
            "message": "'tkinter as tk' imported but unused"
          }
        ]
      },
      "mypy": {
        "errors": [
          "scripts/gui/widget_factory.py:11: error: Function is missing a type annotation  [no-untyped-def]",
          "scripts/gui/widget_factory.py:18: error: Function is missing a type annotation  [no-untyped-def]",
          "scripts/gui/widget_factory.py:25: error: Function is missing a type annotation  [no-untyped-def]",
          "scripts/gui/widget_factory.py:32: error: Function is missing a type annotation  [no-untyped-def]",
          "scripts/gui/widget_factory.py:39: error: Function is missing a type annotation  [no-untyped-def]"
        ]
      },
      "pydocstyle": {
        "issues": [
          "scripts/gui/widget_factory.py:1 at module level:",
          "scripts/gui/widget_factory.py:6 in public class `WidgetFactory`:",
          "scripts/gui/widget_factory.py:12 in public method `create_button`:",
          "scripts/gui/widget_factory.py:19 in public method `create_label`:",
          "scripts/gui/widget_factory.py:26 in public method `create_entry`:",
          "scripts/gui/widget_factory.py:33 in public method `create_frame`:",
          "scripts/gui/widget_factory.py:40 in public method `create_notebook`:"
        ]
      }
    }
  },
  "gui/__init__.py": {
    "method_diff": {},
    "missing_tests": [],
    "complexity": {},
    "quality": {
      "pydocstyle": {
        "issues": [
          "scripts/gui/__init__.py:1 at module level:"
        ]
      }
    }
  },
  "gui/gui_controller.py": {
    "method_diff": {
      "GUIController": {
        "missing": [],
        "added": [
          "__init__",
          "log_entry",
          "force_summarize_all",
          "search_summaries",
          "search_raw_logs",
          "rebuild_tracker",
          "get_tracker_status",
          "get_coverage_data",
          "get_logs"
        ]
      }
    },
    "missing_tests": [
      {
        "class": "GUIController",
        "method": "__init__"
      },
      {
        "class": "GUIController",
        "method": "log_entry"
      },
      {
        "class": "GUIController",
        "method": "force_summarize_all"
      },
      {
        "class": "GUIController",
        "method": "search_summaries"
      },
      {
        "class": "GUIController",
        "method": "search_raw_logs"
      },
      {
        "class": "GUIController",
        "method": "rebuild_tracker"
      },
      {
        "class": "GUIController",
        "method": "get_tracker_status"
      },
      {
        "class": "GUIController",
        "method": "get_coverage_data"
      },
      {
        "class": "GUIController",
        "method": "get_logs"
      }
    ],
    "complexity": {
      "__init__": {
        "complexity": 5,
        "coverage": 0.0,
        "hits": 0,
        "lines": 10
      },
      "log_entry": {
        "complexity": 3,
        "coverage": 0.0,
        "hits": 0,
        "lines": 5
      },
      "force_summarize_all": {
        "complexity": 3,
        "coverage": 0.0,
        "hits": 0,
        "lines": 5
      },
      "search_summaries": {
        "complexity": 3,
        "coverage": 0.0,
        "hits": 0,
        "lines": 5
      },
      "search_raw_logs": {
        "complexity": 3,
        "coverage": 0.0,
        "hits": 0,
        "lines": 5
      },
      "rebuild_tracker": {
        "complexity": 1,
        "coverage": 0.0,
        "hits": 0,
        "lines": 7
      },
      "get_tracker_status": {
        "complexity": 1,
        "coverage": 0.0,
        "hits": 0,
        "lines": 6
      },
      "get_coverage_data": {
        "complexity": 1,
        "coverage": 0.0,
        "hits": 0,
        "lines": 5
      },
      "get_logs": {
        "complexity": 4,
        "coverage": 0.0,
        "hits": 0,
        "lines": 10
      }
    },
    "quality": {
      "mypy": {
        "errors": [
          "scripts/gui/gui_controller.py:9: error: Function is missing a type annotation  [no-untyped-def]",
          "scripts/gui/gui_controller.py:20: error: Function is missing a type annotation  [no-untyped-def]",
          "scripts/gui/gui_controller.py:26: error: Function is missing a return type annotation  [no-untyped-def]",
          "scripts/gui/gui_controller.py:32: error: Function is missing a type annotation  [no-untyped-def]",
          "scripts/gui/gui_controller.py:38: error: Function is missing a type annotation  [no-untyped-def]",
          "scripts/gui/gui_controller.py:44: error: Function is missing a return type annotation  [no-untyped-def]",
          "scripts/gui/gui_controller.py:52: error: Function is missing a return type annotation  [no-untyped-def]",
          "scripts/gui/gui_controller.py:59: error: Function is missing a return type annotation  [no-untyped-def]",
          "scripts/gui/gui_controller.py:65: error: Function is missing a return type annotation  [no-untyped-def]"
        ]
      },
      "pydocstyle": {
        "issues": [
          "scripts/gui/gui_controller.py:1 at module level:",
          "scripts/gui/gui_controller.py:8 in public class `GUIController`:",
          "scripts/gui/gui_controller.py:9 in public method `__init__`:",
          "scripts/gui/gui_controller.py:20 in public method `log_entry`:",
          "scripts/gui/gui_controller.py:26 in public method `force_summarize_all`:",
          "scripts/gui/gui_controller.py:32 in public method `search_summaries`:",
          "scripts/gui/gui_controller.py:38 in public method `search_raw_logs`:",
          "scripts/gui/gui_controller.py:45 in public method `rebuild_tracker`:",
          "scripts/gui/gui_controller.py:53 in public method `get_tracker_status`:",
          "scripts/gui/gui_controller.py:53 in public method `get_tracker_status`:",
          "scripts/gui/gui_controller.py:60 in public method `get_coverage_data`:",
          "scripts/gui/gui_controller.py:60 in public method `get_coverage_data`:",
          "scripts/gui/gui_controller.py:66 in public method `get_logs`:",
          "scripts/gui/gui_controller.py:66 in public method `get_logs`:"
        ]
      }
    }
  },
  "gui/base/base_tab.py": {
    "method_diff": {
      "BaseTab": {
        "missing": [],
        "added": [
          "__init__",
          "setup_tab",
          "on_show"
        ]
      }
    },
    "missing_tests": [
      {
        "class": "BaseTab",
        "method": "__init__"
      },
      {
        "class": "BaseTab",
        "method": "setup_tab"
      },
      {
        "class": "BaseTab",
        "method": "on_show"
      }
    ],
    "complexity": {
      "__init__": {
        "complexity": 1,
        "coverage": 0.0,
        "hits": 0,
        "lines": 4
      },
      "setup_tab": {
        "complexity": 1,
        "coverage": 0.0,
        "hits": 0,
        "lines": 6
      },
      "on_show": {
        "complexity": 1,
        "coverage": 0.0,
        "hits": 0,
        "lines": 6
      }
    },
    "quality": {
      "flake8": {
        "issues": [
          {
            "line": 1,
            "column": 1,
            "code": "F401",
            "message": "'tkinter as tk' imported but unused"
          }
        ]
      },
      "mypy": {
        "errors": [
          "scripts/gui/base/base_tab.py:11: error: Function is missing a type annotation  [no-untyped-def]",
          "scripts/gui/base/base_tab.py:16: error: Function is missing a return type annotation  [no-untyped-def]",
          "scripts/gui/base/base_tab.py:23: error: Function is missing a return type annotation  [no-untyped-def]"
        ]
      },
      "pydocstyle": {
        "issues": [
          "scripts/gui/base/base_tab.py:1 at module level:",
          "scripts/gui/base/base_tab.py:6 in public class `BaseTab`:",
          "scripts/gui/base/base_tab.py:11 in public method `__init__`:",
          "scripts/gui/base/base_tab.py:17 in public method `setup_tab`:",
          "scripts/gui/base/base_tab.py:24 in public method `on_show`:",
          "scripts/gui/base/base_tab.py:24 in public method `on_show`:"
        ]
      }
    }
  },
  "gui/base/__init__.py": {
    "method_diff": {},
    "missing_tests": [],
    "complexity": {},
    "quality": {
      "pydocstyle": {
        "issues": [
          "scripts/gui/base/__init__.py:1 at module level:"
        ]
      }
    }
  },
  "gui/base/base_panel.py": {
    "method_diff": {
      "BasePanel": {
        "missing": [],
        "added": [
          "__init__",
          "initialize_ui",
          "refresh"
        ]
      }
    },
    "missing_tests": [
      {
        "class": "BasePanel",
        "method": "__init__"
      },
      {
        "class": "BasePanel",
        "method": "initialize_ui"
      },
      {
        "class": "BasePanel",
        "method": "refresh"
      }
    ],
    "complexity": {
      "__init__": {
        "complexity": 1,
        "coverage": 0.0,
        "hits": 0,
        "lines": 4
      },
      "initialize_ui": {
        "complexity": 1,
        "coverage": 0.0,
        "hits": 0,
        "lines": 6
      },
      "refresh": {
        "complexity": 1,
        "coverage": 0.0,
        "hits": 0,
        "lines": 6
      }
    },
    "quality": {
      "flake8": {
        "issues": [
          {
            "line": 1,
            "column": 1,
            "code": "F401",
            "message": "'tkinter as tk' imported but unused"
          }
        ]
      },
      "mypy": {
        "errors": [
          "scripts/gui/base/base_panel.py:11: error: Function is missing a type annotation  [no-untyped-def]",
          "scripts/gui/base/base_panel.py:16: error: Function is missing a return type annotation  [no-untyped-def]",
          "scripts/gui/base/base_panel.py:23: error: Function is missing a return type annotation  [no-untyped-def]"
        ]
      },
      "pydocstyle": {
        "issues": [
          "scripts/gui/base/base_panel.py:1 at module level:",
          "scripts/gui/base/base_panel.py:6 in public class `BasePanel`:",
          "scripts/gui/base/base_panel.py:11 in public method `__init__`:",
          "scripts/gui/base/base_panel.py:17 in public method `initialize_ui`:",
          "scripts/gui/base/base_panel.py:24 in public method `refresh`:"
        ]
      }
    }
  },
  "gui/panels/__init__.py": {
    "method_diff": {},
    "missing_tests": [],
    "complexity": {},
    "quality": {
      "pydocstyle": {
        "issues": [
          "scripts/gui/panels/__init__.py:1 at module level:"
        ]
      }
    }
  },
  "gui/panels/log_panel.py": {
    "method_diff": {
      "LogPanel": {
        "missing": [],
        "added": [
          "__init__",
          "initialize_ui",
          "refresh"
        ]
      }
    },
    "missing_tests": [
      {
        "class": "LogPanel",
        "method": "__init__"
      },
      {
        "class": "LogPanel",
        "method": "initialize_ui"
      },
      {
        "class": "LogPanel",
        "method": "refresh"
      }
    ],
    "complexity": {
      "__init__": {
        "complexity": 1,
        "coverage": 0.0,
        "hits": 0,
        "lines": 5
      },
      "initialize_ui": {
        "complexity": 1,
        "coverage": 0.0,
        "hits": 0,
        "lines": 8
      },
      "refresh": {
        "complexity": 5,
        "coverage": 0.0,
        "hits": 0,
        "lines": 12
      }
    },
    "quality": {
      "mypy": {
        "errors": [
          "scripts/gui/panels/log_panel.py:11: error: Function is missing a type annotation  [no-untyped-def]",
          "scripts/gui/panels/log_panel.py:17: error: Function is missing a return type annotation  [no-untyped-def]",
          "scripts/gui/panels/log_panel.py:26: error: Function is missing a return type annotation  [no-untyped-def]"
        ]
      },
      "pydocstyle": {
        "issues": [
          "scripts/gui/panels/log_panel.py:1 at module level:",
          "scripts/gui/panels/log_panel.py:7 in public class `LogPanel`:",
          "scripts/gui/panels/log_panel.py:11 in public method `__init__`:",
          "scripts/gui/panels/log_panel.py:17 in public method `initialize_ui`:",
          "scripts/gui/panels/log_panel.py:26 in public method `refresh`:"
        ]
      }
    }
  },
  "gui/panels/coverage_panel.py": {
    "method_diff": {
      "CoveragePanel": {
        "missing": [],
        "added": [
          "__init__",
          "initialize_ui",
          "refresh"
        ]
      }
    },
    "missing_tests": [
      {
        "class": "CoveragePanel",
        "method": "__init__"
      },
      {
        "class": "CoveragePanel",
        "method": "initialize_ui"
      },
      {
        "class": "CoveragePanel",
        "method": "refresh"
      }
    ],
    "complexity": {
      "__init__": {
        "complexity": 1,
        "coverage": 0.0,
        "hits": 0,
        "lines": 5
      },
      "initialize_ui": {
        "complexity": 1,
        "coverage": 0.0,
        "hits": 0,
        "lines": 13
      },
      "refresh": {
        "complexity": 7,
        "coverage": 0.0,
        "hits": 0,
        "lines": 19
      }
    },
    "quality": {
      "mypy": {
        "errors": [
          "scripts/gui/panels/coverage_panel.py:13: error: Function is missing a type annotation  [no-untyped-def]",
          "scripts/gui/panels/coverage_panel.py:19: error: Function is missing a return type annotation  [no-untyped-def]",
          "scripts/gui/panels/coverage_panel.py:33: error: Function is missing a return type annotation  [no-untyped-def]"
        ]
      },
      "pydocstyle": {
        "issues": [
          "scripts/gui/panels/coverage_panel.py:1 at module level:",
          "scripts/gui/panels/coverage_panel.py:9 in public class `CoveragePanel`:",
          "scripts/gui/panels/coverage_panel.py:13 in public method `__init__`:",
          "scripts/gui/panels/coverage_panel.py:19 in public method `initialize_ui`:",
          "scripts/gui/panels/coverage_panel.py:33 in public method `refresh`:"
        ]
      }
    }
  },
  "gui/panels/entry_panel.py": {
    "method_diff": {
      "EntryPanel": {
        "missing": [],
        "added": [
          "__init__",
          "initialize_ui",
          "on_submit",
          "refresh"
        ]
      }
    },
    "missing_tests": [
      {
        "class": "EntryPanel",
        "method": "__init__"
      },
      {
        "class": "EntryPanel",
        "method": "initialize_ui"
      },
      {
        "class": "EntryPanel",
        "method": "on_submit"
      },
      {
        "class": "EntryPanel",
        "method": "refresh"
      }
    ],
    "complexity": {
      "__init__": {
        "complexity": 1,
        "coverage": 0.0,
        "hits": 0,
        "lines": 6
      },
      "initialize_ui": {
        "complexity": 1,
        "coverage": 0.0,
        "hits": 0,
        "lines": 14
      },
      "on_submit": {
        "complexity": 6,
        "coverage": 0.0,
        "hits": 0,
        "lines": 18
      },
      "refresh": {
        "complexity": 1,
        "coverage": 0.0,
        "hits": 0,
        "lines": 3
      }
    },
    "quality": {
      "flake8": {
        "issues": [
          {
            "line": 43,
            "column": 101,
            "code": "E501",
            "message": "line too long (101 > 100 characters)"
          }
        ]
      },
      "mypy": {
        "errors": [
          "scripts/gui/panels/entry_panel.py:14: error: Function is missing a type annotation  [no-untyped-def]",
          "scripts/gui/panels/entry_panel.py:21: error: Function is missing a return type annotation  [no-untyped-def]",
          "scripts/gui/panels/entry_panel.py:36: error: Function is missing a return type annotation  [no-untyped-def]",
          "scripts/gui/panels/entry_panel.py:55: error: Function is missing a return type annotation  [no-untyped-def]"
        ]
      },
      "pydocstyle": {
        "issues": [
          "scripts/gui/panels/entry_panel.py:1 at module level:",
          "scripts/gui/panels/entry_panel.py:10 in public class `EntryPanel`:",
          "scripts/gui/panels/entry_panel.py:14 in public method `__init__`:",
          "scripts/gui/panels/entry_panel.py:21 in public method `initialize_ui`:",
          "scripts/gui/panels/entry_panel.py:36 in public method `on_submit`:",
          "scripts/gui/panels/entry_panel.py:55 in public method `refresh`:"
        ]
      }
    }
  },
  "gui/panels/action_panel.py": {
    "method_diff": {
      "ActionPanel": {
        "missing": [],
        "added": [
          "__init__",
          "initialize_ui",
          "on_summarize",
          "on_rebuild",
          "refresh"
        ]
      }
    },
    "missing_tests": [
      {
        "class": "ActionPanel",
        "method": "__init__"
      },
      {
        "class": "ActionPanel",
        "method": "initialize_ui"
      },
      {
        "class": "ActionPanel",
        "method": "on_summarize"
      },
      {
        "class": "ActionPanel",
        "method": "on_rebuild"
      },
      {
        "class": "ActionPanel",
        "method": "refresh"
      }
    ],
    "complexity": {
      "__init__": {
        "complexity": 1,
        "coverage": 0.0,
        "hits": 0,
        "lines": 6
      },
      "initialize_ui": {
        "complexity": 1,
        "coverage": 0.0,
        "hits": 0,
        "lines": 16
      },
      "on_summarize": {
        "complexity": 5,
        "coverage": 0.0,
        "hits": 0,
        "lines": 10
      },
      "on_rebuild": {
        "complexity": 5,
        "coverage": 0.0,
        "hits": 0,
        "lines": 10
      },
      "refresh": {
        "complexity": 1,
        "coverage": 0.0,
        "hits": 0,
        "lines": 3
      }
    },
    "quality": {
      "mypy": {
        "errors": [
          "scripts/gui/panels/action_panel.py:14: error: Function is missing a type annotation  [no-untyped-def]",
          "scripts/gui/panels/action_panel.py:21: error: Function is missing a return type annotation  [no-untyped-def]",
          "scripts/gui/panels/action_panel.py:38: error: Function is missing a return type annotation  [no-untyped-def]",
          "scripts/gui/panels/action_panel.py:49: error: Function is missing a return type annotation  [no-untyped-def]",
          "scripts/gui/panels/action_panel.py:60: error: Function is missing a return type annotation  [no-untyped-def]"
        ]
      },
      "pydocstyle": {
        "issues": [
          "scripts/gui/panels/action_panel.py:1 at module level:",
          "scripts/gui/panels/action_panel.py:10 in public class `ActionPanel`:",
          "scripts/gui/panels/action_panel.py:14 in public method `__init__`:",
          "scripts/gui/panels/action_panel.py:21 in public method `initialize_ui`:",
          "scripts/gui/panels/action_panel.py:38 in public method `on_summarize`:",
          "scripts/gui/panels/action_panel.py:49 in public method `on_rebuild`:",
          "scripts/gui/panels/action_panel.py:60 in public method `refresh`:"
        ]
      }
    }
  },
  "gui/tabs/__init__.py": {
    "method_diff": {},
    "missing_tests": [],
    "complexity": {},
    "quality": {
      "pydocstyle": {
        "issues": [
          "scripts/gui/tabs/__init__.py:1 at module level:"
        ]
      }
    }
  },
  "gui/tabs/main_tab.py": {
    "method_diff": {
      "MainTab": {
        "missing": [],
        "added": [
          "setup_tab",
          "on_show"
        ]
      }
    },
    "missing_tests": [
      {
        "class": "MainTab",
        "method": "setup_tab"
      },
      {
        "class": "MainTab",
        "method": "on_show"
      }
    ],
    "complexity": {
      "setup_tab": {
        "complexity": 1,
        "coverage": 0.0,
        "hits": 0,
        "lines": 20
      },
      "on_show": {
        "complexity": 5,
        "coverage": 0.0,
        "hits": 0,
        "lines": 12
      }
    },
    "quality": {
      "mypy": {
        "errors": [
          "scripts/gui/tabs/main_tab.py:17: error: Function is missing a return type annotation  [no-untyped-def]",
          "scripts/gui/tabs/main_tab.py:38: error: Function is missing a return type annotation  [no-untyped-def]"
        ]
      },
      "pydocstyle": {
        "issues": [
          "scripts/gui/tabs/main_tab.py:1 at module level:",
          "scripts/gui/tabs/main_tab.py:12 in public class `MainTab`:",
          "scripts/gui/tabs/main_tab.py:17 in public method `setup_tab`:",
          "scripts/gui/tabs/main_tab.py:39 in public method `on_show`:",
          "scripts/gui/tabs/main_tab.py:39 in public method `on_show`:"
        ]
      }
    }
  },
  "config/config_manager.py": {
    "method_diff": {
      "AppConfig": {
        "missing": [],
        "added": []
      },
      "Config": {
        "missing": [],
        "added": []
      },
      "ConfigManager": {
        "missing": [],
        "added": [
          "load_config",
          "get_value",
          "reset",
          "validate_config_paths"
        ]
      }
    },
    "missing_tests": [
      {
        "class": "ConfigManager",
        "method": "load_config"
      },
      {
        "class": "ConfigManager",
        "method": "get_value"
      },
      {
        "class": "ConfigManager",
        "method": "reset"
      },
      {
        "class": "ConfigManager",
        "method": "validate_config_paths"
      }
    ],
    "complexity": {
      "load_config": {
        "complexity": 9,
        "coverage": 0.2375,
        "hits": 19,
        "lines": 80
      },
      "get_value": {
        "complexity": 1,
        "coverage": 1.0,
        "hits": 3,
        "lines": 3
      },
      "reset": {
        "complexity": 1,
        "coverage": 1.0,
        "hits": 4,
        "lines": 4
      },
      "validate_config_paths": {
        "complexity": 4,
        "coverage": 0.09090909090909091,
        "hits": 1,
        "lines": 11
      }
    },
    "quality": {
      "flake8": {
        "issues": [
          {
            "line": 5,
            "column": 1,
            "code": "F401",
            "message": "'json' imported but unused"
          }
        ]
      },
      "mypy": {
        "errors": [
          "scripts/config/config_manager.py:128: error: Missing named argument \"mode\" for \"AppConfig\"  [call-arg]",
          "scripts/config/config_manager.py:128: error: Missing named argument \"use_gui\" for \"AppConfig\"  [call-arg]",
          "scripts/config/config_manager.py:128: error: Missing named argument \"interface_theme\" for \"AppConfig\"  [call-arg]",
          "scripts/config/config_manager.py:128: error: Missing named argument \"batch_size\" for \"AppConfig\"  [call-arg]",
          "scripts/config/config_manager.py:128: error: Missing named argument \"autosave_interval\" for \"AppConfig\"  [call-arg]",
          "scripts/config/config_manager.py:128: error: Missing named argument \"log_level\" for \"AppConfig\"  [call-arg]",
          "scripts/config/config_manager.py:128: error: Missing named argument \"summarization\" for \"AppConfig\"  [call-arg]",
          "scripts/config/config_manager.py:128: error: Missing named argument \"llm_provider\" for \"AppConfig\"  [call-arg]",
          "scripts/config/config_manager.py:128: error: Missing named argument \"llm_model\" for \"AppConfig\"  [call-arg]",
          "scripts/config/config_manager.py:128: error: Missing named argument \"openai_model\" for \"AppConfig\"  [call-arg]",
          "scripts/config/config_manager.py:128: error: Missing named argument \"api_keys\" for \"AppConfig\"  [call-arg]",
          "scripts/config/config_manager.py:128: error: Missing named argument \"embedding_model\" for \"AppConfig\"  [call-arg]",
          "scripts/config/config_manager.py:128: error: Missing named argument \"faiss_top_k\" for \"AppConfig\"  [call-arg]",
          "scripts/config/config_manager.py:128: error: Missing named argument \"force_summary_tracker_rebuild\" for \"AppConfig\"  [call-arg]",
          "scripts/config/config_manager.py:128: error: Missing named argument \"vector_store_dir\" for \"AppConfig\"  [call-arg]",
          "scripts/config/config_manager.py:128: error: Missing named argument \"faiss_index_path\" for \"AppConfig\"  [call-arg]",
          "scripts/config/config_manager.py:128: error: Missing named argument \"faiss_metadata_path\" for \"AppConfig\"  [call-arg]",
          "scripts/config/config_manager.py:128: error: Missing named argument \"logs_dir\" for \"AppConfig\"  [call-arg]",
          "scripts/config/config_manager.py:128: error: Missing named argument \"export_dir\" for \"AppConfig\"  [call-arg]",
          "scripts/config/config_manager.py:128: error: Missing named argument \"correction_summaries_path\" for \"AppConfig\"  [call-arg]",
          "scripts/config/config_manager.py:128: error: Missing named argument \"raw_log_path\" for \"AppConfig\"  [call-arg]",
          "scripts/config/config_manager.py:128: error: Missing named argument \"raw_log_index_path\" for \"AppConfig\"  [call-arg]",
          "scripts/config/config_manager.py:128: error: Missing named argument \"raw_log_metadata_path\" for \"AppConfig\"  [call-arg]",
          "scripts/config/config_manager.py:128: error: Missing named argument \"log_format\" for \"AppConfig\"  [call-arg]",
          "scripts/config/config_manager.py:128: error: Missing named argument \"markdown_export\" for \"AppConfig\"  [call-arg]",
          "scripts/config/config_manager.py:128: error: Missing named argument \"default_tags\" for \"AppConfig\"  [call-arg]",
          "scripts/config/config_manager.py:128: error: Missing named argument \"use_templates\" for \"AppConfig\"  [call-arg]",
          "scripts/config/config_manager.py:128: error: Missing named argument \"persona\" for \"AppConfig\"  [call-arg]",
          "scripts/config/config_manager.py:128: error: Missing named argument \"category_structure\" for \"AppConfig\"  [call-arg]",
          "scripts/config/config_manager.py:128: error: Missing named argument \"prompts_by_subcategory\" for \"AppConfig\"  [call-arg]",
          "scripts/config/config_manager.py:128: error: Missing named argument \"test_mode\" for \"AppConfig\"  [call-arg]",
          "scripts/config/config_manager.py:128: error: Missing named argument \"test_logs_dir\" for \"AppConfig\"  [call-arg]",
          "scripts/config/config_manager.py:128: error: Missing named argument \"test_vector_store_dir\" for \"AppConfig\"  [call-arg]",
          "scripts/config/config_manager.py:128: error: Missing named argument \"test_export_dir\" for \"AppConfig\"  [call-arg]",
          "scripts/config/config_manager.py:128: error: Missing named argument \"test_correction_summaries_path\" for \"AppConfig\"  [call-arg]",
          "scripts/config/config_manager.py:128: error: Missing named argument \"test_raw_log_path\" for \"AppConfig\"  [call-arg]",
          "scripts/config/config_manager.py:128: error: Missing named argument \"test_summary_tracker_path\" for \"AppConfig\"  [call-arg]",
          "scripts/config/config_manager.py:128: error: Missing named argument \"remote_sync\" for \"AppConfig\"  [call-arg]",
          "scripts/config/config_manager.py:128: error: Missing named argument \"plugin_dir\" for \"AppConfig\"  [call-arg]",
          "scripts/config/config_manager.py:128: error: Missing named argument \"enable_debug_logging\" for \"AppConfig\"  [call-arg]",
          "scripts/config/config_manager.py:128: error: Missing named argument \"strict_offline_mode\" for \"AppConfig\"  [call-arg]",
          "scripts/config/config_manager.py:150: error: Function is missing a return type annotation  [no-untyped-def]",
          "scripts/config/config_manager.py:156: error: Function is missing a return type annotation  [no-untyped-def]"
        ]
      },
      "pydocstyle": {
        "issues": [
          "scripts/config/config_manager.py:1 at module level:",
          "scripts/config/config_manager.py:11 in public class `AppConfig`:",
          "scripts/config/config_manager.py:54 in public nested class `Config`:",
          "scripts/config/config_manager.py:58 in public class `ConfigManager`:",
          "scripts/config/config_manager.py:63 in public method `load_config`:",
          "scripts/config/config_manager.py:145 in public method `get_value`:",
          "scripts/config/config_manager.py:150 in public method `reset`:",
          "scripts/config/config_manager.py:156 in public method `validate_config_paths`:"
        ]
      }
    }
  },
  "config/constants.py": {
    "method_diff": {},
    "missing_tests": [],
    "complexity": {},
    "quality": {
      "pydocstyle": {
        "issues": [
          "scripts/config/constants.py:1 at module level:"
        ]
      }
    }
  },
  "config/logging_setup.py": {
    "method_diff": {},
    "missing_tests": [],
    "complexity": {
      "setup_logging": {
        "complexity": 2,
        "coverage": 0.625,
        "hits": 10,
        "lines": 16
      }
    },
    "quality": {
      "mypy": {
        "errors": [
          "scripts/config/logging_setup.py:5: error: Function is missing a type annotation  [no-untyped-def]"
        ]
      },
      "pydocstyle": {
        "issues": [
          "scripts/config/logging_setup.py:1 at module level:"
        ]
      }
    }
  },
  "config/__init__.py": {
    "method_diff": {},
    "missing_tests": [],
    "complexity": {},
    "quality": {
      "pydocstyle": {
        "issues": [
          "scripts/config/__init__.py:1 at module level:"
        ]
      }
    }
  },
  "config/config_loader.py": {
    "method_diff": {},
    "missing_tests": [],
    "complexity": {
      "setup_logging": {
        "complexity": 1,
        "coverage": 0.35294117647058826,
        "hits": 6,
        "lines": 17
      },
      "load_config": {
        "complexity": 7,
        "coverage": 0.35,
        "hits": 14,
        "lines": 40
      },
      "get_config_value": {
        "complexity": 2,
        "coverage": 0.2631578947368421,
        "hits": 5,
        "lines": 19
      },
      "get_absolute_path": {
        "complexity": 3,
        "coverage": 0.2,
        "hits": 3,
        "lines": 15
      },
      "is_test_mode": {
        "complexity": 2,
        "coverage": 0.058823529411764705,
        "hits": 1,
        "lines": 17
      },
      "get_effective_config": {
        "complexity": 4,
        "coverage": 0.34285714285714286,
        "hits": 12,
        "lines": 35
      }
    },
    "quality": {
      "flake8": {
        "issues": [
          {
            "line": 10,
            "column": 101,
            "code": "E501",
            "message": "line too long (108 > 100 characters)"
          },
          {
            "line": 38,
            "column": 1,
            "code": "F811",
            "message": "redefinition of unused 'json' from line 1"
          },
          {
            "line": 38,
            "column": 1,
            "code": "E402",
            "message": "module level import not at top of file"
          },
          {
            "line": 39,
            "column": 1,
            "code": "E402",
            "message": "module level import not at top of file"
          },
          {
            "line": 40,
            "column": 1,
            "code": "E402",
            "message": "module level import not at top of file"
          },
          {
            "line": 149,
            "column": 101,
            "code": "E501",
            "message": "line too long (118 > 100 characters)"
          },
          {
            "line": 160,
            "column": 101,
            "code": "E501",
            "message": "line too long (110 > 100 characters)"
          }
        ]
      },
      "mypy": {
        "errors": [
          "scripts/config/config_loader.py:7: error: Function is missing a return type annotation  [no-untyped-def]",
          "scripts/config/config_loader.py:45: error: Incompatible types in assignment (expression has type \"str\", variable has type \"Path\")  [assignment]",
          "scripts/config/config_loader.py:48: error: Function is missing a type annotation  [no-untyped-def]",
          "scripts/config/config_loader.py:90: error: Function is missing a type annotation  [no-untyped-def]",
          "scripts/config/config_loader.py:111: error: Function is missing a type annotation  [no-untyped-def]",
          "scripts/config/config_loader.py:128: error: Function is missing a type annotation  [no-untyped-def]",
          "scripts/config/config_loader.py:147: error: Function is missing a type annotation  [no-untyped-def]"
        ]
      },
      "pydocstyle": {
        "issues": [
          "scripts/config/config_loader.py:1 at module level:",
          "scripts/config/config_loader.py:8 in public function `setup_logging`:",
          "scripts/config/config_loader.py:8 in public function `setup_logging`:",
          "scripts/config/config_loader.py:49 in public function `load_config`:",
          "scripts/config/config_loader.py:148 in public function `get_effective_config`:"
        ]
      }
    }
  },
  "indexers/raw_log_indexer.py": {
    "method_diff": {
      "RawLogIndexer": {
        "missing": [],
        "added": [
          "__init__",
          "load_entries",
          "_process_categories",
          "_process_subcategories",
          "_process_entries",
          "build_index_from_logs",
          "rebuild"
        ]
      }
    },
    "missing_tests": [
      {
        "class": "RawLogIndexer",
        "method": "__init__"
      },
      {
        "class": "RawLogIndexer",
        "method": "load_entries"
      },
      {
        "class": "RawLogIndexer",
        "method": "_process_categories"
      },
      {
        "class": "RawLogIndexer",
        "method": "_process_subcategories"
      },
      {
        "class": "RawLogIndexer",
        "method": "_process_entries"
      },
      {
        "class": "RawLogIndexer",
        "method": "build_index_from_logs"
      },
      {
        "class": "RawLogIndexer",
        "method": "rebuild"
      }
    ],
    "complexity": {
      "__init__": {
        "complexity": 4,
        "coverage": 0.1111111111111111,
        "hits": 1,
        "lines": 9
      },
      "load_entries": {
        "complexity": 9,
        "coverage": 0.4642857142857143,
        "hits": 13,
        "lines": 28
      },
      "_process_categories": {
        "complexity": 4,
        "coverage": 0.18518518518518517,
        "hits": 5,
        "lines": 27
      },
      "_process_subcategories": {
        "complexity": 4,
        "coverage": 0.1724137931034483,
        "hits": 5,
        "lines": 29
      },
      "_process_entries": {
        "complexity": 5,
        "coverage": 0.19607843137254902,
        "hits": 10,
        "lines": 51
      },
      "build_index_from_logs": {
        "complexity": 4,
        "coverage": 0.5384615384615384,
        "hits": 7,
        "lines": 13
      },
      "rebuild": {
        "complexity": 2,
        "coverage": 0.7142857142857143,
        "hits": 5,
        "lines": 7
      }
    },
    "quality": {
      "flake8": {
        "issues": [
          {
            "line": 68,
            "column": 101,
            "code": "E501",
            "message": "line too long (111 > 100 characters)"
          },
          {
            "line": 97,
            "column": 101,
            "code": "E501",
            "message": "line too long (108 > 100 characters)"
          },
          {
            "line": 129,
            "column": 101,
            "code": "E501",
            "message": "line too long (101 > 100 characters)"
          },
          {
            "line": 134,
            "column": 101,
            "code": "E501",
            "message": "line too long (108 > 100 characters)"
          }
        ]
      },
      "mypy": {
        "errors": [
          "scripts/indexers/raw_log_indexer.py:46: error: Need type annotation for \"texts\" (hint: \"texts: list[<type>] = ...\")  [var-annotated]",
          "scripts/indexers/raw_log_indexer.py:46: error: Need type annotation for \"meta\" (hint: \"meta: list[<type>] = ...\")  [var-annotated]",
          "scripts/indexers/raw_log_indexer.py:179: error: Function is missing a return type annotation  [no-untyped-def]"
        ]
      },
      "pydocstyle": {
        "issues": [
          "scripts/indexers/raw_log_indexer.py:1 at module level:",
          "scripts/indexers/raw_log_indexer.py:11 in public class `RawLogIndexer`:",
          "scripts/indexers/raw_log_indexer.py:16 in public method `__init__`:",
          "scripts/indexers/raw_log_indexer.py:27 in public method `load_entries`:",
          "scripts/indexers/raw_log_indexer.py:58 in private method `_process_categories`:",
          "scripts/indexers/raw_log_indexer.py:86 in private method `_process_subcategories`:",
          "scripts/indexers/raw_log_indexer.py:122 in private method `_process_entries`:",
          "scripts/indexers/raw_log_indexer.py:166 in public method `build_index_from_logs`:",
          "scripts/indexers/raw_log_indexer.py:166 in public method `build_index_from_logs`:",
          "scripts/indexers/raw_log_indexer.py:179 in public method `rebuild`:"
        ]
      }
    }
  },
  "indexers/base_indexer.py": {
    "method_diff": {
      "BaseIndexer": {
        "missing": [],
        "added": [
          "__init__",
          "load_index",
          "search",
          "build_index",
          "save_index"
        ]
      }
    },
    "missing_tests": [
      {
        "class": "BaseIndexer",
        "method": "__init__"
      },
      {
        "class": "BaseIndexer",
        "method": "load_index"
      },
      {
        "class": "BaseIndexer",
        "method": "search"
      },
      {
        "class": "BaseIndexer",
        "method": "build_index"
      },
      {
        "class": "BaseIndexer",
        "method": "save_index"
      }
    ],
    "complexity": {
      "__init__": {
        "complexity": 3,
        "coverage": 0.5238095238095238,
        "hits": 11,
        "lines": 21
      },
      "load_index": {
        "complexity": 7,
        "coverage": 0.47619047619047616,
        "hits": 10,
        "lines": 21
      },
      "search": {
        "complexity": 6,
        "coverage": 0.4722222222222222,
        "hits": 17,
        "lines": 36
      },
      "build_index": {
        "complexity": 5,
        "coverage": 0.4,
        "hits": 12,
        "lines": 30
      },
      "save_index": {
        "complexity": 2,
        "coverage": 0.4166666666666667,
        "hits": 5,
        "lines": 12
      }
    },
    "quality": {
      "flake8": {
        "issues": [
          {
            "line": 1,
            "column": 1,
            "code": "F401",
            "message": "'typing.Tuple' imported but unused"
          },
          {
            "line": 2,
            "column": 1,
            "code": "F401",
            "message": "'os' imported but unused"
          },
          {
            "line": 2,
            "column": 10,
            "code": "E401",
            "message": "multiple imports on one line"
          },
          {
            "line": 66,
            "column": 101,
            "code": "E501",
            "message": "line too long (116 > 100 characters)"
          },
          {
            "line": 81,
            "column": 16,
            "code": "E741",
            "message": "ambiguous variable name 'I'"
          }
        ]
      },
      "mypy": {
        "errors": [
          "scripts/indexers/base_indexer.py:117: error: \"None\" has no attribute \"add\"  [attr-defined]"
        ]
      },
      "pydocstyle": {
        "issues": [
          "scripts/indexers/base_indexer.py:1 at module level:",
          "scripts/indexers/base_indexer.py:12 in public class `BaseIndexer`:",
          "scripts/indexers/base_indexer.py:14 in public method `__init__`:",
          "scripts/indexers/base_indexer.py:14 in public method `__init__`:",
          "scripts/indexers/base_indexer.py:36 in public method `load_index`:",
          "scripts/indexers/base_indexer.py:58 in public method `search`:",
          "scripts/indexers/base_indexer.py:97 in public method `build_index`:",
          "scripts/indexers/base_indexer.py:126 in public method `save_index`:"
        ]
      }
    }
  },
  "indexers/summary_indexer.py": {
    "method_diff": {
      "SummaryIndexer": {
        "missing": [],
        "added": [
          "__init__",
          "load_entries",
          "_process_categories",
          "_process_subcategories",
          "_process_batches",
          "build_index_from_logs",
          "rebuild"
        ]
      }
    },
    "missing_tests": [
      {
        "class": "SummaryIndexer",
        "method": "__init__"
      },
      {
        "class": "SummaryIndexer",
        "method": "load_entries"
      },
      {
        "class": "SummaryIndexer",
        "method": "_process_categories"
      },
      {
        "class": "SummaryIndexer",
        "method": "_process_subcategories"
      },
      {
        "class": "SummaryIndexer",
        "method": "_process_batches"
      },
      {
        "class": "SummaryIndexer",
        "method": "build_index_from_logs"
      },
      {
        "class": "SummaryIndexer",
        "method": "rebuild"
      }
    ],
    "complexity": {
      "__init__": {
        "complexity": 4,
        "coverage": 0.045454545454545456,
        "hits": 1,
        "lines": 22
      },
      "load_entries": {
        "complexity": 9,
        "coverage": 0.5357142857142857,
        "hits": 15,
        "lines": 28
      },
      "_process_categories": {
        "complexity": 4,
        "coverage": 0.18518518518518517,
        "hits": 5,
        "lines": 27
      },
      "_process_subcategories": {
        "complexity": 4,
        "coverage": 0.15151515151515152,
        "hits": 5,
        "lines": 33
      },
      "_process_batches": {
        "complexity": 6,
        "coverage": 0.1509433962264151,
        "hits": 8,
        "lines": 53
      },
      "build_index_from_logs": {
        "complexity": 5,
        "coverage": 0.47368421052631576,
        "hits": 9,
        "lines": 19
      },
      "rebuild": {
        "complexity": 2,
        "coverage": 0.75,
        "hits": 6,
        "lines": 8
      }
    },
    "quality": {
      "flake8": {
        "issues": [
          {
            "line": 3,
            "column": 1,
            "code": "F401",
            "message": "'pathlib.Path' imported but unused"
          },
          {
            "line": 103,
            "column": 101,
            "code": "E501",
            "message": "line too long (102 > 100 characters)"
          }
        ]
      },
      "mypy": {
        "errors": [
          "scripts/indexers/summary_indexer.py:60: error: Need type annotation for \"texts\" (hint: \"texts: list[<type>] = ...\")  [var-annotated]",
          "scripts/indexers/summary_indexer.py:60: error: Need type annotation for \"meta\" (hint: \"meta: list[<type>] = ...\")  [var-annotated]",
          "scripts/indexers/summary_indexer.py:205: error: Function is missing a return type annotation  [no-untyped-def]"
        ]
      },
      "pydocstyle": {
        "issues": [
          "scripts/indexers/summary_indexer.py:1 at module level:",
          "scripts/indexers/summary_indexer.py:13 in public class `SummaryIndexer`:",
          "scripts/indexers/summary_indexer.py:18 in public method `__init__`:",
          "scripts/indexers/summary_indexer.py:41 in public method `load_entries`:",
          "scripts/indexers/summary_indexer.py:186 in public method `build_index_from_logs`:",
          "scripts/indexers/summary_indexer.py:186 in public method `build_index_from_logs`:",
          "scripts/indexers/summary_indexer.py:205 in public method `rebuild`:"
        ]
      }
    }
  },
  "indexers/__init__.py": {
    "method_diff": {},
    "missing_tests": [],
    "complexity": {},
    "quality": {
      "pydocstyle": {
        "issues": [
          "scripts/indexers/__init__.py:1 at module level:"
        ]
      }
    }
  },
  "refactor/coverage_parser.py": {
    "method_diff": {},
    "missing_tests": [],
    "complexity": {
      "parse_coverage_xml_to_method_hits": {
        "complexity": 18,
        "coverage": 0.29,
        "hits": 29,
        "lines": 100
      }
    },
    "quality": {
      "flake8": {
        "issues": [
          {
            "line": 41,
            "column": 5,
            "code": "E303",
            "message": "too many blank lines (2)"
          },
          {
            "line": 52,
            "column": 5,
            "code": "E303",
            "message": "too many blank lines (4)"
          }
        ]
      },
      "black": {
        "needs_formatting": true
      },
      "pydocstyle": {
        "issues": [
          "scripts/refactor/coverage_parser.py:1 at module level:",
          "scripts/refactor/coverage_parser.py:13 in public function `parse_coverage_xml_to_method_hits`:"
        ]
      }
    }
  },
  "refactor/refactor_guard.py": {
    "method_diff": {
      "AnalysisError": {
        "missing": [],
        "added": []
      },
      "RefactorGuard": {
        "missing": [],
        "added": [
          "__init__",
          "analyze_tests",
          "analyze_module",
          "attach_coverage_hits",
          "analyze_directory_recursive"
        ]
      }
    },
    "missing_tests": [
      {
        "class": "RefactorGuard",
        "method": "__init__"
      },
      {
        "class": "RefactorGuard",
        "method": "analyze_tests"
      },
      {
        "class": "RefactorGuard",
        "method": "analyze_module"
      },
      {
        "class": "RefactorGuard",
        "method": "attach_coverage_hits"
      },
      {
        "class": "RefactorGuard",
        "method": "analyze_directory_recursive"
      }
    ],
    "complexity": {
      "__init__": {
        "complexity": 2,
        "coverage": 0.375,
        "hits": 3,
        "lines": 8
      },
      "analyze_tests": {
        "complexity": 14,
        "coverage": 0.6,
        "hits": 24,
        "lines": 40
      },
      "analyze_module": {
        "complexity": 21,
        "coverage": 0.3473684210526316,
        "hits": 33,
        "lines": 95
      },
      "attach_coverage_hits": {
        "complexity": 2,
        "coverage": 0.75,
        "hits": 3,
        "lines": 4
      },
      "analyze_directory_recursive": {
        "complexity": 14,
        "coverage": 0.5686274509803921,
        "hits": 29,
        "lines": 51
      }
    },
    "quality": {
      "flake8": {
        "issues": [
          {
            "line": 89,
            "column": 101,
            "code": "E501",
            "message": "line too long (107 > 100 characters)"
          },
          {
            "line": 94,
            "column": 18,
            "code": "E221",
            "message": "multiple spaces before operator"
          },
          {
            "line": 185,
            "column": 20,
            "code": "E221",
            "message": "multiple spaces before operator"
          },
          {
            "line": 202,
            "column": 20,
            "code": "E221",
            "message": "multiple spaces before operator"
          }
        ]
      },
      "black": {
        "needs_formatting": true
      },
      "pydocstyle": {
        "issues": [
          "scripts/refactor/refactor_guard.py:1 at module level:",
          "scripts/refactor/refactor_guard.py:16 in public class `AnalysisError`:",
          "scripts/refactor/refactor_guard.py:20 in public class `RefactorGuard`:",
          "scripts/refactor/refactor_guard.py:21 in public method `__init__`:",
          "scripts/refactor/refactor_guard.py:35 in public method `analyze_tests`:",
          "scripts/refactor/refactor_guard.py:77 in public method `analyze_module`:",
          "scripts/refactor/refactor_guard.py:77 in public method `analyze_module`:",
          "scripts/refactor/refactor_guard.py:178 in public method `analyze_directory_recursive`:",
          "scripts/refactor/refactor_guard.py:178 in public method `analyze_directory_recursive`:"
        ]
      }
    }
  },
  "refactor/refactor_guard_cli.py": {
    "method_diff": {},
    "missing_tests": [],
    "complexity": {
      "safe_collect_method_ranges": {
        "complexity": 8,
        "coverage": 0.8,
        "hits": 12,
        "lines": 15
      },
      "handle_json_output": {
        "complexity": 5,
        "coverage": 1.0,
        "hits": 9,
        "lines": 9
      },
      "print_method_stats": {
        "complexity": 5,
        "coverage": 0.631578947368421,
        "hits": 12,
        "lines": 19
      },
      "print_summary": {
        "complexity": 3,
        "coverage": 0.8333333333333334,
        "hits": 5,
        "lines": 6
      },
      "parse_args": {
        "complexity": 1,
        "coverage": 1.0,
        "hits": 12,
        "lines": 12
      },
      "dispatch_mode": {
        "complexity": 2,
        "coverage": 1.0,
        "hits": 4,
        "lines": 4
      },
      "handle_full_scan": {
        "complexity": 6,
        "coverage": 1.0,
        "hits": 12,
        "lines": 12
      },
      "handle_single_file": {
        "complexity": 3,
        "coverage": 0.6666666666666666,
        "hits": 6,
        "lines": 9
      },
      "handle_output": {
        "complexity": 11,
        "coverage": 0.7692307692307693,
        "hits": 20,
        "lines": 26
      },
      "main": {
        "complexity": 7,
        "coverage": 0.6538461538461539,
        "hits": 17,
        "lines": 26
      }
    },
    "quality": {
      "flake8": {
        "issues": [
          {
            "line": 20,
            "column": 1,
            "code": "E402",
            "message": "module level import not at top of file"
          },
          {
            "line": 21,
            "column": 1,
            "code": "E402",
            "message": "module level import not at top of file"
          },
          {
            "line": 22,
            "column": 1,
            "code": "E402",
            "message": "module level import not at top of file"
          },
          {
            "line": 23,
            "column": 1,
            "code": "E402",
            "message": "module level import not at top of file"
          },
          {
            "line": 69,
            "column": 101,
            "code": "E501",
            "message": "line too long (115 > 100 characters)"
          },
          {
            "line": 85,
            "column": 33,
            "code": "E241",
            "message": "multiple spaces after ','"
          },
          {
            "line": 87,
            "column": 30,
            "code": "E241",
            "message": "multiple spaces after ','"
          },
          {
            "line": 87,
            "column": 101,
            "code": "E501",
            "message": "line too long (105 > 100 characters)"
          },
          {
            "line": 88,
            "column": 28,
            "code": "E241",
            "message": "multiple spaces after ','"
          },
          {
            "line": 89,
            "column": 34,
            "code": "E241",
            "message": "multiple spaces after ','"
          },
          {
            "line": 92,
            "column": 29,
            "code": "E241",
            "message": "multiple spaces after ','"
          },
          {
            "line": 93,
            "column": 33,
            "code": "E241",
            "message": "multiple spaces after ','"
          },
          {
            "line": 104,
            "column": 13,
            "code": "E221",
            "message": "multiple spaces before operator"
          },
          {
            "line": 119,
            "column": 101,
            "code": "E501",
            "message": "line too long (102 > 100 characters)"
          },
          {
            "line": 121,
            "column": 101,
            "code": "E501",
            "message": "line too long (106 > 100 characters)"
          }
        ]
      },
      "black": {
        "needs_formatting": true
      },
      "mypy": {
        "errors": [
          "scripts/refactor/refactor_guard_cli.py:43: error: Function is missing a type annotation  [no-untyped-def]",
          "scripts/refactor/refactor_guard_cli.py:54: error: Function is missing a type annotation  [no-untyped-def]",
          "scripts/refactor/refactor_guard_cli.py:75: error: Function is missing a type annotation  [no-untyped-def]",
          "scripts/refactor/refactor_guard_cli.py:83: error: Function is missing a return type annotation  [no-untyped-def]",
          "scripts/refactor/refactor_guard_cli.py:97: error: Function is missing a type annotation  [no-untyped-def]",
          "scripts/refactor/refactor_guard_cli.py:103: error: Function is missing a type annotation  [no-untyped-def]",
          "scripts/refactor/refactor_guard_cli.py:117: error: Function is missing a type annotation  [no-untyped-def]",
          "scripts/refactor/refactor_guard_cli.py:128: error: Function is missing a type annotation  [no-untyped-def]",
          "scripts/refactor/refactor_guard_cli.py:156: error: Function is missing a return type annotation  [no-untyped-def]"
        ]
      },
      "pydocstyle": {
        "issues": [
          "scripts/refactor/refactor_guard_cli.py:1 at module level:",
          "scripts/refactor/refactor_guard_cli.py:43 in public function `handle_json_output`:",
          "scripts/refactor/refactor_guard_cli.py:83 in public function `parse_args`:",
          "scripts/refactor/refactor_guard_cli.py:97 in public function `dispatch_mode`:",
          "scripts/refactor/refactor_guard_cli.py:103 in public function `handle_full_scan`:",
          "scripts/refactor/refactor_guard_cli.py:117 in public function `handle_single_file`:",
          "scripts/refactor/refactor_guard_cli.py:128 in public function `handle_output`:",
          "scripts/refactor/refactor_guard_cli.py:156 in public function `main`:"
        ]
      }
    }
  },
  "refactor/method_line_ranges.py": {
    "method_diff": {
      "MethodRangeVisitor": {
        "missing": [],
        "added": [
          "__init__",
          "visit_ClassDef",
          "visit_FunctionDef",
          "visit_AsyncFunctionDef",
          "_record_range"
        ]
      }
    },
    "missing_tests": [
      {
        "class": "MethodRangeVisitor",
        "method": "__init__"
      },
      {
        "class": "MethodRangeVisitor",
        "method": "visit_ClassDef"
      },
      {
        "class": "MethodRangeVisitor",
        "method": "visit_FunctionDef"
      },
      {
        "class": "MethodRangeVisitor",
        "method": "visit_AsyncFunctionDef"
      },
      {
        "class": "MethodRangeVisitor",
        "method": "_record_range"
      }
    ],
    "complexity": {
      "__init__": {
        "complexity": 1,
        "coverage": 1.0,
        "hits": 3,
        "lines": 3
      },
      "visit_ClassDef": {
        "complexity": 5,
        "coverage": 0.6666666666666666,
        "hits": 10,
        "lines": 15
      },
      "visit_FunctionDef": {
        "complexity": 1,
        "coverage": 1.0,
        "hits": 2,
        "lines": 2
      },
      "visit_AsyncFunctionDef": {
        "complexity": 1,
        "coverage": 1.0,
        "hits": 2,
        "lines": 2
      },
      "_record_range": {
        "complexity": 5,
        "coverage": 0.6153846153846154,
        "hits": 8,
        "lines": 13
      },
      "extract_method_line_ranges": {
        "complexity": 2,
        "coverage": 0.3181818181818182,
        "hits": 7,
        "lines": 22
      }
    },
    "quality": {
      "pydocstyle": {
        "issues": [
          "scripts/refactor/method_line_ranges.py:1 at module level:",
          "scripts/refactor/method_line_ranges.py:6 in public class `MethodRangeVisitor`:",
          "scripts/refactor/method_line_ranges.py:6 in public class `MethodRangeVisitor`:",
          "scripts/refactor/method_line_ranges.py:12 in public method `__init__`:",
          "scripts/refactor/method_line_ranges.py:16 in public method `visit_ClassDef`:",
          "scripts/refactor/method_line_ranges.py:32 in public method `visit_FunctionDef`:",
          "scripts/refactor/method_line_ranges.py:35 in public method `visit_AsyncFunctionDef`:",
          "scripts/refactor/method_line_ranges.py:54 in public function `extract_method_line_ranges`:",
          "scripts/refactor/method_line_ranges.py:54 in public function `extract_method_line_ranges`:"
        ]
      }
    }
  },
  "refactor/__init__.py": {
    "method_diff": {},
    "missing_tests": [],
    "complexity": {},
    "quality": {
      "pydocstyle": {
        "issues": [
          "scripts/refactor/__init__.py:1 at module level:"
        ]
      }
    }
  },
  "refactor/complexity_analyzer.py": {
    "method_diff": {
      "ComplexityVisitor": {
        "missing": [],
        "added": [
          "__init__",
          "visit_ClassDef",
          "visit_FunctionDef",
          "visit_AsyncFunctionDef",
          "_compute_and_record",
          "get_scores"
        ]
      }
    },
    "missing_tests": [
      {
        "class": "ComplexityVisitor",
        "method": "__init__"
      },
      {
        "class": "ComplexityVisitor",
        "method": "visit_ClassDef"
      },
      {
        "class": "ComplexityVisitor",
        "method": "visit_FunctionDef"
      },
      {
        "class": "ComplexityVisitor",
        "method": "visit_AsyncFunctionDef"
      },
      {
        "class": "ComplexityVisitor",
        "method": "_compute_and_record"
      },
      {
        "class": "ComplexityVisitor",
        "method": "get_scores"
      }
    ],
    "complexity": {
      "__init__": {
        "complexity": 1,
        "coverage": 1.0,
        "hits": 3,
        "lines": 3
      },
      "visit_ClassDef": {
        "complexity": 5,
        "coverage": 0.8333333333333334,
        "hits": 10,
        "lines": 12
      },
      "visit_FunctionDef": {
        "complexity": 1,
        "coverage": 1.0,
        "hits": 2,
        "lines": 2
      },
      "visit_AsyncFunctionDef": {
        "complexity": 1,
        "coverage": 1.0,
        "hits": 2,
        "lines": 2
      },
      "_compute_and_record": {
        "complexity": 1,
        "coverage": 0.7,
        "hits": 14,
        "lines": 20
      },
      "get_scores": {
        "complexity": 1,
        "coverage": 0.4,
        "hits": 2,
        "lines": 5
      },
      "calculate_function_complexity_map": {
        "complexity": 4,
        "coverage": 0.6111111111111112,
        "hits": 11,
        "lines": 18
      },
      "calculate_module_complexity": {
        "complexity": 4,
        "coverage": 0.5555555555555556,
        "hits": 10,
        "lines": 18
      },
      "calculate_cyclomatic_complexity_for_module": {
        "complexity": 1,
        "coverage": 0.23076923076923078,
        "hits": 3,
        "lines": 13
      }
    },
    "quality": {
      "flake8": {
        "issues": [
          {
            "line": 133,
            "column": 1,
            "code": "E303",
            "message": "too many blank lines (3)"
          }
        ]
      },
      "black": {
        "needs_formatting": true
      },
      "mypy": {
        "errors": [
          "scripts/refactor/complexity_analyzer.py:62: error: Argument 1 to \"visit_FunctionDef\" of \"ComplexityVisitor\" has incompatible type \"AsyncFunctionDef\"; expected \"FunctionDef\"  [arg-type]"
        ]
      },
      "pydocstyle": {
        "issues": [
          "scripts/refactor/complexity_analyzer.py:1 at module level:",
          "scripts/refactor/complexity_analyzer.py:35 in public class `ComplexityVisitor`:",
          "scripts/refactor/complexity_analyzer.py:35 in public class `ComplexityVisitor`:",
          "scripts/refactor/complexity_analyzer.py:41 in public method `__init__`:",
          "scripts/refactor/complexity_analyzer.py:45 in public method `visit_ClassDef`:",
          "scripts/refactor/complexity_analyzer.py:58 in public method `visit_FunctionDef`:",
          "scripts/refactor/complexity_analyzer.py:61 in public method `visit_AsyncFunctionDef`:",
          "scripts/refactor/complexity_analyzer.py:65 in private method `_compute_and_record`:",
          "scripts/refactor/complexity_analyzer.py:86 in public method `get_scores`:",
          "scripts/refactor/complexity_analyzer.py:93 in public function `calculate_function_complexity_map`:",
          "scripts/refactor/complexity_analyzer.py:93 in public function `calculate_function_complexity_map`:",
          "scripts/refactor/complexity_analyzer.py:134 in public function `calculate_cyclomatic_complexity_for_module`:"
        ]
      }
    }
  },
  "refactor/quality_checker.py": {
    "method_diff": {},
    "missing_tests": [],
    "complexity": {
      "_normalize": {
        "complexity": 3,
        "coverage": 0.625,
        "hits": 5,
        "lines": 8
      },
      "run_command": {
        "complexity": 2,
        "coverage": 0.45454545454545453,
        "hits": 5,
        "lines": 11
      },
      "run_black": {
        "complexity": 1,
        "coverage": 0.3333333333333333,
        "hits": 1,
        "lines": 3
      },
      "run_flake8": {
        "complexity": 1,
        "coverage": 0.6666666666666666,
        "hits": 2,
        "lines": 3
      },
      "run_mypy": {
        "complexity": 1,
        "coverage": 0.3333333333333333,
        "hits": 1,
        "lines": 3
      },
      "run_pydocstyle": {
        "complexity": 1,
        "coverage": 0.6666666666666666,
        "hits": 2,
        "lines": 3
      },
      "run_coverage_xml": {
        "complexity": 1,
        "coverage": 0.6666666666666666,
        "hits": 2,
        "lines": 3
      },
      "_read_report": {
        "complexity": 1,
        "coverage": 0.6666666666666666,
        "hits": 2,
        "lines": 3
      },
      "_add_flake8_quality": {
        "complexity": 3,
        "coverage": 0.625,
        "hits": 10,
        "lines": 16
      },
      "_add_black_quality": {
        "complexity": 3,
        "coverage": 0.8888888888888888,
        "hits": 8,
        "lines": 9
      },
      "_add_mypy_quality": {
        "complexity": 4,
        "coverage": 1.0,
        "hits": 8,
        "lines": 8
      },
      "_add_pydocstyle_quality": {
        "complexity": 3,
        "coverage": 0.8888888888888888,
        "hits": 8,
        "lines": 9
      },
      "_add_coverage_quality": {
        "complexity": 6,
        "coverage": 0.4444444444444444,
        "hits": 12,
        "lines": 27
      },
      "merge_into_refactor_guard": {
        "complexity": 5,
        "coverage": 0.5357142857142857,
        "hits": 15,
        "lines": 28
      }
    },
    "quality": {
      "flake8": {
        "issues": [
          {
            "line": 104,
            "column": 9,
            "code": "E741",
            "message": "ambiguous variable name 'l'"
          },
          {
            "line": 130,
            "column": 5,
            "code": "F841",
            "message": "local variable 'raw' is assigned to but never used"
          },
          {
            "line": 145,
            "column": 9,
            "code": "F841",
            "message": "local variable 'entry' is assigned to but never used"
          }
        ]
      },
      "black": {
        "needs_formatting": true
      },
      "pydocstyle": {
        "issues": [
          "scripts/refactor/quality_checker.py:1 at module level:",
          "scripts/refactor/quality_checker.py:21 in private function `_normalize`:",
          "scripts/refactor/quality_checker.py:34 in public function `run_command`:",
          "scripts/refactor/quality_checker.py:124 in private function `_add_coverage_quality`:",
          "scripts/refactor/quality_checker.py:153 in public function `merge_into_refactor_guard`:"
        ]
      }
    }
  },
  "refactor/ast_extractor.py": {
    "method_diff": {
      "ClassMethodInfo": {
        "missing": [],
        "added": [
          "__init__",
          "add_method",
          "__repr__"
        ]
      },
      "ClassMethodExtractor": {
        "missing": [],
        "added": [
          "__init__",
          "visit_ClassDef",
          "generic_visit"
        ]
      }
    },
    "missing_tests": [
      {
        "class": "ClassMethodInfo",
        "method": "__init__"
      },
      {
        "class": "ClassMethodInfo",
        "method": "add_method"
      },
      {
        "class": "ClassMethodInfo",
        "method": "__repr__"
      },
      {
        "class": "ClassMethodExtractor",
        "method": "__init__"
      },
      {
        "class": "ClassMethodExtractor",
        "method": "visit_ClassDef"
      },
      {
        "class": "ClassMethodExtractor",
        "method": "generic_visit"
      }
    ],
    "complexity": {
      "__init__": {
        "complexity": 1,
        "coverage": 1.0,
        "hits": 3,
        "lines": 3
      },
      "add_method": {
        "complexity": 1,
        "coverage": 0.6666666666666666,
        "hits": 2,
        "lines": 3
      },
      "__repr__": {
        "complexity": 1,
        "coverage": 0.5,
        "hits": 1,
        "lines": 2
      },
      "extract_class_methods": {
        "complexity": 2,
        "coverage": 0.5319148936170213,
        "hits": 25,
        "lines": 47
      },
      "compare_class_methods": {
        "complexity": 1,
        "coverage": 0.3333333333333333,
        "hits": 6,
        "lines": 18
      }
    },
    "quality": {
      "flake8": {
        "issues": [
          {
            "line": 33,
            "column": 101,
            "code": "E501",
            "message": "line too long (105 > 100 characters)"
          }
        ]
      },
      "black": {
        "needs_formatting": true
      },
      "mypy": {
        "errors": [
          "scripts/refactor/ast_extractor.py:43: error: Function is missing a return type annotation  [no-untyped-def]"
        ]
      },
      "pydocstyle": {
        "issues": [
          "scripts/refactor/ast_extractor.py:1 at module level:",
          "scripts/refactor/ast_extractor.py:6 in public class `ClassMethodInfo`:",
          "scripts/refactor/ast_extractor.py:13 in public method `__init__`:",
          "scripts/refactor/ast_extractor.py:21 in public method `__repr__`:",
          "scripts/refactor/ast_extractor.py:26 in public function `extract_class_methods`:",
          "scripts/refactor/ast_extractor.py:78 in public function `compare_class_methods`:",
          "scripts/refactor/ast_extractor.py:78 in public function `compare_class_methods`:"
        ]
      }
    }
  },
  "ci_analyzer/ci_analyzer_cli.py": {
    "method_diff": {},
    "missing_tests": [],
    "complexity": {},
    "quality": {
      "flake8": {
        "issues": [
          {
            "line": 7,
            "column": 1,
            "code": "E402",
            "message": "module level import not at top of file"
          },
          {
            "line": 8,
            "column": 1,
            "code": "E402",
            "message": "module level import not at top of file"
          },
          {
            "line": 9,
            "column": 1,
            "code": "E402",
            "message": "module level import not at top of file"
          }
        ]
      },
      "black": {
        "needs_formatting": true
      },
      "mypy": {
        "errors": [
          "scripts/ci_analyzer/ci_analyzer_cli.py:32: error: Missing positional argument \"path\" in call to \"parse\" of \"ArtifactParser\"  [call-arg]"
        ]
      },
      "pydocstyle": {
        "issues": [
          "scripts/ci_analyzer/ci_analyzer_cli.py:1 at module level:"
        ]
      }
    }
  },
  "ci_analyzer/refactor_parser.py": {
    "method_diff": {
      "RefactorParser": {
        "missing": [],
        "added": [
          "__init__",
          "parse"
        ]
      }
    },
    "missing_tests": [
      {
        "class": "RefactorParser",
        "method": "__init__"
      },
      {
        "class": "RefactorParser",
        "method": "parse"
      }
    ],
    "complexity": {
      "__init__": {
        "complexity": 1,
        "coverage": 1.0,
        "hits": 2,
        "lines": 2
      },
      "parse": {
        "complexity": 5,
        "coverage": 0.3076923076923077,
        "hits": 8,
        "lines": 26
      }
    },
    "quality": {
      "flake8": {
        "issues": [
          {
            "line": 7,
            "column": 1,
            "code": "E302",
            "message": "expected 2 blank lines, found 1"
          }
        ]
      },
      "black": {
        "needs_formatting": true
      },
      "mypy": {
        "errors": [
          "scripts/ci_analyzer/refactor_parser.py:8: error: Incompatible default for argument \"path\" (default has type \"None\", argument has type \"str\")  [assignment]",
          "scripts/ci_analyzer/refactor_parser.py:11: error: Incompatible default for argument \"path\" (default has type \"None\", argument has type \"str\")  [assignment]"
        ]
      },
      "pydocstyle": {
        "issues": [
          "scripts/ci_analyzer/refactor_parser.py:1 at module level:",
          "scripts/ci_analyzer/refactor_parser.py:7 in public class `RefactorParser`:",
          "scripts/ci_analyzer/refactor_parser.py:8 in public method `__init__`:",
          "scripts/ci_analyzer/refactor_parser.py:12 in public method `parse`:"
        ]
      }
    }
  },
  "ci_analyzer/analyzer.py": {
    "method_diff": {
      "CIInsightReport": {
        "missing": [],
        "added": [
          "__init__",
          "add_insight",
          "generate_summary",
          "save"
        ]
      }
    },
    "missing_tests": [
      {
        "class": "CIInsightReport",
        "method": "__init__"
      },
      {
        "class": "CIInsightReport",
        "method": "add_insight"
      },
      {
        "class": "CIInsightReport",
        "method": "generate_summary"
      },
      {
        "class": "CIInsightReport",
        "method": "save"
      }
    ],
    "complexity": {
      "__init__": {
        "complexity": 1,
        "coverage": 0.0,
        "hits": 0,
        "lines": 2
      },
      "add_insight": {
        "complexity": 1,
        "coverage": 0.0,
        "hits": 0,
        "lines": 2
      },
      "generate_summary": {
        "complexity": 10,
        "coverage": 0.0,
        "hits": 0,
        "lines": 46
      },
      "save": {
        "complexity": 2,
        "coverage": 0.0,
        "hits": 0,
        "lines": 7
      }
    },
    "quality": {
      "flake8": {
        "issues": [
          {
            "line": 1,
            "column": 1,
            "code": "F401",
            "message": "'.refactor_parser.RefactorParser' imported but unused"
          },
          {
            "line": 2,
            "column": 1,
            "code": "F401",
            "message": "'.lint_parser.LintParser' imported but unused"
          }
        ]
      },
      "black": {
        "needs_formatting": true
      },
      "mypy": {
        "errors": [
          "scripts/ci_analyzer/analyzer.py:6: error: Function is missing a return type annotation  [no-untyped-def]",
          "scripts/ci_analyzer/analyzer.py:9: error: Function is missing a return type annotation  [no-untyped-def]",
          "scripts/ci_analyzer/analyzer.py:59: error: Function is missing a return type annotation  [no-untyped-def]"
        ]
      },
      "pydocstyle": {
        "issues": [
          "scripts/ci_analyzer/analyzer.py:1 at module level:",
          "scripts/ci_analyzer/analyzer.py:5 in public class `CIInsightReport`:",
          "scripts/ci_analyzer/analyzer.py:6 in public method `__init__`:",
          "scripts/ci_analyzer/analyzer.py:9 in public method `add_insight`:",
          "scripts/ci_analyzer/analyzer.py:12 in public method `generate_summary`:",
          "scripts/ci_analyzer/analyzer.py:60 in public method `save`:",
          "scripts/ci_analyzer/analyzer.py:60 in public method `save`:"
        ]
      }
    }
  },
  "ci_analyzer/lint_parser.py": {
    "method_diff": {
      "LintParser": {
        "missing": [],
        "added": [
          "__init__",
          "parse"
        ]
      }
    },
    "missing_tests": [
      {
        "class": "LintParser",
        "method": "__init__"
      },
      {
        "class": "LintParser",
        "method": "parse"
      }
    ],
    "complexity": {
      "__init__": {
        "complexity": 1,
        "coverage": 1.0,
        "hits": 2,
        "lines": 2
      },
      "parse": {
        "complexity": 4,
        "coverage": 0.24,
        "hits": 6,
        "lines": 25
      }
    },
    "quality": {
      "flake8": {
        "issues": [
          {
            "line": 3,
            "column": 1,
            "code": "F401",
            "message": "'re' imported but unused"
          },
          {
            "line": 7,
            "column": 1,
            "code": "E302",
            "message": "expected 2 blank lines, found 1"
          }
        ]
      },
      "black": {
        "needs_formatting": true
      },
      "mypy": {
        "errors": [
          "scripts/ci_analyzer/lint_parser.py:8: error: Incompatible default for argument \"path\" (default has type \"None\", argument has type \"str\")  [assignment]",
          "scripts/ci_analyzer/lint_parser.py:11: error: Incompatible default for argument \"path\" (default has type \"None\", argument has type \"str\")  [assignment]"
        ]
      },
      "pydocstyle": {
        "issues": [
          "scripts/ci_analyzer/lint_parser.py:1 at module level:",
          "scripts/ci_analyzer/lint_parser.py:7 in public class `LintParser`:",
          "scripts/ci_analyzer/lint_parser.py:8 in public method `__init__`:",
          "scripts/ci_analyzer/lint_parser.py:12 in public method `parse`:"
        ]
      }
    }
  },
  "ci_analyzer/artifact_base.py": {
    "method_diff": {
      "ArtifactParser": {
        "missing": [],
        "added": [
          "parse"
        ]
      }
    },
    "missing_tests": [
      {
        "class": "ArtifactParser",
        "method": "parse"
      }
    ],
    "complexity": {
      "parse": {
        "complexity": 1,
        "coverage": 0.16666666666666666,
        "hits": 1,
        "lines": 6
      }
    },
    "quality": {
      "flake8": {
        "issues": [
          {
            "line": 5,
            "column": 1,
            "code": "E302",
            "message": "expected 2 blank lines, found 1"
          }
        ]
      },
      "black": {
        "needs_formatting": true
      },
      "pydocstyle": {
        "issues": [
          "scripts/ci_analyzer/artifact_base.py:1 at module level:",
          "scripts/ci_analyzer/artifact_base.py:5 in public class `ArtifactParser`:",
          "scripts/ci_analyzer/artifact_base.py:8 in public method `parse`:"
        ]
      }
    }
  },
  "ci_analyzer/__init__.py": {
    "method_diff": {},
    "missing_tests": [],
    "complexity": {},
    "quality": {
      "pydocstyle": {
        "issues": [
          "scripts/ci_analyzer/__init__.py:1 at module level:"
        ]
      }
    }
  },
  "utils/complexity_summary.py": {
    "method_diff": {},
    "missing_tests": [],
    "complexity": {
      "analyze_complexity": {
        "complexity": 8,
        "coverage": 0.375,
        "hits": 9,
        "lines": 24
      },
      "run_analysis": {
        "complexity": 10,
        "coverage": 0.5675675675675675,
        "hits": 21,
        "lines": 37
      }
    },
    "quality": {
      "flake8": {
        "issues": [
          {
            "line": 52,
            "column": 15,
            "code": "F541",
            "message": "f-string is missing placeholders"
          }
        ]
      },
      "mypy": {
        "errors": [
          "scripts/utils/complexity_summary.py:7: error: Item \"TextIO\" of \"TextIO | Any\" has no attribute \"reconfigure\"  [union-attr]",
          "scripts/utils/complexity_summary.py:12: error: Function is missing a type annotation  [no-untyped-def]",
          "scripts/utils/complexity_summary.py:38: error: Function is missing a type annotation  [no-untyped-def]"
        ]
      },
      "pydocstyle": {
        "issues": [
          "scripts/utils/complexity_summary.py:1 at module level:",
          "scripts/utils/complexity_summary.py:12 in public function `analyze_complexity`:",
          "scripts/utils/complexity_summary.py:38 in public function `run_analysis`:"
        ]
      }
    }
  },
  "utils/file_utils.py": {
    "method_diff": {},
    "missing_tests": [],
    "complexity": {
      "sanitize_filename": {
        "complexity": 1,
        "coverage": 0.4,
        "hits": 2,
        "lines": 5
      },
      "get_timestamp": {
        "complexity": 1,
        "coverage": 0.4,
        "hits": 2,
        "lines": 5
      },
      "safe_path": {
        "complexity": 1,
        "coverage": 0.5,
        "hits": 3,
        "lines": 6
      },
      "write_json": {
        "complexity": 7,
        "coverage": 0.47619047619047616,
        "hits": 10,
        "lines": 21
      },
      "read_json": {
        "complexity": 4,
        "coverage": 0.7,
        "hits": 7,
        "lines": 10
      },
      "safe_read_json": {
        "complexity": 5,
        "coverage": 0.38095238095238093,
        "hits": 8,
        "lines": 21
      },
      "make_backup": {
        "complexity": 5,
        "coverage": 0.35714285714285715,
        "hits": 10,
        "lines": 28
      },
      "zip_python_files": {
        "complexity": 9,
        "coverage": 0.19047619047619047,
        "hits": 4,
        "lines": 21
      }
    },
    "quality": {
      "flake8": {
        "issues": [
          {
            "line": 105,
            "column": 101,
            "code": "E501",
            "message": "line too long (122 > 100 characters)"
          }
        ]
      },
      "mypy": {
        "errors": [
          "scripts/utils/file_utils.py:14: error: Function is missing a type annotation  [no-untyped-def]",
          "scripts/utils/file_utils.py:21: error: Function is missing a return type annotation  [no-untyped-def]",
          "scripts/utils/file_utils.py:28: error: Function is missing a type annotation  [no-untyped-def]",
          "scripts/utils/file_utils.py:36: error: Function is missing a type annotation  [no-untyped-def]",
          "scripts/utils/file_utils.py:59: error: Function is missing a type annotation  [no-untyped-def]",
          "scripts/utils/file_utils.py:108: error: Incompatible return value type (got \"None\", expected \"str\")  [return-value]",
          "scripts/utils/file_utils.py:121: error: Incompatible return value type (got \"None\", expected \"str\")  [return-value]",
          "scripts/utils/file_utils.py:124: error: Function is missing a return type annotation  [no-untyped-def]",
          "scripts/utils/file_utils.py:124: error: Function is missing a type annotation for one or more arguments  [no-untyped-def]"
        ]
      },
      "pydocstyle": {
        "issues": [
          "scripts/utils/file_utils.py:1 at module level:",
          "scripts/utils/file_utils.py:15 in public function `sanitize_filename`:",
          "scripts/utils/file_utils.py:22 in public function `get_timestamp`:",
          "scripts/utils/file_utils.py:29 in public function `safe_path`:",
          "scripts/utils/file_utils.py:37 in public function `write_json`:",
          "scripts/utils/file_utils.py:60 in public function `read_json`:",
          "scripts/utils/file_utils.py:72 in public function `safe_read_json`:",
          "scripts/utils/file_utils.py:72 in public function `safe_read_json`:",
          "scripts/utils/file_utils.py:95 in public function `make_backup`:",
          "scripts/utils/file_utils.py:125 in public function `zip_python_files`:",
          "scripts/utils/file_utils.py:125 in public function `zip_python_files`:"
        ]
      }
    }
  },
  "utils/link_summaries_to_raw_logs.py": {
    "method_diff": {},
    "missing_tests": [],
    "complexity": {
      "flatten_raw_entries": {
        "complexity": 4,
        "coverage": 0.391304347826087,
        "hits": 9,
        "lines": 23
      },
      "inject_entries_into_summaries": {
        "complexity": 14,
        "coverage": 0.4576271186440678,
        "hits": 27,
        "lines": 59
      }
    },
    "quality": {
      "flake8": {
        "issues": [
          {
            "line": 19,
            "column": 101,
            "code": "E501",
            "message": "line too long (107 > 100 characters)"
          },
          {
            "line": 35,
            "column": 101,
            "code": "E501",
            "message": "line too long (103 > 100 characters)"
          }
        ]
      },
      "mypy": {
        "errors": [
          "scripts/utils/link_summaries_to_raw_logs.py:8: error: Function is missing a type annotation  [no-untyped-def]",
          "scripts/utils/link_summaries_to_raw_logs.py:33: error: Function is missing a return type annotation  [no-untyped-def]"
        ]
      },
      "pydocstyle": {
        "issues": [
          "scripts/utils/link_summaries_to_raw_logs.py:1 at module level:",
          "scripts/utils/link_summaries_to_raw_logs.py:9 in public function `flatten_raw_entries`:",
          "scripts/utils/link_summaries_to_raw_logs.py:9 in public function `flatten_raw_entries`:",
          "scripts/utils/link_summaries_to_raw_logs.py:34 in public function `inject_entries_into_summaries`:",
          "scripts/utils/link_summaries_to_raw_logs.py:34 in public function `inject_entries_into_summaries`:"
        ]
      }
    }
  },
  "utils/git_utils.py": {
    "method_diff": {},
    "missing_tests": [],
    "complexity": {
      "get_changed_files": {
        "complexity": 5,
        "coverage": 0.7,
        "hits": 7,
        "lines": 10
      },
      "interactive_commit_flow": {
        "complexity": 2,
        "coverage": 0.045454545454545456,
        "hits": 1,
        "lines": 22
      },
      "get_current_branch": {
        "complexity": 1,
        "coverage": 0.25,
        "hits": 1,
        "lines": 4
      }
    },
    "quality": {
      "mypy": {
        "errors": [
          "scripts/utils/git_utils.py:17: error: Function is missing a type annotation  [no-untyped-def]",
          "scripts/utils/git_utils.py:41: error: Function is missing a return type annotation  [no-untyped-def]"
        ]
      },
      "pydocstyle": {
        "issues": [
          "scripts/utils/git_utils.py:1 at module level:",
          "scripts/utils/git_utils.py:6 in public function `get_changed_files`:",
          "scripts/utils/git_utils.py:17 in public function `interactive_commit_flow`:",
          "scripts/utils/git_utils.py:41 in public function `get_current_branch`:"
        ]
      }
    }
  },
  "utils/__init__.py": {
    "method_diff": {},
    "missing_tests": [],
    "complexity": {},
    "quality": {
      "pydocstyle": {
        "issues": [
          "scripts/utils/__init__.py:1 at module level:"
        ]
      }
    }
  },
  "utils/zip_util.py": {
    "method_diff": {},
    "missing_tests": [],
    "complexity": {
      "main": {
        "complexity": 1,
        "coverage": 0.27586206896551724,
        "hits": 8,
        "lines": 29
      }
    },
    "quality": {
      "mypy": {
        "errors": [
          "scripts/utils/zip_util.py:8: error: Function is missing a return type annotation  [no-untyped-def]"
        ]
      },
      "pydocstyle": {
        "issues": [
          "scripts/utils/zip_util.py:1 at module level:",
          "scripts/utils/zip_util.py:8 in public function `main`:"
        ]
      }
    }
  },
  "utils/gui_helpers.py": {
    "method_diff": {},
    "missing_tests": [],
    "complexity": {
      "validate_log_input": {
        "complexity": 2,
        "coverage": 1.0,
        "hits": 5,
        "lines": 5
      },
      "get_current_date": {
        "complexity": 1,
        "coverage": 1.0,
        "hits": 2,
        "lines": 2
      },
      "get_current_timestamp": {
        "complexity": 1,
        "coverage": 1.0,
        "hits": 2,
        "lines": 2
      },
      "clear_text_input": {
        "complexity": 1,
        "coverage": 0.5,
        "hits": 1,
        "lines": 2
      },
      "update_status_label": {
        "complexity": 1,
        "coverage": 0.5,
        "hits": 1,
        "lines": 2
      },
      "get_selected_option": {
        "complexity": 2,
        "coverage": 1.0,
        "hits": 2,
        "lines": 2
      },
      "append_log_entry": {
        "complexity": 4,
        "coverage": 0.7692307692307693,
        "hits": 10,
        "lines": 13
      },
      "get_category_options": {
        "complexity": 3,
        "coverage": 0.6666666666666666,
        "hits": 4,
        "lines": 6
      },
      "create_status_label": {
        "complexity": 1,
        "coverage": 0.25,
        "hits": 1,
        "lines": 4
      },
      "create_log_frame": {
        "complexity": 1,
        "coverage": 0.14285714285714285,
        "hits": 1,
        "lines": 7
      },
      "log_message": {
        "complexity": 1,
        "coverage": 0.16666666666666666,
        "hits": 1,
        "lines": 6
      },
      "create_dropdown_menu": {
        "complexity": 1,
        "coverage": 0.16666666666666666,
        "hits": 1,
        "lines": 6
      },
      "create_button": {
        "complexity": 1,
        "coverage": 0.5,
        "hits": 1,
        "lines": 2
      },
      "show_messagebox": {
        "complexity": 4,
        "coverage": 0.14285714285714285,
        "hits": 1,
        "lines": 7
      },
      "create_text_entry": {
        "complexity": 1,
        "coverage": 0.06666666666666667,
        "hits": 1,
        "lines": 15
      },
      "format_summary_results": {
        "complexity": 7,
        "coverage": 0.05263157894736842,
        "hits": 1,
        "lines": 19
      },
      "format_raw_results": {
        "complexity": 6,
        "coverage": 0.05555555555555555,
        "hits": 1,
        "lines": 18
      },
      "display_message": {
        "complexity": 1,
        "coverage": 0.2,
        "hits": 1,
        "lines": 5
      },
      "display_error": {
        "complexity": 1,
        "coverage": 0.2,
        "hits": 1,
        "lines": 5
      },
      "format_coverage_data": {
        "complexity": 4,
        "coverage": 0.038461538461538464,
        "hits": 1,
        "lines": 26
      }
    },
    "quality": {
      "flake8": {
        "issues": [
          {
            "line": 196,
            "column": 101,
            "code": "E501",
            "message": "line too long (102 > 100 characters)"
          }
        ]
      },
      "mypy": {
        "errors": [
          "scripts/utils/gui_helpers.py:8: error: Function is missing a type annotation  [no-untyped-def]",
          "scripts/utils/gui_helpers.py:15: error: Function is missing a return type annotation  [no-untyped-def]",
          "scripts/utils/gui_helpers.py:19: error: Function is missing a return type annotation  [no-untyped-def]",
          "scripts/utils/gui_helpers.py:23: error: Function is missing a type annotation  [no-untyped-def]",
          "scripts/utils/gui_helpers.py:27: error: Function is missing a type annotation  [no-untyped-def]",
          "scripts/utils/gui_helpers.py:31: error: Function is missing a type annotation  [no-untyped-def]",
          "scripts/utils/gui_helpers.py:35: error: Function is missing a type annotation  [no-untyped-def]",
          "scripts/utils/gui_helpers.py:50: error: Function is missing a type annotation  [no-untyped-def]",
          "scripts/utils/gui_helpers.py:58: error: Function is missing a type annotation  [no-untyped-def]",
          "scripts/utils/gui_helpers.py:64: error: Function is missing a type annotation  [no-untyped-def]",
          "scripts/utils/gui_helpers.py:73: error: Function is missing a type annotation  [no-untyped-def]",
          "scripts/utils/gui_helpers.py:81: error: Function is missing a type annotation  [no-untyped-def]",
          "scripts/utils/gui_helpers.py:89: error: Function is missing a type annotation  [no-untyped-def]",
          "scripts/utils/gui_helpers.py:93: error: Function is missing a type annotation  [no-untyped-def]",
          "scripts/utils/gui_helpers.py:102: error: Function is missing a type annotation  [no-untyped-def]",
          "scripts/utils/gui_helpers.py:119: error: Function is missing a type annotation  [no-untyped-def]",
          "scripts/utils/gui_helpers.py:140: error: Function is missing a type annotation  [no-untyped-def]",
          "scripts/utils/gui_helpers.py:160: error: Function is missing a type annotation  [no-untyped-def]",
          "scripts/utils/gui_helpers.py:167: error: Function is missing a type annotation  [no-untyped-def]"
        ]
      },
      "pydocstyle": {
        "issues": [
          "scripts/utils/gui_helpers.py:1 at module level:",
          "scripts/utils/gui_helpers.py:8 in public function `validate_log_input`:",
          "scripts/utils/gui_helpers.py:15 in public function `get_current_date`:",
          "scripts/utils/gui_helpers.py:19 in public function `get_current_timestamp`:",
          "scripts/utils/gui_helpers.py:23 in public function `clear_text_input`:",
          "scripts/utils/gui_helpers.py:27 in public function `update_status_label`:",
          "scripts/utils/gui_helpers.py:31 in public function `get_selected_option`:",
          "scripts/utils/gui_helpers.py:35 in public function `append_log_entry`:",
          "scripts/utils/gui_helpers.py:50 in public function `get_category_options`:",
          "scripts/utils/gui_helpers.py:58 in public function `create_status_label`:",
          "scripts/utils/gui_helpers.py:64 in public function `create_log_frame`:",
          "scripts/utils/gui_helpers.py:73 in public function `log_message`:",
          "scripts/utils/gui_helpers.py:81 in public function `create_dropdown_menu`:",
          "scripts/utils/gui_helpers.py:89 in public function `create_button`:",
          "scripts/utils/gui_helpers.py:93 in public function `show_messagebox`:",
          "scripts/utils/gui_helpers.py:103 in public function `create_text_entry`:",
          "scripts/utils/gui_helpers.py:120 in public function `format_summary_results`:",
          "scripts/utils/gui_helpers.py:120 in public function `format_summary_results`:",
          "scripts/utils/gui_helpers.py:141 in public function `format_raw_results`:",
          "scripts/utils/gui_helpers.py:141 in public function `format_raw_results`:",
          "scripts/utils/gui_helpers.py:161 in public function `display_message`:",
          "scripts/utils/gui_helpers.py:161 in public function `display_message`:",
          "scripts/utils/gui_helpers.py:168 in public function `display_error`:",
          "scripts/utils/gui_helpers.py:168 in public function `display_error`:",
          "scripts/utils/gui_helpers.py:175 in public function `format_coverage_data`:"
        ]
      }
    }
  },
  "core/log_manager.py": {
    "method_diff": {
      "LogManager": {
        "missing": [],
        "added": [
          "__init__",
          "_safe_read_or_create_json",
          "read_logs",
          "update_logs",
          "append_entry",
          "get_unsummarized_batch",
          "update_correction_summaries"
        ]
      }
    },
    "missing_tests": [
      {
        "class": "LogManager",
        "method": "__init__"
      },
      {
        "class": "LogManager",
        "method": "_safe_read_or_create_json"
      },
      {
        "class": "LogManager",
        "method": "read_logs"
      },
      {
        "class": "LogManager",
        "method": "update_logs"
      },
      {
        "class": "LogManager",
        "method": "append_entry"
      },
      {
        "class": "LogManager",
        "method": "get_unsummarized_batch"
      },
      {
        "class": "LogManager",
        "method": "update_correction_summaries"
      }
    ],
    "complexity": {
      "__init__": {
        "complexity": 1,
        "coverage": 0.2692307692307692,
        "hits": 7,
        "lines": 26
      },
      "_safe_read_or_create_json": {
        "complexity": 5,
        "coverage": 0.18181818181818182,
        "hits": 4,
        "lines": 22
      },
      "read_logs": {
        "complexity": 1,
        "coverage": 0.2222222222222222,
        "hits": 2,
        "lines": 9
      },
      "update_logs": {
        "complexity": 1,
        "coverage": 0.3076923076923077,
        "hits": 4,
        "lines": 13
      },
      "append_entry": {
        "complexity": 1,
        "coverage": 0.14285714285714285,
        "hits": 4,
        "lines": 28
      },
      "get_unsummarized_batch": {
        "complexity": 5,
        "coverage": 0.46153846153846156,
        "hits": 12,
        "lines": 26
      },
      "update_correction_summaries": {
        "complexity": 1,
        "coverage": 0.17391304347826086,
        "hits": 4,
        "lines": 23
      }
    },
    "quality": {
      "flake8": {
        "issues": [
          {
            "line": 25,
            "column": 101,
            "code": "E501",
            "message": "line too long (101 > 100 characters)"
          },
          {
            "line": 62,
            "column": 101,
            "code": "E501",
            "message": "line too long (121 > 100 characters)"
          },
          {
            "line": 122,
            "column": 101,
            "code": "E501",
            "message": "line too long (102 > 100 characters)"
          },
          {
            "line": 126,
            "column": 101,
            "code": "E501",
            "message": "line too long (110 > 100 characters)"
          }
        ]
      },
      "mypy": {
        "errors": [
          "scripts/core/log_manager.py:70: error: Function is missing a type annotation for one or more arguments  [no-untyped-def]"
        ]
      },
      "pydocstyle": {
        "issues": [
          "scripts/core/log_manager.py:1 at module level:",
          "scripts/core/log_manager.py:9 in public class `LogManager`:",
          "scripts/core/log_manager.py:19 in public method `__init__`:",
          "scripts/core/log_manager.py:38 in private method `_safe_read_or_create_json`:",
          "scripts/core/log_manager.py:61 in public method `read_logs`:",
          "scripts/core/log_manager.py:61 in public method `read_logs`:",
          "scripts/core/log_manager.py:71 in public method `update_logs`:",
          "scripts/core/log_manager.py:85 in public method `append_entry`:",
          "scripts/core/log_manager.py:96 in private nested function `updater`:",
          "scripts/core/log_manager.py:116 in public method `get_unsummarized_batch`:",
          "scripts/core/log_manager.py:143 in public method `update_correction_summaries`:"
        ]
      }
    }
  },
  "core/core.py": {
    "method_diff": {
      "ZephyrusLoggerCore": {
        "missing": [],
        "added": [
          "__init__",
          "_safe_read_json",
          "_initialize_environment",
          "_get_summary_for_batch",
          "log_to_json",
          "generate_global_summary",
          "generate_summary",
          "log_to_markdown",
          "force_summary_all",
          "save_entry",
          "search_summaries",
          "search_raw_logs",
          "log_new_entry"
        ]
      }
    },
    "missing_tests": [
      {
        "class": "ZephyrusLoggerCore",
        "method": "__init__"
      },
      {
        "class": "ZephyrusLoggerCore",
        "method": "_safe_read_json"
      },
      {
        "class": "ZephyrusLoggerCore",
        "method": "_initialize_environment"
      },
      {
        "class": "ZephyrusLoggerCore",
        "method": "_get_summary_for_batch"
      },
      {
        "class": "ZephyrusLoggerCore",
        "method": "log_to_json"
      },
      {
        "class": "ZephyrusLoggerCore",
        "method": "generate_global_summary"
      },
      {
        "class": "ZephyrusLoggerCore",
        "method": "generate_summary"
      },
      {
        "class": "ZephyrusLoggerCore",
        "method": "log_to_markdown"
      },
      {
        "class": "ZephyrusLoggerCore",
        "method": "force_summary_all"
      },
      {
        "class": "ZephyrusLoggerCore",
        "method": "save_entry"
      },
      {
        "class": "ZephyrusLoggerCore",
        "method": "search_summaries"
      },
      {
        "class": "ZephyrusLoggerCore",
        "method": "search_raw_logs"
      },
      {
        "class": "ZephyrusLoggerCore",
        "method": "log_new_entry"
      }
    ],
    "complexity": {
      "__init__": {
        "complexity": 5,
        "coverage": 0.35555555555555557,
        "hits": 16,
        "lines": 45
      },
      "_safe_read_json": {
        "complexity": 3,
        "coverage": 0.06666666666666667,
        "hits": 1,
        "lines": 15
      },
      "_initialize_environment": {
        "complexity": 6,
        "coverage": 0.26,
        "hits": 13,
        "lines": 50
      },
      "_get_summary_for_batch": {
        "complexity": 10,
        "coverage": 0.32,
        "hits": 8,
        "lines": 25
      },
      "log_to_json": {
        "complexity": 4,
        "coverage": 0.3,
        "hits": 12,
        "lines": 40
      },
      "generate_global_summary": {
        "complexity": 5,
        "coverage": 0.35185185185185186,
        "hits": 19,
        "lines": 54
      },
      "generate_summary": {
        "complexity": 1,
        "coverage": 0.15384615384615385,
        "hits": 2,
        "lines": 13
      },
      "log_to_markdown": {
        "complexity": 5,
        "coverage": 0.35135135135135137,
        "hits": 13,
        "lines": 37
      },
      "force_summary_all": {
        "complexity": 5,
        "coverage": 0.08333333333333333,
        "hits": 1,
        "lines": 12
      },
      "save_entry": {
        "complexity": 4,
        "coverage": 0.5833333333333334,
        "hits": 7,
        "lines": 12
      },
      "search_summaries": {
        "complexity": 1,
        "coverage": 0.15384615384615385,
        "hits": 2,
        "lines": 13
      },
      "search_raw_logs": {
        "complexity": 1,
        "coverage": 0.16666666666666666,
        "hits": 2,
        "lines": 12
      },
      "log_new_entry": {
        "complexity": 1,
        "coverage": 0.14285714285714285,
        "hits": 2,
        "lines": 14
      }
    },
    "quality": {
      "flake8": {
        "issues": [
          {
            "line": 8,
            "column": 1,
            "code": "F401",
            "message": "'scripts.utils.file_utils.make_backup' imported but unused"
          },
          {
            "line": 18,
            "column": 101,
            "code": "E501",
            "message": "line too long (386 > 100 characters)"
          },
          {
            "line": 31,
            "column": 101,
            "code": "E501",
            "message": "line too long (293 > 100 characters)"
          },
          {
            "line": 34,
            "column": 101,
            "code": "E501",
            "message": "line too long (115 > 100 characters)"
          },
          {
            "line": 83,
            "column": 101,
            "code": "E501",
            "message": "line too long (111 > 100 characters)"
          },
          {
            "line": 95,
            "column": 101,
            "code": "E501",
            "message": "line too long (114 > 100 characters)"
          },
          {
            "line": 97,
            "column": 101,
            "code": "E501",
            "message": "line too long (136 > 100 characters)"
          },
          {
            "line": 106,
            "column": 101,
            "code": "E501",
            "message": "line too long (190 > 100 characters)"
          },
          {
            "line": 108,
            "column": 101,
            "code": "E501",
            "message": "line too long (110 > 100 characters)"
          },
          {
            "line": 318,
            "column": 101,
            "code": "E501",
            "message": "line too long (102 > 100 characters)"
          },
          {
            "line": 325,
            "column": 101,
            "code": "E501",
            "message": "line too long (111 > 100 characters)"
          },
          {
            "line": 358,
            "column": 101,
            "code": "E501",
            "message": "line too long (108 > 100 characters)"
          }
        ]
      },
      "black": {
        "needs_formatting": true
      },
      "mypy": {
        "errors": [
          "scripts/core/core.py:29: error: Function is missing a type annotation  [no-untyped-def]",
          "scripts/core/core.py:91: error: Function is missing a return type annotation  [no-untyped-def]",
          "scripts/core/core.py:142: error: Function is missing a type annotation for one or more arguments  [no-untyped-def]",
          "scripts/core/core.py:165: error: Incompatible return value type (got \"None\", expected \"str\")  [return-value]",
          "scripts/core/core.py:166: error: Incompatible return value type (got \"Any | None\", expected \"str\")  [return-value]",
          "scripts/core/core.py:168: error: Function is missing a type annotation for one or more arguments  [no-untyped-def]",
          "scripts/core/core.py:264: error: Function is missing a type annotation  [no-untyped-def]",
          "scripts/core/core.py:278: error: Function is missing a type annotation for one or more arguments  [no-untyped-def]",
          "scripts/core/core.py:316: error: Function is missing a return type annotation  [no-untyped-def]",
          "scripts/core/core.py:329: error: Function is missing a type annotation for one or more arguments  [no-untyped-def]",
          "scripts/core/core.py:342: error: Function is missing a return type annotation  [no-untyped-def]",
          "scripts/core/core.py:342: error: Function is missing a type annotation for one or more arguments  [no-untyped-def]",
          "scripts/core/core.py:356: error: Function is missing a return type annotation  [no-untyped-def]",
          "scripts/core/core.py:356: error: Function is missing a type annotation for one or more arguments  [no-untyped-def]",
          "scripts/core/core.py:369: error: Function is missing a type annotation  [no-untyped-def]"
        ]
      },
      "pydocstyle": {
        "issues": [
          "scripts/core/core.py:1 at module level:",
          "scripts/core/core.py:17 in public class `ZephyrusLoggerCore`:",
          "scripts/core/core.py:17 in public class `ZephyrusLoggerCore`:",
          "scripts/core/core.py:30 in public method `__init__`:",
          "scripts/core/core.py:94 in private method `_initialize_environment`:",
          "scripts/core/core.py:143 in private method `_get_summary_for_batch`:",
          "scripts/core/core.py:169 in public method `log_to_json`:",
          "scripts/core/core.py:210 in public method `generate_global_summary`:",
          "scripts/core/core.py:265 in public method `generate_summary`:",
          "scripts/core/core.py:279 in public method `log_to_markdown`:",
          "scripts/core/core.py:317 in public method `force_summary_all`:",
          "scripts/core/core.py:317 in public method `force_summary_all`:",
          "scripts/core/core.py:330 in public method `save_entry`:",
          "scripts/core/core.py:330 in public method `save_entry`:",
          "scripts/core/core.py:343 in public method `search_summaries`:",
          "scripts/core/core.py:343 in public method `search_summaries`:",
          "scripts/core/core.py:343 in public method `search_summaries`:",
          "scripts/core/core.py:357 in public method `search_raw_logs`:",
          "scripts/core/core.py:370 in public method `log_new_entry`:"
        ]
      }
    }
  },
  "core/__init__.py": {
    "method_diff": {},
    "missing_tests": [],
    "complexity": {},
    "quality": {
      "pydocstyle": {
        "issues": [
          "scripts/core/__init__.py:1 at module level:"
        ]
      }
    }
  },
  "core/summary_tracker.py": {
    "method_diff": {
      "SummaryTracker": {
        "missing": [],
        "added": [
          "__init__",
          "_safe_load_tracker",
          "_safe_init_summary_indexer",
          "_safe_init_raw_indexer",
          "get_summarized_count",
          "update",
          "_save",
          "rebuild",
          "validate",
          "get_coverage_data"
        ]
      }
    },
    "missing_tests": [
      {
        "class": "SummaryTracker",
        "method": "__init__"
      },
      {
        "class": "SummaryTracker",
        "method": "_safe_load_tracker"
      },
      {
        "class": "SummaryTracker",
        "method": "_safe_init_summary_indexer"
      },
      {
        "class": "SummaryTracker",
        "method": "_safe_init_raw_indexer"
      },
      {
        "class": "SummaryTracker",
        "method": "get_summarized_count"
      },
      {
        "class": "SummaryTracker",
        "method": "update"
      },
      {
        "class": "SummaryTracker",
        "method": "_save"
      },
      {
        "class": "SummaryTracker",
        "method": "rebuild"
      },
      {
        "class": "SummaryTracker",
        "method": "validate"
      },
      {
        "class": "SummaryTracker",
        "method": "get_coverage_data"
      }
    ],
    "complexity": {
      "__init__": {
        "complexity": 1,
        "coverage": 1.0,
        "hits": 6,
        "lines": 6
      },
      "_safe_load_tracker": {
        "complexity": 5,
        "coverage": 0.6666666666666666,
        "hits": 6,
        "lines": 9
      },
      "_safe_init_summary_indexer": {
        "complexity": 3,
        "coverage": 0.5,
        "hits": 3,
        "lines": 6
      },
      "_safe_init_raw_indexer": {
        "complexity": 3,
        "coverage": 0.5,
        "hits": 3,
        "lines": 6
      },
      "get_summarized_count": {
        "complexity": 1,
        "coverage": 1.0,
        "hits": 2,
        "lines": 2
      },
      "update": {
        "complexity": 1,
        "coverage": 0.5,
        "hits": 6,
        "lines": 12
      },
      "_save": {
        "complexity": 3,
        "coverage": 0.6,
        "hits": 3,
        "lines": 5
      },
      "rebuild": {
        "complexity": 14,
        "coverage": 0.7096774193548387,
        "hits": 22,
        "lines": 31
      },
      "validate": {
        "complexity": 13,
        "coverage": 0.32075471698113206,
        "hits": 17,
        "lines": 53
      },
      "get_coverage_data": {
        "complexity": 3,
        "coverage": 0.030303030303030304,
        "hits": 1,
        "lines": 33
      }
    },
    "quality": {
      "flake8": {
        "issues": [
          {
            "line": 3,
            "column": 1,
            "code": "F401",
            "message": "'json' imported but unused"
          },
          {
            "line": 5,
            "column": 1,
            "code": "F401",
            "message": "'pathlib.Path' imported but unused"
          },
          {
            "line": 56,
            "column": 101,
            "code": "E501",
            "message": "line too long (102 > 100 characters)"
          }
        ]
      },
      "mypy": {
        "errors": [
          "scripts/core/summary_tracker.py:52: error: Function is missing a return type annotation  [no-untyped-def]",
          "scripts/core/summary_tracker.py:65: error: Function is missing a return type annotation  [no-untyped-def]",
          "scripts/core/summary_tracker.py:71: error: Function is missing a return type annotation  [no-untyped-def]",
          "scripts/core/summary_tracker.py:103: error: Function is missing a type annotation for one or more arguments  [no-untyped-def]"
        ]
      },
      "pydocstyle": {
        "issues": [
          "scripts/core/summary_tracker.py:1 at module level:",
          "scripts/core/summary_tracker.py:17 in public class `SummaryTracker`:",
          "scripts/core/summary_tracker.py:18 in public method `__init__`:",
          "scripts/core/summary_tracker.py:49 in public method `get_summarized_count`:",
          "scripts/core/summary_tracker.py:52 in public method `update`:",
          "scripts/core/summary_tracker.py:71 in public method `rebuild`:",
          "scripts/core/summary_tracker.py:104 in public method `validate`:",
          "scripts/core/summary_tracker.py:104 in public method `validate`:",
          "scripts/core/summary_tracker.py:158 in public method `get_coverage_data`:"
        ]
      }
    }
  },
  "ai/__init__.py": {
    "method_diff": {},
    "missing_tests": [],
    "complexity": {},
    "quality": {
      "pydocstyle": {
        "issues": [
          "scripts/ai/__init__.py:1 at module level:"
        ]
      }
    }
  },
  "ai/ai_summarizer.py": {
    "method_diff": {
      "AISummarizer": {
        "missing": [],
        "added": [
          "__init__",
          "_fallback_summary",
          "summarize_entry",
          "summarize_entries_bulk"
        ]
      }
    },
    "missing_tests": [
      {
        "class": "AISummarizer",
        "method": "__init__"
      },
      {
        "class": "AISummarizer",
        "method": "_fallback_summary"
      },
      {
        "class": "AISummarizer",
        "method": "summarize_entry"
      },
      {
        "class": "AISummarizer",
        "method": "summarize_entries_bulk"
      }
    ],
    "complexity": {
      "__init__": {
        "complexity": 1,
        "coverage": 0.625,
        "hits": 5,
        "lines": 8
      },
      "_fallback_summary": {
        "complexity": 3,
        "coverage": 0.3,
        "hits": 6,
        "lines": 20
      },
      "summarize_entry": {
        "complexity": 3,
        "coverage": 0.3333333333333333,
        "hits": 8,
        "lines": 24
      },
      "summarize_entries_bulk": {
        "complexity": 6,
        "coverage": 0.39285714285714285,
        "hits": 11,
        "lines": 28
      }
    },
    "quality": {
      "flake8": {
        "issues": [
          {
            "line": 11,
            "column": 101,
            "code": "E501",
            "message": "line too long (283 > 100 characters)"
          },
          {
            "line": 15,
            "column": 101,
            "code": "E501",
            "message": "line too long (118 > 100 characters)"
          },
          {
            "line": 24,
            "column": 101,
            "code": "E501",
            "message": "line too long (111 > 100 characters)"
          },
          {
            "line": 30,
            "column": 101,
            "code": "E501",
            "message": "line too long (101 > 100 characters)"
          },
          {
            "line": 38,
            "column": 101,
            "code": "E501",
            "message": "line too long (101 > 100 characters)"
          },
          {
            "line": 45,
            "column": 101,
            "code": "E501",
            "message": "line too long (126 > 100 characters)"
          },
          {
            "line": 63,
            "column": 101,
            "code": "E501",
            "message": "line too long (101 > 100 characters)"
          },
          {
            "line": 70,
            "column": 101,
            "code": "E501",
            "message": "line too long (118 > 100 characters)"
          },
          {
            "line": 92,
            "column": 101,
            "code": "E501",
            "message": "line too long (101 > 100 characters)"
          }
        ]
      },
      "black": {
        "needs_formatting": true
      },
      "mypy": {
        "errors": [
          "scripts/ai/ai_summarizer.py:3: error: Library stubs not installed for \"requests.exceptions\"  [import-untyped]",
          "scripts/ai/ai_summarizer.py:13: error: Function is missing a return type annotation  [no-untyped-def]",
          "scripts/ai/ai_summarizer.py:22: error: Function is missing a type annotation  [no-untyped-def]",
          "scripts/ai/ai_summarizer.py:43: error: Function is missing a type annotation  [no-untyped-def]",
          "scripts/ai/ai_summarizer.py:68: error: Function is missing a type annotation  [no-untyped-def]"
        ]
      },
      "pydocstyle": {
        "issues": [
          "scripts/ai/ai_summarizer.py:1 at module level:",
          "scripts/ai/ai_summarizer.py:10 in public class `AISummarizer`:",
          "scripts/ai/ai_summarizer.py:10 in public class `AISummarizer`:",
          "scripts/ai/ai_summarizer.py:14 in public method `__init__`:"
        ]
      }
    }
  },
  "        D100": {
    "quality": {
      "pydocstyle": {
        "issues": [
          "D100: Missing docstring in public module",
          "D100: Missing docstring in public module",
          "D100: Missing docstring in public module",
          "D100: Missing docstring in public module",
          "D100: Missing docstring in public module",
          "D100: Missing docstring in public module",
          "D100: Missing docstring in public module",
          "D100: Missing docstring in public module",
          "D100: Missing docstring in public module",
          "D100: Missing docstring in public module",
          "D100: Missing docstring in public module",
          "D100: Missing docstring in public module",
          "D100: Missing docstring in public module",
          "D100: Missing docstring in public module",
          "D100: Missing docstring in public module",
          "D100: Missing docstring in public module",
          "D100: Missing docstring in public module",
          "D100: Missing docstring in public module",
          "D100: Missing docstring in public module",
          "D100: Missing docstring in public module",
          "D100: Missing docstring in public module",
          "D100: Missing docstring in public module",
          "D100: Missing docstring in public module",
          "D100: Missing docstring in public module",
          "D100: Missing docstring in public module",
          "D100: Missing docstring in public module",
          "D100: Missing docstring in public module",
          "D100: Missing docstring in public module",
          "D100: Missing docstring in public module",
          "D100: Missing docstring in public module",
          "D100: Missing docstring in public module",
          "D100: Missing docstring in public module",
          "D100: Missing docstring in public module",
          "D100: Missing docstring in public module",
          "D100: Missing docstring in public module",
          "D100: Missing docstring in public module",
          "D100: Missing docstring in public module",
          "D100: Missing docstring in public module",
          "D100: Missing docstring in public module",
          "D100: Missing docstring in public module",
          "D100: Missing docstring in public module",
          "D100: Missing docstring in public module",
          "D100: Missing docstring in public module",
          "D100: Missing docstring in public module",
          "D100: Missing docstring in public module"
        ]
      }
    }
  },
  "        D101": {
    "quality": {
      "pydocstyle": {
        "issues": [
          "D101: Missing docstring in public class",
          "D101: Missing docstring in public class",
          "D101: Missing docstring in public class",
          "D101: Missing docstring in public class",
          "D101: Missing docstring in public class",
          "D101: Missing docstring in public class",
          "D101: Missing docstring in public class",
          "D101: Missing docstring in public class",
          "D101: Missing docstring in public class",
          "D101: Missing docstring in public class",
          "D101: Missing docstring in public class",
          "D101: Missing docstring in public class",
          "D101: Missing docstring in public class"
        ]
      }
    }
  },
  "        D102": {
    "quality": {
      "pydocstyle": {
        "issues": [
          "D102: Missing docstring in public method",
          "D102: Missing docstring in public method",
          "D102: Missing docstring in public method",
          "D102: Missing docstring in public method",
          "D102: Missing docstring in public method",
          "D102: Missing docstring in public method",
          "D102: Missing docstring in public method",
          "D102: Missing docstring in public method",
          "D102: Missing docstring in public method",
          "D102: Missing docstring in public method",
          "D102: Missing docstring in public method",
          "D102: Missing docstring in public method",
          "D102: Missing docstring in public method",
          "D102: Missing docstring in public method",
          "D102: Missing docstring in public method",
          "D102: Missing docstring in public method",
          "D102: Missing docstring in public method",
          "D102: Missing docstring in public method",
          "D102: Missing docstring in public method",
          "D102: Missing docstring in public method",
          "D102: Missing docstring in public method",
          "D102: Missing docstring in public method",
          "D102: Missing docstring in public method",
          "D102: Missing docstring in public method",
          "D102: Missing docstring in public method",
          "D102: Missing docstring in public method",
          "D102: Missing docstring in public method",
          "D102: Missing docstring in public method",
          "D102: Missing docstring in public method",
          "D102: Missing docstring in public method",
          "D102: Missing docstring in public method",
          "D102: Missing docstring in public method",
          "D102: Missing docstring in public method",
          "D102: Missing docstring in public method",
          "D102: Missing docstring in public method",
          "D102: Missing docstring in public method"
        ]
      }
    }
  },
  "        D104": {
    "quality": {
      "pydocstyle": {
        "issues": [
          "D104: Missing docstring in public package",
          "D104: Missing docstring in public package",
          "D104: Missing docstring in public package",
          "D104: Missing docstring in public package",
          "D104: Missing docstring in public package",
          "D104: Missing docstring in public package",
          "D104: Missing docstring in public package",
          "D104: Missing docstring in public package",
          "D104: Missing docstring in public package",
          "D104: Missing docstring in public package",
          "D104: Missing docstring in public package",
          "D104: Missing docstring in public package"
        ]
      }
    }
  },
  "        D401": {
    "quality": {
      "pydocstyle": {
        "issues": [
          "D401: First line should be in imperative mood (perhaps 'Return', not 'Returns')",
          "D401: First line should be in imperative mood (perhaps 'Return', not 'Returns')",
          "D401: First line should be in imperative mood (perhaps 'Check', not 'Checks')",
          "D401: First line should be in imperative mood (perhaps 'Generate', not 'Generates')",
          "D401: First line should be in imperative mood; try rephrasing (found 'Helper')",
          "D401: First line should be in imperative mood (perhaps 'Create', not 'Creates')",
          "D401: First line should be in imperative mood (perhaps 'Start', not 'Starts')",
          "D401: First line should be in imperative mood (perhaps 'Emit', not 'Emits')",
          "D401: First line should be in imperative mood (perhaps 'Append', not 'Appends')",
          "D401: First line should be in imperative mood (perhaps 'Return', not 'Returns')",
          "D401: First line should be in imperative mood (perhaps 'Retrieve', not 'Retrieves')",
          "D401: First line should be in imperative mood (perhaps 'Retrieve', not 'Retrieves')",
          "D401: First line should be in imperative mood (perhaps 'Call', not 'Called')",
          "D401: First line should be in imperative mood (perhaps 'Call', not 'Called')",
          "D401: First line should be in imperative mood (perhaps 'Configure', not 'Configures')",
          "D401: First line should be in imperative mood (perhaps 'Load', not 'Loads')",
          "D401: First line should be in imperative mood (perhaps 'Load', not 'Loads')",
          "D401: First line should be in imperative mood (perhaps 'Process', not 'Processes')",
          "D401: First line should be in imperative mood (perhaps 'Process', not 'Processes')",
          "D401: First line should be in imperative mood (perhaps 'Process', not 'Processes')",
          "D401: First line should be in imperative mood (perhaps 'Load', not 'Loads')",
          "D401: First line should be in imperative mood (perhaps 'Initialize', not 'Initializes')",
          "D401: First line should be in imperative mood (perhaps 'Load', not 'Loads')",
          "D401: First line should be in imperative mood (perhaps 'Search', not 'Searches')",
          "D401: First line should be in imperative mood (perhaps 'Build', not 'Builds')",
          "D401: First line should be in imperative mood (perhaps 'Save', not 'Saves')",
          "D401: First line should be in imperative mood (perhaps 'Initialize', not 'Initializes')",
          "D401: First line should be in imperative mood (perhaps 'Load', not 'Loads')",
          "D401: First line should be in imperative mood (perhaps 'Load', not 'Loads')",
          "D401: First line should be in imperative mood; try rephrasing (found 'Deprecated')",
          "D401: First line should be in imperative mood (perhaps 'Parse', not 'Parses')",
          "D401: First line should be in imperative mood (perhaps 'Write', not 'Writes')",
          "D401: First line should be in imperative mood (perhaps 'Parse', not 'Parses')",
          "D401: First line should be in imperative mood (perhaps 'Create', not 'Creates')",
          "D401: First line should be in imperative mood (perhaps 'Return', not 'Returns')",
          "D401: First line should be in imperative mood (perhaps 'Create', not 'Creates')",
          "D401: First line should be in imperative mood (perhaps 'Format', not 'Formats')",
          "D401: First line should be in imperative mood (perhaps 'Format', not 'Formats')",
          "D401: First line should be in imperative mood (perhaps 'Display', not 'Displays')",
          "D401: First line should be in imperative mood (perhaps 'Display', not 'Displays')",
          "D401: First line should be in imperative mood (perhaps 'Format', not 'Formats')",
          "D401: First line should be in imperative mood (perhaps 'Initialize', not 'Initializes')",
          "D401: First line should be in imperative mood (perhaps 'Read', not 'Reads')",
          "D401: First line should be in imperative mood (perhaps 'Update', not 'Updates')",
          "D401: First line should be in imperative mood (perhaps 'Append', not 'Appends')",
          "D401: First line should be in imperative mood (perhaps 'Update', not 'Updates')",
          "D401: First line should be in imperative mood (perhaps 'Retrieve', not 'Retrieves')",
          "D401: First line should be in imperative mood (perhaps 'Update', not 'Updates')",
          "D401: First line should be in imperative mood (perhaps 'Initialize', not 'Initializes')",
          "D401: First line should be in imperative mood (perhaps 'Ensure', not 'Ensures')",
          "D401: First line should be in imperative mood (perhaps 'Get', not 'Gets')",
          "D401: First line should be in imperative mood (perhaps 'Log', not 'Logs')",
          "D401: First line should be in imperative mood (perhaps 'Generate', not 'Generates')",
          "D401: First line should be in imperative mood (perhaps 'Generate', not 'Generates')",
          "D401: First line should be in imperative mood (perhaps 'Log', not 'Logs')",
          "D401: First line should be in imperative mood (perhaps 'Force', not 'Forces')",
          "D401: First line should be in imperative mood; try rephrasing (found 'Wrapper')",
          "D401: First line should be in imperative mood (perhaps 'Search', not 'Searches')",
          "D401: First line should be in imperative mood (perhaps 'Search', not 'Searches')",
          "D401: First line should be in imperative mood (perhaps 'Log', not 'Logs')",
          "D401: First line should be in imperative mood (perhaps 'Validate', not 'Validates')",
          "D401: First line should be in imperative mood (perhaps 'Return', not 'Returns')"
        ]
      }
    }
  },
  "        D205": {
    "quality": {
      "pydocstyle": {
        "issues": [
          "D205: 1 blank line required between summary line and description (found 0)",
          "D205: 1 blank line required between summary line and description (found 0)",
          "D205: 1 blank line required between summary line and description (found 0)",
          "D205: 1 blank line required between summary line and description (found 0)",
          "D205: 1 blank line required between summary line and description (found 0)",
          "D205: 1 blank line required between summary line and description (found 0)",
          "D205: 1 blank line required between summary line and description (found 0)",
          "D205: 1 blank line required between summary line and description (found 0)",
          "D205: 1 blank line required between summary line and description (found 0)",
          "D205: 1 blank line required between summary line and description (found 0)",
          "D205: 1 blank line required between summary line and description (found 0)",
          "D205: 1 blank line required between summary line and description (found 0)",
          "D205: 1 blank line required between summary line and description (found 0)",
          "D205: 1 blank line required between summary line and description (found 0)",
          "D205: 1 blank line required between summary line and description (found 0)",
          "D205: 1 blank line required between summary line and description (found 0)",
          "D205: 1 blank line required between summary line and description (found 0)",
          "D205: 1 blank line required between summary line and description (found 0)",
          "D205: 1 blank line required between summary line and description (found 0)",
          "D205: 1 blank line required between summary line and description (found 0)",
          "D205: 1 blank line required between summary line and description (found 0)",
          "D205: 1 blank line required between summary line and description (found 0)",
          "D205: 1 blank line required between summary line and description (found 0)",
          "D205: 1 blank line required between summary line and description (found 0)",
          "D205: 1 blank line required between summary line and description (found 0)",
          "D205: 1 blank line required between summary line and description (found 0)",
          "D205: 1 blank line required between summary line and description (found 0)",
          "D205: 1 blank line required between summary line and description (found 0)",
          "D205: 1 blank line required between summary line and description (found 0)",
          "D205: 1 blank line required between summary line and description (found 0)",
          "D205: 1 blank line required between summary line and description (found 0)",
          "D205: 1 blank line required between summary line and description (found 0)",
          "D205: 1 blank line required between summary line and description (found 0)"
        ]
      }
    }
  },
  "        D107": {
    "quality": {
      "pydocstyle": {
        "issues": [
          "D107: Missing docstring in __init__",
          "D107: Missing docstring in __init__",
          "D107: Missing docstring in __init__",
          "D107: Missing docstring in __init__",
          "D107: Missing docstring in __init__",
          "D107: Missing docstring in __init__",
          "D107: Missing docstring in __init__",
          "D107: Missing docstring in __init__",
          "D107: Missing docstring in __init__",
          "D107: Missing docstring in __init__",
          "D107: Missing docstring in __init__",
          "D107: Missing docstring in __init__",
          "D107: Missing docstring in __init__",
          "D107: Missing docstring in __init__",
          "D107: Missing docstring in __init__",
          "D107: Missing docstring in __init__",
          "D107: Missing docstring in __init__",
          "D107: Missing docstring in __init__",
          "D107: Missing docstring in __init__"
        ]
      }
    }
  },
  "        D400": {
    "quality": {
      "pydocstyle": {
        "issues": [
          "D400: First line should end with a period (not 'g')",
          "D400: First line should end with a period (not ',')",
          "D400: First line should end with a period (not ':')",
          "D400: First line should end with a period (not ',')",
          "D400: First line should end with a period (not ',')",
          "D400: First line should end with a period (not 'd')",
          "D400: First line should end with a period (not 's')",
          "D400: First line should end with a period (not 'd')",
          "D400: First line should end with a period (not 's')",
          "D400: First line should end with a period (not 't')",
          "D400: First line should end with a period (not ',')",
          "D400: First line should end with a period (not ',')",
          "D400: First line should end with a period (not ')')",
          "D400: First line should end with a period (not ')')"
        ]
      }
    }
  },
  "        D200": {
    "quality": {
      "pydocstyle": {
        "issues": [
          "D200: One-line docstring should fit on one line with quotes (found 3)",
          "D200: One-line docstring should fit on one line with quotes (found 3)",
          "D200: One-line docstring should fit on one line with quotes (found 3)",
          "D200: One-line docstring should fit on one line with quotes (found 3)",
          "D200: One-line docstring should fit on one line with quotes (found 3)",
          "D200: One-line docstring should fit on one line with quotes (found 3)",
          "D200: One-line docstring should fit on one line with quotes (found 3)",
          "D200: One-line docstring should fit on one line with quotes (found 3)",
          "D200: One-line docstring should fit on one line with quotes (found 3)",
          "D200: One-line docstring should fit on one line with quotes (found 3)",
          "D200: One-line docstring should fit on one line with quotes (found 3)",
          "D200: One-line docstring should fit on one line with quotes (found 3)",
          "D200: One-line docstring should fit on one line with quotes (found 3)",
          "D200: One-line docstring should fit on one line with quotes (found 3)",
          "D200: One-line docstring should fit on one line with quotes (found 3)",
          "D200: One-line docstring should fit on one line with quotes (found 3)",
          "D200: One-line docstring should fit on one line with quotes (found 3)",
          "D200: One-line docstring should fit on one line with quotes (found 3)",
          "D200: One-line docstring should fit on one line with quotes (found 3)",
          "D200: One-line docstring should fit on one line with quotes (found 3)",
          "D200: One-line docstring should fit on one line with quotes (found 3)",
          "D200: One-line docstring should fit on one line with quotes (found 3)",
          "D200: One-line docstring should fit on one line with quotes (found 3)",
          "D200: One-line docstring should fit on one line with quotes (found 3)",
          "D200: One-line docstring should fit on one line with quotes (found 3)",
          "D200: One-line docstring should fit on one line with quotes (found 3)",
          "D200: One-line docstring should fit on one line with quotes (found 3)",
          "D200: One-line docstring should fit on one line with quotes (found 3)",
          "D200: One-line docstring should fit on one line with quotes (found 3)",
          "D200: One-line docstring should fit on one line with quotes (found 3)",
          "D200: One-line docstring should fit on one line with quotes (found 3)",
          "D200: One-line docstring should fit on one line with quotes (found 3)",
          "D200: One-line docstring should fit on one line with quotes (found 3)",
          "D200: One-line docstring should fit on one line with quotes (found 3)",
          "D200: One-line docstring should fit on one line with quotes (found 3)",
          "D200: One-line docstring should fit on one line with quotes (found 3)",
          "D200: One-line docstring should fit on one line with quotes (found 3)",
          "D200: One-line docstring should fit on one line with quotes (found 3)",
          "D200: One-line docstring should fit on one line with quotes (found 3)"
        ]
      }
    }
  },
  "        D106": {
    "quality": {
      "pydocstyle": {
        "issues": [
          "D106: Missing docstring in public nested class"
        ]
      }
    }
  },
  "        D202": {
    "quality": {
      "pydocstyle": {
        "issues": [
          "D202: No blank lines allowed after function docstring (found 1)",
          "D202: No blank lines allowed after function docstring (found 1)",
          "D202: No blank lines allowed after function docstring (found 1)"
        ]
      }
    }
  },
  "        D204": {
    "quality": {
      "pydocstyle": {
        "issues": [
          "D204: 1 blank line required after class docstring (found 0)",
          "D204: 1 blank line required after class docstring (found 0)",
          "D204: 1 blank line required after class docstring (found 0)",
          "D204: 1 blank line required after class docstring (found 0)"
        ]
      }
    }
  },
  "        D103": {
    "quality": {
      "pydocstyle": {
        "issues": [
          "D103: Missing docstring in public function",
          "D103: Missing docstring in public function",
          "D103: Missing docstring in public function",
          "D103: Missing docstring in public function",
          "D103: Missing docstring in public function",
          "D103: Missing docstring in public function",
          "D103: Missing docstring in public function",
          "D103: Missing docstring in public function",
          "D103: Missing docstring in public function",
          "D103: Missing docstring in public function",
          "D103: Missing docstring in public function",
          "D103: Missing docstring in public function",
          "D103: Missing docstring in public function",
          "D103: Missing docstring in public function",
          "D103: Missing docstring in public function",
          "D103: Missing docstring in public function",
          "D103: Missing docstring in public function",
          "D103: Missing docstring in public function",
          "D103: Missing docstring in public function",
          "D103: Missing docstring in public function",
          "D103: Missing docstring in public function",
          "D103: Missing docstring in public function",
          "D103: Missing docstring in public function",
          "D103: Missing docstring in public function",
          "D103: Missing docstring in public function",
          "D103: Missing docstring in public function"
        ]
      }
    }
  },
  "        D105": {
    "quality": {
      "pydocstyle": {
        "issues": [
          "D105: Missing docstring in magic method"
        ]
      }
    }
  },
  "ai_summarizer.py": {
    "quality": {
      "coverage": {
        "percent": 80.0
      }
    }
  },
  "analyzer.py": {
    "quality": {
      "coverage": {
        "percent": 0.0
      }
    }
  },
  "artifact_base.py": {
    "quality": {
      "coverage": {
        "percent": 80.0
      }
    }
  },
  "ci_analyzer_cli.py": {
    "quality": {
      "coverage": {
        "percent": 0.0
      }
    }
  },
  "lint_parser.py": {
    "quality": {
      "coverage": {
        "percent": 92.3
      }
    }
  },
  "refactor_parser.py": {
    "quality": {
      "coverage": {
        "percent": 93.3
      }
    }
  },
  "config_loader.py": {
    "quality": {
      "coverage": {
        "percent": 74.7
      }
    }
  },
  "config_manager.py": {
    "quality": {
      "coverage": {
        "percent": 90.4
      }
    }
  },
  "constants.py": {
    "quality": {
      "coverage": {
        "percent": 100.0
      }
    }
  },
  "logging_setup.py": {
    "quality": {
      "coverage": {
        "percent": 100.0
      }
    }
  },
  "core.py": {
    "quality": {
      "coverage": {
        "percent": 75.6
      }
    }
  },
  "log_manager.py": {
    "quality": {
      "coverage": {
        "percent": 87.8
      }
    }
  },
  "summary_tracker.py": {
    "quality": {
      "coverage": {
        "percent": 73.4
      }
    }
  },
  "base_indexer.py": {
    "quality": {
      "coverage": {
        "percent": 88.9
      }
    }
  },
  "raw_log_indexer.py": {
    "quality": {
      "coverage": {
        "percent": 68.8
      }
    }
  },
  "summary_indexer.py": {
    "quality": {
      "coverage": {
        "percent": 67.9
      }
    }
  },
  "ast_extractor.py": {
    "quality": {
      "coverage": {
        "percent": 95.2
      }
    }
  },
  "complexity_analyzer.py": {
    "quality": {
      "coverage": {
        "percent": 100.0
      }
    }
  },
  "coverage_parser.py": {
    "quality": {
      "coverage": {
        "percent": 80.0
      }
    }
  },
  "method_line_ranges.py": {
    "quality": {
      "coverage": {
        "percent": 97.2
      }
    }
  },
  "quality_checker.py": {
    "quality": {
      "coverage": {
        "percent": 86.2
      }
    }
  },
  "refactor_guard.py": {
    "quality": {
      "coverage": {
        "percent": 94.6
      }
    }
  },
  "refactor_guard_cli.py": {
    "quality": {
      "coverage": {
        "percent": 91.2
      }
    }
  },
  "complexity_summary.py": {
    "quality": {
      "coverage": {
        "percent": 60.0
      }
    }
  },
  "file_utils.py": {
    "quality": {
      "coverage": {
        "percent": 72.7
      }
    }
  },
  "git_utils.py": {
    "quality": {
      "coverage": {
        "percent": 37.0
      }
    }
  },
  "gui_helpers.py": {
    "quality": {
      "coverage": {
        "percent": 38.3
      }
    }
  },
  "link_summaries_to_raw_logs.py": {
    "quality": {
      "coverage": {
        "percent": 83.7
      }
    }
  },
  "zip_util.py": {
    "quality": {
      "coverage": {
        "percent": 92.9
      }
    }
  }
}